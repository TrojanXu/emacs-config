;; Object python2.7/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "python2.7/"
  :tables (list 
   (semanticdb-table "__future__.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Record of phased-in incompatible language changes.

Each line is of the form:

    FeatureName = \"_Feature(\" OptionalRelease \",\" MandatoryRelease \",\"
                              CompilerFlag \")\"

where, normally, OptionalRelease < MandatoryRelease, and both are 5-tuples
of the same form as sys.version_info:

    (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int
     PY_MINOR_VERSION, # the 1; an int
     PY_MICRO_VERSION, # the 0; an int
     PY_RELEASE_LEVEL, # \"alpha\", \"beta\", \"candidate\" or \"final\"; string
     PY_RELEASE_SERIAL # the 3; an int
    )

OptionalRelease records the first release in which

    from __future__ import FeatureName

was accepted.

In the case of MandatoryReleases that have not yet occurred,
MandatoryRelease predicts the release in which the feature will become part
of the language.

Else MandatoryRelease records when the feature became part of the language;
in releases at or after that, modules no longer need

    from __future__ import FeatureName

to use the feature in question, but may continue to use such imports.

MandatoryRelease may also be None, meaning that a planned feature got
dropped.

Instances of class _Feature have two corresponding methods,
.getOptionalRelease() and .getMandatoryRelease().

CompilerFlag is the (bitfield) flag that should be passed in the fourth
argument to the builtin function compile() to enable the feature in
dynamically compiled code.  This flag is stored in the .compiler_flag
attribute on _Future instances.  These values must match the appropriate
#defines of CO_xxx flags in Include/compile.h.

No feature line is ever to be deleted from this file.
\"\"\"" code nil nil [1 1645])
            ("all_feature_names" variable nil nil [1647 1816])
            ("__all__" code nil nil [1818 1869])
            ("CO_NESTED" variable nil nil [2093 2122])
            ("CO_GENERATOR_ALLOWED" variable nil nil [2141 2165])
            ("CO_FUTURE_DIVISION" variable nil nil [2209 2238])
            ("CO_FUTURE_ABSOLUTE_IMPORT" variable nil nil [2252 2286])
            ("CO_FUTURE_WITH_STATEMENT" variable nil nil [2325 2359])
            ("CO_FUTURE_PRINT_FUNCTION" variable nil nil [2379 2414])
            ("CO_FUTURE_UNICODE_LITERALS" variable nil nil [2434 2470])
            ("_Feature" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2596 2627])
                            ("self" variable nil (reparse-symbol indented_block_body) [2636 2669])
                            ("self" variable nil (reparse-symbol indented_block_body) [2678 2712]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2531 2535])
                            ("optionalRelease" variable nil (reparse-symbol function_parameters) [2537 2552])
                            ("mandatoryRelease" variable nil (reparse-symbol function_parameters) [2554 2570])
                            ("compiler_flag" variable nil (reparse-symbol function_parameters) [2572 2585]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2518 2713])
                    ("getOptionalRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2741 2745]))                          
                        :documentation "Return first release in which this feature was recognized.

        This is a 5-tuple, of the same form as sys.version_info.
        ")
                        (reparse-symbol indented_block_body) [2718 2926])
                    ("getMandatoryRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2955 2959]))                          
                        :documentation "Return release in which this feature will become mandatory.

        This is a 5-tuple, of the same form as sys.version_info, or, if
        the feature was dropped, is None.
        ")
                        (reparse-symbol indented_block_body) [2931 3191])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3209 3213]))                          )
                        (reparse-symbol indented_block_body) [3196 3370]))                  
                :type "class")
                nil [2498 3370])
            ("nested_scopes" variable nil nil [3371 3502])
            ("generators" variable nil nil [3504 3637])
            ("division" variable nil nil [3639 3764])
            ("absolute_import" variable nil nil [3766 3919])
            ("with_statement" variable nil nil [3921 4070])
            ("print_function" variable nil nil [4072 4221])
            ("unicode_literals" variable nil nil [4223 4380]))          
    :file "__future__.py"
    :pointmax 4381
    :fsize 4380
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "os.py"
    :major-mode 'python-mode
    :tags 
        '( ("r\"\"\"OS routines for Mac, NT, or Posix depending on what system we're on.

This exports:
  - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.
  - os.path is one of the modules posixpath, or ntpath
  - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'
  - os.curdir is a string representing the current directory ('.' or ':')
  - os.pardir is a string representing the parent directory ('..' or '::')
  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\\\')
  - os.extsep is the extension separator ('.' or '/')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).
\"\"\"" code nil nil [1 1163])
            ("sys" include nil nil [1169 1186])
            ("errno" include nil nil [1169 1186])
            ("_names" variable nil nil [1188 1221])
            ("__all__" variable nil nil [1271 1446])
            ("_get_exports_list" function (:arguments 
              ( ("module" variable nil (reparse-symbol function_parameters) [1470 1476]))              ) nil [1448 1606])
            ("if" code nil nil [1607 3137])
            ("sys" variable nil nil [3138 3167])
            ("" code nil nil [3188 3256])
            ("del" code nil nil [3258 3268])
            ("SEEK_SET" variable nil nil [3390 3402])
            ("SEEK_CUR" variable nil nil [3403 3415])
            ("SEEK_END" variable nil nil [3416 3428])
            ("makedirs" function
               (:documentation "makedirs(path [, mode=0777])

    Super-mkdir; create a leaf directory and all intermediate ones.
    Works like mkdir, except that any intermediate path segment (not
    just the rightmost) will be created if it does not exist.  This is
    recursive.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3538 3542])
                    ("mode" variable nil (reparse-symbol function_parameters) [3544 3548]))                  )
                nil [3525 4277])
            ("removedirs" function
               (:documentation "removedirs(path)

    Super-rmdir; remove a leaf directory and all empty intermediate
    ones.  Works like rmdir except that, if the leaf directory is
    successfully removed, directories corresponding to rightmost path
    segments will be pruned away until either the whole path is
    consumed or an error occurs.  Errors during this latter phase are
    ignored -- they generally mean that a directory was not empty.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4293 4297]))                  )
                nil [4278 4984])
            ("renames" function
               (:documentation "renames(old, new)

    Super-rename; create directories as necessary and delete any left
    empty.  Works like rename, except creation of any intermediate
    directories needed to make the new pathname good is attempted
    first.  After the rename, directories corresponding to rightmost
    path segments of the old name will be pruned way until either the
    whole path is consumed or a nonempty directory is found.

    Note: this function can fail with the new directory structure made
    if you lack permissions needed to unlink the leaf directory or
    file.

    "
                :arguments 
                  ( ("old" variable nil (reparse-symbol function_parameters) [4997 5000])
                    ("new" variable nil (reparse-symbol function_parameters) [5002 5005]))                  )
                nil [4985 5856])
            ("__all__" code nil nil [5857 5910])
            ("walk" function
               (:documentation "Directory tree generator.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), yields a 3-tuple

        dirpath, dirnames, filenames

    dirpath is a string, the path to the directory.  dirnames is a list of
    the names of the subdirectories in dirpath (excluding '.' and '..').
    filenames is a list of the names of the non-directory files in dirpath.
    Note that the names in the lists are just names, with no path components.
    To get a full path (which begins with top) to a file or directory in
    dirpath, do os.path.join(dirpath, name).

    If optional arg 'topdown' is true or not specified, the triple for a
    directory is generated before the triples for any of its subdirectories
    (directories are generated top down).  If topdown is false, the triple
    for a directory is generated after the triples for all of its
    subdirectories (directories are generated bottom up).

    When topdown is true, the caller can modify the dirnames list in-place
    (e.g., via del or slice assignment), and walk will only recurse into the
    subdirectories whose names remain in dirnames; this can be used to prune
    the search, or to impose a specific order of visiting.  Modifying
    dirnames when topdown is false is ineffective, since the directories in
    dirnames have already been generated by the time dirnames itself is
    generated.

    By default errors from the os.listdir() call are ignored.  If
    optional arg 'onerror' is specified, it should be a function; it
    will be called with one argument, an os.error instance.  It can
    report the error to continue with the walk, or raise the exception
    to abort the walk.  Note that the filename is available as the
    filename attribute of the exception object.

    By default, os.walk does not follow symbolic links to subdirectories on
    systems that support them.  In order to get this functionality, set the
    optional argument 'followlinks' to true.

    Caution:  if you pass a relative pathname for top, don't change the
    current working directory between resumptions of walk.  walk never
    changes the current directory, and assumes that the client doesn't
    either.

    Example:

    import os
    from os.path import join, getsize
    for root, dirs, files in os.walk('python/Lib/email'):
        print root, \"consumes\",
        print sum([getsize(join(root, name)) for name in files]),
        print \"bytes in\", len(files), \"non-directory files\"
        if 'CVS' in dirs:
            dirs.remove('CVS')  # don't visit CVS directories
    "
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [5921 5924])
                    ("topdown" variable nil (reparse-symbol function_parameters) [5926 5933])
                    ("onerror" variable nil (reparse-symbol function_parameters) [5940 5947])
                    ("followlinks" variable nil (reparse-symbol function_parameters) [5954 5965]))                  )
                nil [5912 9693])
            ("__all__" code nil nil [9694 9716])
            ("try" code nil nil [9758 9810])
            ("execl" function
               (:documentation "execl(file, *args)

    Execute the executable file with argument list args, replacing the
    current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9821 9825])
                    ("args" variable nil (reparse-symbol function_parameters) [9827 9832]))                  )
                nil [9811 9980])
            ("execle" function
               (:documentation "execle(file, *args, env)

    Execute the executable file with argument list args and
    environment env, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9992 9996])
                    ("args" variable nil (reparse-symbol function_parameters) [9998 10003]))                  )
                nil [9981 10207])
            ("execlp" function
               (:documentation "execlp(file, *args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10219 10223])
                    ("args" variable nil (reparse-symbol function_parameters) [10225 10230]))                  )
                nil [10208 10416])
            ("execlpe" function
               (:documentation "execlpe(file, *args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env, replacing the current
    process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10429 10433])
                    ("args" variable nil (reparse-symbol function_parameters) [10435 10440]))                  )
                nil [10417 10686])
            ("execvp" function
               (:documentation "execvp(file, args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10698 10702])
                    ("args" variable nil (reparse-symbol function_parameters) [10704 10708]))                  )
                nil [10687 10939])
            ("execvpe" function
               (:documentation "execvpe(file, args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env , replacing the
    current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10952 10956])
                    ("args" variable nil (reparse-symbol function_parameters) [10958 10962])
                    ("env" variable nil (reparse-symbol function_parameters) [10964 10967]))                  )
                nil [10940 11234])
            ("__all__" code nil nil [11235 11307])
            ("_execvpe" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [11322 11326])
                ("args" variable nil (reparse-symbol function_parameters) [11328 11332])
                ("env" variable nil (reparse-symbol function_parameters) [11334 11337]))              ) nil [11309 12177])
            ("try" code nil nil [12239 16448])
            ("getenv" function
               (:documentation "Get an environment variable, return None if it doesn't exist.
    The optional second argument can specify an alternate default."
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [16460 16463])
                    ("default" variable nil (reparse-symbol function_parameters) [16465 16472]))                  )
                nil [16449 16656])
            ("__all__" code nil nil [16656 16680])
            ("_exists" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [16694 16698]))              ) nil [16682 16730])
            ("if" code nil nil [16774 19677])
            ("if" code nil nil [19678 20675])
            ("if" code nil nil [20677 21783])
            ("if" code nil nil [21817 25083])
            ("copy_reg" include nil nil [25084 25112])
            ("_make_stat_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25136 25139])
                ("dict" variable nil (reparse-symbol function_parameters) [25141 25145]))              ) nil [25114 25182])
            ("_pickle_stat_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25207 25209]))              ) nil [25183 25284])
            ("try" code nil nil [25285 25419])
            ("_make_statvfs_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25445 25448])
                ("dict" variable nil (reparse-symbol function_parameters) [25450 25454]))              ) nil [25420 25494])
            ("_pickle_statvfs_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25522 25524]))              ) nil [25495 25602])
            ("try" code nil nil [25603 25770]))          
    :file "os.py"
    :pointmax 25770
    :fsize 25769
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "locale.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\" Locale support.

    The module provides low-level access to the C lib's locale APIs
    and adds high level number formatting APIs as well as a locale
    aliasing engine to complement these.

    The aliasing engine includes support for many commonly used locale
    names and maps them to values suitable for passing to the C lib's
    setlocale() function. It also includes default encodings for all
    supported locale names.

\"\"\"" code nil nil [1 441])
            ("sys" include nil nil [443 453])
            ("encodings" include nil nil [454 470])
            ("encodings.aliases" include nil nil [471 495])
            ("re" include nil nil [496 505])
            ("operator" include nil nil [506 521])
            ("functools" include nil nil [522 538])
            ("__all__" variable nil nil [787 1134])
            ("try" code nil nil [1136 2838])
            ("_localeconv" variable nil nil [2840 2864])
            ("_override_localeconv" variable nil nil [2981 3006])
            ("" code nil nil [3024 3037])
            ("localeconv" function nil nil [3038 3159])
            ("_grouping_intervals" function (:arguments 
              ( ("grouping" variable nil (reparse-symbol function_parameters) [3303 3311]))              ) nil [3279 3739])
            ("_group" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [3792 3793])
                ("monetary" variable nil (reparse-symbol function_parameters) [3795 3803]))              ) nil [3781 4681])
            ("_strip_padding" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [4764 4765])
                ("amount" variable nil (reparse-symbol function_parameters) [4767 4773]))              ) nil [4745 4987])
            ("_percent_re" variable nil nil [4988 5117])
            ("format" function
               (:documentation "Returns the locale-aware substitution of a %? specifier
    (percent).

    additional is for format strings which contain one or more
    '*' modifiers."
                :arguments 
                  ( ("percent" variable nil (reparse-symbol function_parameters) [5130 5137])
                    ("value" variable nil (reparse-symbol function_parameters) [5139 5144])
                    ("grouping" variable nil (reparse-symbol function_parameters) [5146 5154])
                    ("monetary" variable nil (reparse-symbol function_parameters) [5162 5170])
                    ("additional" variable nil (reparse-symbol function_parameters) [5178 5189]))                  )
                nil [5119 5745])
            ("_format" function (:arguments 
              ( ("percent" variable nil (reparse-symbol function_parameters) [5758 5765])
                ("value" variable nil (reparse-symbol function_parameters) [5767 5772])
                ("grouping" variable nil (reparse-symbol function_parameters) [5774 5782])
                ("monetary" variable nil (reparse-symbol function_parameters) [5790 5798])
                ("additional" variable nil (reparse-symbol function_parameters) [5806 5817]))              ) nil [5746 6647])
            ("format_string" function
               (:documentation "Formats a string in the same way that the % formatting would use,
    but takes the current locale into account.
    Grouping is applied if the third parameter is true."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [6666 6667])
                    ("val" variable nil (reparse-symbol function_parameters) [6669 6672])
                    ("grouping" variable nil (reparse-symbol function_parameters) [6674 6682]))                  )
                nil [6648 7836])
            ("currency" function
               (:documentation "Formats val according to the currency settings
    in the current locale."
                :arguments 
                  ( ("val" variable nil (reparse-symbol function_parameters) [7850 7853])
                    ("symbol" variable nil (reparse-symbol function_parameters) [7855 7861])
                    ("grouping" variable nil (reparse-symbol function_parameters) [7868 7876])
                    ("international" variable nil (reparse-symbol function_parameters) [7884 7897]))                  )
                nil [7837 9363])
            ("str" function
               (:documentation "Convert float to integer, taking the locale into account."
                :arguments 
                  ( ("val" variable nil (reparse-symbol function_parameters) [9372 9375]))                  )
                nil [9364 9478])
            ("atof" function (:arguments 
              ( ("string" variable nil (reparse-symbol function_parameters) [9488 9494])
                ("func" variable nil (reparse-symbol function_parameters) [9496 9500]))              ) nil [9479 9896])
            ("atoi" function (:arguments 
              ( ("str" variable nil (reparse-symbol function_parameters) [9906 9909]))              ) nil [9897 10010])
            ("_test" function nil nil [10011 10204])
            ("_setlocale" variable nil nil [10418 10440])
            ("_ascii_lower_map" variable nil nil [10519 10630])
            ("normalize" function
               (:documentation " Returns a normalized locale code for the given locale
        name.

        The returned locale code is formatted for use with
        setlocale().

        If normalization fails, the original name is returned
        unchanged.

        If the given encoding is not known, the function defaults to
        the default encoding for the locale code just like setlocale()
        does.

    "
                :arguments 
                  ( ("localename" variable nil (reparse-symbol function_parameters) [10646 10656]))                  )
                nil [10632 12969])
            ("_parse_localename" function
               (:documentation " Parses the locale code for localename and returns the
        result as tuple (language code, encoding).

        The localename is normalized and passed through the locale
        alias engine. A ValueError is raised in case the locale name
        cannot be parsed.

        The language code corresponds to RFC 1766.  code and encoding
        can be None in case the values cannot be determined or are
        unknown to this implementation.

    "
                :arguments 
                  ( ("localename" variable nil (reparse-symbol function_parameters) [12992 13002]))                  )
                nil [12970 14043])
            ("_build_localename" function
               (:documentation " Builds a locale code from the given tuple (language code,
        encoding).

        No aliasing or normalizing takes place.

    "
                :arguments 
                  ( ("localetuple" variable nil (reparse-symbol function_parameters) [14066 14077]))                  )
                nil [14044 14409])
            ("getdefaultlocale" function
               (:documentation " Tries to determine the default locale settings and returns
        them as tuple (language code, encoding).

        According to POSIX, a program which has not called
        setlocale(LC_ALL, \"\") runs using the portable 'C' locale.
        Calling setlocale(LC_ALL, \"\") lets it use the default locale as
        defined by the LANG variable. Since we don't want to interfere
        with the current locale setting we thus emulate the behavior
        in the way described above.

        To maintain compatibility with other platforms, not only the
        LANG variable is tested, but a list of variables given as
        envvars parameter. The first found to be defined will be
        used. envvars defaults to the search path used in GNU gettext;
        it must always contain the variable name 'LANG'.

        Except for the code 'C', the language code corresponds to RFC
        1766.  code and encoding can be None in case the values cannot
        be determined.

    "
                :arguments 
                  ( ("envvars" variable nil (reparse-symbol function_parameters) [14431 14438]))                  )
                nil [14410 16395])
            ("getlocale" function
               (:documentation " Returns the current setting for the given locale category as
        tuple (language code, encoding).

        category may be one of the LC_* value except LC_ALL. It
        defaults to LC_CTYPE.

        Except for the code 'C', the language code corresponds to RFC
        1766.  code and encoding can be None in case the values cannot
        be determined.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [16411 16419]))                  )
                nil [16397 16999])
            ("setlocale" function
               (:documentation " Set the locale for the given category.  The locale can be
        a string, an iterable of two strings (language code and encoding),
        or None.

        Iterables are converted to strings using the locale aliasing
        engine.  Locale strings are passed directly to the C lib.

        category may be given as one of the LC_* values.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [17014 17022])
                    ("locale" variable nil (reparse-symbol function_parameters) [17024 17030]))                  )
                nil [17000 17570])
            ("resetlocale" function
               (:documentation " Sets the locale for category to the default setting.

        The default setting is determined by calling
        getdefaultlocale(). category defaults to LC_ALL.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [17587 17595]))                  )
                nil [17571 17851])
            ("if" code nil nil [17852 19056])
            ("locale_encoding_alias" variable nil nil [19617 21349])
            ("locale_alias" variable nil nil [26002 78679])
            ("windows_locale" variable nil nil [79180 87340])
            ("_print_locale" function (:documentation " Test function.
    ") nil [87342 89030])
            ("try" code nil nil [89036 89124])
            ("if" code nil nil [89125 89272]))          
    :file "locale.py"
    :pointmax 89272
    :fsize 89271
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "codecs.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\" codecs -- Python Codec Registry, API and helpers.


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

\"\"\"" code nil nil [1 165])
            ("__builtin__" include nil nil [169 192])
            ("sys" include nil nil [169 192])
            ("try" code nil nil [246 371])
            ("__all__" variable nil nil [372 784])
            ("BOM_UTF8" variable nil nil [974 999])
            ("BOM_LE" variable nil nil [1025 1059])
            ("BOM_BE" variable nil nil [1082 1116])
            ("BOM_UTF32_LE" variable nil nil [1142 1175])
            ("BOM_UTF32_BE" variable nil nil [1198 1231])
            ("if" code nil nil [1233 1530])
            ("BOM32_LE" variable nil nil [1574 1597])
            ("BOM32_BE" variable nil nil [1598 1621])
            ("BOM64_LE" variable nil nil [1622 1645])
            ("BOM64_BE" variable nil nil [1646 1669])
            ("CodecInfo" type
               (:superclasses ("tuple")
                :members 
                  ( ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [1756 1759])
                        ("encode" variable nil (reparse-symbol function_parameters) [1761 1767])
                        ("decode" variable nil (reparse-symbol function_parameters) [1769 1775])
                        ("streamreader" variable nil (reparse-symbol function_parameters) [1777 1789])
                        ("streamwriter" variable nil (reparse-symbol function_parameters) [1796 1808])
                        ("incrementalencoder" variable nil (reparse-symbol function_parameters) [1823 1841])
                        ("incrementaldecoder" variable nil (reparse-symbol function_parameters) [1848 1866])
                        ("name" variable nil (reparse-symbol function_parameters) [1873 1877]))                      ) (reparse-symbol indented_block_body) [1744 2256])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2274 2278]))                          )
                        (reparse-symbol indented_block_body) [2261 2413]))                  
                :type "class")
                nil [1715 2413])
            ("Codec" type
               (:documentation " Defines the interface for stateless encoders/decoders.

        The .encode()/.decode() methods may use different error
        handling schemes by providing the errors argument. These
        string values are predefined:

         'strict' - raise a ValueError error (or a subclass)
         'ignore' - ignore the character and continue with the next
         'replace' - replace with a suitable replacement character;
                    Python will use the official U+FFFD REPLACEMENT
                    CHARACTER for the builtin Unicode codecs on
                    decoding and '?' on encoding.
         'xmlcharrefreplace' - Replace with the appropriate XML
                               character reference (only for encoding).
         'backslashreplace'  - Replace with backslashed escape sequences
                               (only for encoding).

        The set of allowed values can be extended via register_error.

    "
                :members 
                  ( ("encode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3395 3399])
                            ("input" variable nil (reparse-symbol function_parameters) [3401 3406])
                            ("errors" variable nil (reparse-symbol function_parameters) [3408 3414]))                          
                        :documentation " Encodes the object input and returns a tuple (output
            object, length consumed).

            errors defines the error handling to apply. It defaults to
            'strict' handling.

            The method may not store state in the Codec instance. Use
            StreamCodec for codecs which have to keep state in order to
            make encoding/decoding efficient.

            The encoder must be able to handle zero length input and
            return an empty object of the output object type in this
            situation.

        ")
                        (reparse-symbol indented_block_body) [3384 4031])
                    ("decode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4047 4051])
                            ("input" variable nil (reparse-symbol function_parameters) [4053 4058])
                            ("errors" variable nil (reparse-symbol function_parameters) [4060 4066]))                          
                        :documentation " Decodes the object input and returns a tuple (output
            object, length consumed).

            input must be an object which provides the bf_getreadbuf
            buffer slot. Python strings, buffer objects and memory
            mapped files are examples of objects providing this slot.

            errors defines the error handling to apply. It defaults to
            'strict' handling.

            The method may not store state in the Codec instance. Use
            StreamCodec for codecs which have to keep state in order to
            make encoding/decoding efficient.

            The decoder must be able to handle zero length input and
            return an empty object of the output object type in this
            situation.

        ")
                        (reparse-symbol indented_block_body) [4036 4890]))                  
                :type "class")
                nil [2414 4890])
            ("IncrementalEncoder" type
               (:documentation "
    An IncrementalEncoder encodes an input in multiple steps. The input can be
    passed piece by piece to the encode() method. The IncrementalEncoder remembers
    the state of the Encoding process between calls to encode().
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Creates an IncrementalEncoder instance.

        The IncrementalEncoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        \"\"\"" code nil (reparse-symbol indented_block_body) [5217 5467])
                            ("self" variable nil (reparse-symbol indented_block_body) [5476 5496])
                            ("self" variable nil (reparse-symbol indented_block_body) [5505 5521]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5185 5189])
                            ("errors" variable nil (reparse-symbol function_parameters) [5191 5197]))                          
                        :documentation "
        Creates an IncrementalEncoder instance.

        The IncrementalEncoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5172 5522])
                    ("encode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5538 5542])
                            ("input" variable nil (reparse-symbol function_parameters) [5544 5549])
                            ("final" variable nil (reparse-symbol function_parameters) [5551 5556]))                          
                        :documentation "
        Encodes input and returns the resulting object.
        ")
                        (reparse-symbol indented_block_body) [5527 5679])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5694 5698]))                          
                        :documentation "
        Resets the encoder to the initial state.
        ")
                        (reparse-symbol indented_block_body) [5684 5774])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5792 5796]))                          
                        :documentation "
        Return the current state of the encoder.
        ")
                        (reparse-symbol indented_block_body) [5779 5889])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5907 5911])
                            ("state" variable nil (reparse-symbol function_parameters) [5913 5918]))                          
                        :documentation "
        Set the current state of the encoder. state must have been
        returned by getstate().
        ")
                        (reparse-symbol indented_block_body) [5894 6044]))                  
                :type "class")
                nil [4891 6044])
            ("BufferedIncrementalEncoder" type
               (:documentation "
    This subclass of IncrementalEncoder can be used as the baseclass for an
    incremental encoder if the encoder must keep some of the output in a
    buffer between calls to encode().
    "
                :superclasses ("IncrementalEncoder")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("IncrementalEncoder" code nil (reparse-symbol indented_block_body) [6351 6392])
                            ("self" variable nil (reparse-symbol indented_block_body) [6401 6417]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6319 6323])
                            ("errors" variable nil (reparse-symbol function_parameters) [6325 6331]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6306 6475])
                    ("_buffer_encode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6499 6503])
                            ("input" variable nil (reparse-symbol function_parameters) [6505 6510])
                            ("errors" variable nil (reparse-symbol function_parameters) [6512 6518])
                            ("final" variable nil (reparse-symbol function_parameters) [6520 6525]))                          )
                        (reparse-symbol indented_block_body) [6480 6686])
                    ("encode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6702 6706])
                            ("input" variable nil (reparse-symbol function_parameters) [6708 6713])
                            ("final" variable nil (reparse-symbol function_parameters) [6715 6720]))                          )
                        (reparse-symbol indented_block_body) [6691 7006])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7021 7025]))                          )
                        (reparse-symbol indented_block_body) [7011 7092])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7110 7114]))                          )
                        (reparse-symbol indented_block_body) [7097 7149])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7167 7171])
                            ("state" variable nil (reparse-symbol function_parameters) [7173 7178]))                          )
                        (reparse-symbol indented_block_body) [7154 7215]))                  
                :type "class")
                nil [6045 7215])
            ("IncrementalDecoder" type
               (:documentation "
    An IncrementalDecoder decodes an input in multiple steps. The input can be
    passed piece by piece to the decode() method. The IncrementalDecoder
    remembers the state of the decoding process between calls to decode().
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Creates a IncrementalDecoder instance.

        The IncrementalDecoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        \"\"\"" code nil (reparse-symbol indented_block_body) [7542 7791])
                            ("self" variable nil (reparse-symbol indented_block_body) [7800 7820]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7510 7514])
                            ("errors" variable nil (reparse-symbol function_parameters) [7516 7522]))                          
                        :documentation "
        Creates a IncrementalDecoder instance.

        The IncrementalDecoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7497 7821])
                    ("decode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7837 7841])
                            ("input" variable nil (reparse-symbol function_parameters) [7843 7848])
                            ("final" variable nil (reparse-symbol function_parameters) [7850 7855]))                          
                        :documentation "
        Decodes input and returns the resulting object.
        ")
                        (reparse-symbol indented_block_body) [7826 7978])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7993 7997]))                          
                        :documentation "
        Resets the decoder to the initial state.
        ")
                        (reparse-symbol indented_block_body) [7983 8073])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8091 8095]))                          
                        :documentation "
        Return the current state of the decoder.

        This must be a (buffered_input, additional_state_info) tuple.
        buffered_input must be a bytes object containing bytes that
        were passed to decode() that have not yet been converted.
        additional_state_info must be a non-negative integer
        representing the state of the decoder WITHOUT yet having
        processed the contents of buffered_input.  In the initial state
        and after reset(), getstate() must return (b\"\", 0).
        ")
                        (reparse-symbol indented_block_body) [8078 8658])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8676 8680])
                            ("state" variable nil (reparse-symbol function_parameters) [8682 8687]))                          
                        :documentation "
        Set the current state of the decoder.

        state must have been returned by getstate().  The effect of
        setstate((b\"\", 0)) must be equivalent to reset().
        ")
                        (reparse-symbol indented_block_body) [8663 8887]))                  
                :type "class")
                nil [7216 8887])
            ("BufferedIncrementalDecoder" type
               (:documentation "
    This subclass of IncrementalDecoder can be used as the baseclass for an
    incremental decoder if the decoder must be able to handle incomplete byte
    sequences.
    "
                :superclasses ("IncrementalDecoder")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("IncrementalDecoder" code nil (reparse-symbol indented_block_body) [9176 9217])
                            ("self" variable nil (reparse-symbol indented_block_body) [9226 9242]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9144 9148])
                            ("errors" variable nil (reparse-symbol function_parameters) [9150 9156]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9131 9300])
                    ("_buffer_decode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9324 9328])
                            ("input" variable nil (reparse-symbol function_parameters) [9330 9335])
                            ("errors" variable nil (reparse-symbol function_parameters) [9337 9343])
                            ("final" variable nil (reparse-symbol function_parameters) [9345 9350]))                          )
                        (reparse-symbol indented_block_body) [9305 9511])
                    ("decode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9527 9531])
                            ("input" variable nil (reparse-symbol function_parameters) [9533 9538])
                            ("final" variable nil (reparse-symbol function_parameters) [9540 9545]))                          )
                        (reparse-symbol indented_block_body) [9516 9831])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9846 9850]))                          )
                        (reparse-symbol indented_block_body) [9836 9917])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9935 9939]))                          )
                        (reparse-symbol indented_block_body) [9922 10018])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10036 10040])
                            ("state" variable nil (reparse-symbol function_parameters) [10042 10047]))                          )
                        (reparse-symbol indented_block_body) [10023 10120]))                  
                :type "class")
                nil [8888 10120])
            ("StreamWriter" type
               (:superclasses ("Codec")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\" Creates a StreamWriter instance.

            stream must be a file-like object open for writing
            (binary) data.

            The StreamWriter may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character
             'xmlcharrefreplace' - Replace with the appropriate XML
                                   character reference.
             'backslashreplace'  - Replace with backslashed escape
                                   sequences (only for encoding).

            The set of allowed parameter values can be extended via
            register_error.
        \"\"\"" code nil (reparse-symbol indented_block_body) [10422 11287])
                            ("self" variable nil (reparse-symbol indented_block_body) [11296 11316])
                            ("self" variable nil (reparse-symbol indented_block_body) [11325 11345]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10381 10385])
                            ("stream" variable nil (reparse-symbol function_parameters) [10387 10393])
                            ("errors" variable nil (reparse-symbol function_parameters) [10395 10401]))                          
                        :documentation " Creates a StreamWriter instance.

            stream must be a file-like object open for writing
            (binary) data.

            The StreamWriter may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character
             'xmlcharrefreplace' - Replace with the appropriate XML
                                   character reference.
             'backslashreplace'  - Replace with backslashed escape
                                   sequences (only for encoding).

            The set of allowed parameter values can be extended via
            register_error.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10368 11346])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11361 11365])
                            ("object" variable nil (reparse-symbol function_parameters) [11367 11373]))                          
                        :documentation " Writes the object's contents encoded to self.stream.
        ")
                        (reparse-symbol indented_block_body) [11351 11544])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11564 11568])
                            ("list" variable nil (reparse-symbol function_parameters) [11570 11574]))                          
                        :documentation " Writes the concatenated list of strings to the stream
            using .write().
        ")
                        (reparse-symbol indented_block_body) [11549 11718])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11733 11737]))                          
                        :documentation " Flushes and resets the codec buffers used for keeping state.

            Calling this method should ensure that the data on the
            output is put into a clean state, that allows appending
            of new fresh data without having to rescan the whole
            stream to recover state.

        ")
                        (reparse-symbol indented_block_body) [11723 12078])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12092 12096])
                            ("offset" variable nil (reparse-symbol function_parameters) [12098 12104])
                            ("whence" variable nil (reparse-symbol function_parameters) [12106 12112]))                          )
                        (reparse-symbol indented_block_body) [12083 12223])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12244 12248])
                            ("name" variable nil (reparse-symbol function_parameters) [12250 12254])
                            ("getattr" variable nil (reparse-symbol function_parameters) [12276 12283]))                          
                        :documentation " Inherit all other methods from the underlying stream.
        ")
                        (reparse-symbol indented_block_body) [12228 12415])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12434 12438]))                          )
                        (reparse-symbol indented_block_body) [12420 12461])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12479 12483])
                            ("type" variable nil (reparse-symbol function_parameters) [12485 12489])
                            ("value" variable nil (reparse-symbol function_parameters) [12491 12496])
                            ("tb" variable nil (reparse-symbol function_parameters) [12498 12500]))                          )
                        (reparse-symbol indented_block_body) [12466 12531]))                  
                :type "class")
                nil [10336 12531])
            ("StreamReader" type
               (:superclasses ("Codec")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\" Creates a StreamReader instance.

            stream must be a file-like object open for reading
            (binary) data.

            The StreamReader may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character;

            The set of allowed parameter values can be extended via
            register_error.
        \"\"\"" code nil (reparse-symbol indented_block_body) [12623 13232])
                            ("self" variable nil (reparse-symbol indented_block_body) [13241 13261])
                            ("self" variable nil (reparse-symbol indented_block_body) [13270 13290])
                            ("self" variable nil (reparse-symbol indented_block_body) [13299 13319])
                            ("self" variable nil (reparse-symbol indented_block_body) [13459 13479])
                            ("self" variable nil (reparse-symbol indented_block_body) [13488 13510]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12582 12586])
                            ("stream" variable nil (reparse-symbol function_parameters) [12588 12594])
                            ("errors" variable nil (reparse-symbol function_parameters) [12596 12602]))                          
                        :documentation " Creates a StreamReader instance.

            stream must be a file-like object open for reading
            (binary) data.

            The StreamReader may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character;

            The set of allowed parameter values can be extended via
            register_error.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12569 13511])
                    ("decode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13527 13531])
                            ("input" variable nil (reparse-symbol function_parameters) [13533 13538])
                            ("errors" variable nil (reparse-symbol function_parameters) [13540 13546]))                          )
                        (reparse-symbol indented_block_body) [13516 13592])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13606 13610])
                            ("size" variable nil (reparse-symbol function_parameters) [13612 13616])
                            ("chars" variable nil (reparse-symbol function_parameters) [13621 13626])
                            ("firstline" variable nil (reparse-symbol function_parameters) [13631 13640]))                          
                        :documentation " Decodes data from the stream self.stream and returns the
            resulting object.

            chars indicates the number of characters to read from the
            stream. read() will never return more than chars
            characters, but it might return less, if there are not enough
            characters available.

            size indicates the approximate maximum number of bytes to
            read from the stream for decoding purposes. The decoder
            can modify this setting as appropriate. The default value
            -1 indicates to read and decode as much as possible.  size
            is intended to prevent having to decode huge files in one
            step.

            If firstline is true, and a UnicodeDecodeError happens
            after the first line terminator in the input only the first line
            will be returned, the rest of the input will be kept until the
            next call to read().

            The method should use a greedy read strategy meaning that
            it should read as much data as is allowed within the
            definition of the encoding and the given size, e.g.  if
            optional encoding endings or state markers are available
            on the stream, these should be read too.
        ")
                        (reparse-symbol indented_block_body) [13597 16926])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16944 16948])
                            ("size" variable nil (reparse-symbol function_parameters) [16950 16954])
                            ("keepends" variable nil (reparse-symbol function_parameters) [16961 16969]))                          
                        :documentation " Read one line from the input stream and return the
            decoded data.

            size, if given, is passed as size argument to the
            read() method.

        ")
                        (reparse-symbol indented_block_body) [16931 19872])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19891 19895])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [19897 19905])
                            ("keepends" variable nil (reparse-symbol function_parameters) [19912 19920]))                          
                        :documentation " Read all lines available on the input stream
            and return them as list of lines.

            Line breaks are implemented using the codec's decoder
            method and are included in the list entries.

            sizehint, if given, is ignored since there is no efficient
            way to finding the true end-of-line.

        ")
                        (reparse-symbol indented_block_body) [19877 20358])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20373 20377]))                          
                        :documentation " Resets the codec buffers used for keeping state.

            Note that no stream repositioning should take place.
            This method is primarily intended to be able to recover
            from decoding errors.

        ")
                        (reparse-symbol indented_block_body) [20363 20713])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20727 20731])
                            ("offset" variable nil (reparse-symbol function_parameters) [20733 20739])
                            ("whence" variable nil (reparse-symbol function_parameters) [20741 20747]))                          
                        :documentation " Set the input stream's current position.

            Resets the codec buffers used for keeping state.
        ")
                        (reparse-symbol indented_block_body) [20718 20941])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20955 20959]))                          
                        :documentation " Return the next decoded line from the input stream.")
                        (reparse-symbol indented_block_body) [20946 21130])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21148 21152]))                          )
                        (reparse-symbol indented_block_body) [21135 21175])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21196 21200])
                            ("name" variable nil (reparse-symbol function_parameters) [21202 21206])
                            ("getattr" variable nil (reparse-symbol function_parameters) [21228 21235]))                          
                        :documentation " Inherit all other methods from the underlying stream.
        ")
                        (reparse-symbol indented_block_body) [21180 21367])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21386 21390]))                          )
                        (reparse-symbol indented_block_body) [21372 21413])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21431 21435])
                            ("type" variable nil (reparse-symbol function_parameters) [21437 21441])
                            ("value" variable nil (reparse-symbol function_parameters) [21443 21448])
                            ("tb" variable nil (reparse-symbol function_parameters) [21450 21452]))                          )
                        (reparse-symbol indented_block_body) [21418 21483]))                  
                :type "class")
                nil [12537 21483])
            ("StreamReaderWriter" type
               (:documentation " StreamReaderWriter instances allow wrapping streams which
        work in both read and write modes.

        The design is such that one can use the factory functions
        returned by the codec.lookup() function to construct the
        instance.

    "
                :members 
                  ( ("encoding" variable nil (reparse-symbol indented_block_body) [21845 21865])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\" Creates a StreamReaderWriter instance.

            stream must be a Stream-like object.

            Reader, Writer must be factory functions or classes
            providing the StreamReader, StreamWriter interface resp.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        \"\"\"" code nil (reparse-symbol indented_block_body) [21941 22285])
                            ("self" variable nil (reparse-symbol indented_block_body) [22294 22314])
                            ("self" variable nil (reparse-symbol indented_block_body) [22323 22359])
                            ("self" variable nil (reparse-symbol indented_block_body) [22368 22404])
                            ("self" variable nil (reparse-symbol indented_block_body) [22413 22433]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21884 21888])
                            ("stream" variable nil (reparse-symbol function_parameters) [21890 21896])
                            ("Reader" variable nil (reparse-symbol function_parameters) [21898 21904])
                            ("Writer" variable nil (reparse-symbol function_parameters) [21906 21912])
                            ("errors" variable nil (reparse-symbol function_parameters) [21914 21920]))                          
                        :documentation " Creates a StreamReaderWriter instance.

            stream must be a Stream-like object.

            Reader, Writer must be factory functions or classes
            providing the StreamReader, StreamWriter interface resp.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21871 22434])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22448 22452])
                            ("size" variable nil (reparse-symbol function_parameters) [22454 22458]))                          )
                        (reparse-symbol indented_block_body) [22439 22503])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22521 22525])
                            ("size" variable nil (reparse-symbol function_parameters) [22527 22531]))                          )
                        (reparse-symbol indented_block_body) [22508 22582])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22601 22605])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [22607 22615]))                          )
                        (reparse-symbol indented_block_body) [22587 22671])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22685 22689]))                          
                        :documentation " Return the next decoded line from the input stream.")
                        (reparse-symbol indented_block_body) [22676 22794])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22812 22816]))                          )
                        (reparse-symbol indented_block_body) [22799 22839])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22854 22858])
                            ("data" variable nil (reparse-symbol function_parameters) [22860 22864]))                          )
                        (reparse-symbol indented_block_body) [22844 22907])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22927 22931])
                            ("list" variable nil (reparse-symbol function_parameters) [22933 22937]))                          )
                        (reparse-symbol indented_block_body) [22912 22985])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23000 23004]))                          )
                        (reparse-symbol indented_block_body) [22990 23064])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23078 23082])
                            ("offset" variable nil (reparse-symbol function_parameters) [23084 23090])
                            ("whence" variable nil (reparse-symbol function_parameters) [23092 23098]))                          )
                        (reparse-symbol indented_block_body) [23069 23244])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23265 23269])
                            ("name" variable nil (reparse-symbol function_parameters) [23271 23275])
                            ("getattr" variable nil (reparse-symbol function_parameters) [23297 23304]))                          
                        :documentation " Inherit all other methods from the underlying stream.
        ")
                        (reparse-symbol indented_block_body) [23249 23436])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23525 23529]))                          )
                        (reparse-symbol indented_block_body) [23511 23552])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23570 23574])
                            ("type" variable nil (reparse-symbol function_parameters) [23576 23580])
                            ("value" variable nil (reparse-symbol function_parameters) [23582 23587])
                            ("tb" variable nil (reparse-symbol function_parameters) [23589 23591]))                          )
                        (reparse-symbol indented_block_body) [23557 23622]))                  
                :type "class")
                nil [21489 23622])
            ("StreamRecoder" type
               (:documentation " StreamRecoder instances provide a frontend - backend
        view of encoding data.

        They use the complete set of APIs returned by the
        codecs.lookup() function to implement their task.

        Data written to the stream is first decoded into an
        intermediate format (which is dependent on the given codec
        combination) and then written to the stream using an instance
        of the provided Writer class.

        In the other direction, data is read from the stream using a
        Reader instance and then return encoded data to the caller.

    "
                :members 
                  ( ("data_encoding" variable nil (reparse-symbol indented_block_body) [24303 24328])
                    ("file_encoding" variable nil (reparse-symbol indented_block_body) [24333 24358])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\" Creates a StreamRecoder instance which implements a two-way
            conversion: encode and decode work on the frontend (the
            input to .read() and output of .write()) while
            Reader and Writer work on the backend (reading and
            writing to the stream).

            You can use these objects to do transparent direct
            recodings from e.g. latin-1 to utf-8 and back.

            stream must be a file-like object.

            encode, decode must adhere to the Codec interface, Reader,
            Writer must be factory functions or classes providing the
            StreamReader, StreamWriter interface resp.

            encode and decode are needed for the frontend translation,
            Reader and Writer for the backend translation. Unicode is
            used as intermediate encoding.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        \"\"\"" code nil (reparse-symbol indented_block_body) [24467 25427])
                            ("self" variable nil (reparse-symbol indented_block_body) [25436 25456])
                            ("self" variable nil (reparse-symbol indented_block_body) [25465 25485])
                            ("self" variable nil (reparse-symbol indented_block_body) [25494 25514])
                            ("self" variable nil (reparse-symbol indented_block_body) [25523 25559])
                            ("self" variable nil (reparse-symbol indented_block_body) [25568 25604])
                            ("self" variable nil (reparse-symbol indented_block_body) [25613 25633]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24377 24381])
                            ("stream" variable nil (reparse-symbol function_parameters) [24383 24389])
                            ("encode" variable nil (reparse-symbol function_parameters) [24391 24397])
                            ("decode" variable nil (reparse-symbol function_parameters) [24399 24405])
                            ("Reader" variable nil (reparse-symbol function_parameters) [24407 24413])
                            ("Writer" variable nil (reparse-symbol function_parameters) [24415 24421])
                            ("errors" variable nil (reparse-symbol function_parameters) [24440 24446]))                          
                        :documentation " Creates a StreamRecoder instance which implements a two-way
            conversion: encode and decode work on the frontend (the
            input to .read() and output of .write()) while
            Reader and Writer work on the backend (reading and
            writing to the stream).

            You can use these objects to do transparent direct
            recodings from e.g. latin-1 to utf-8 and back.

            stream must be a file-like object.

            encode, decode must adhere to the Codec interface, Reader,
            Writer must be factory functions or classes providing the
            StreamReader, StreamWriter interface resp.

            encode and decode are needed for the frontend translation,
            Reader and Writer for the backend translation. Unicode is
            used as intermediate encoding.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24364 25634])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25648 25652])
                            ("size" variable nil (reparse-symbol function_parameters) [25654 25658]))                          )
                        (reparse-symbol indented_block_body) [25639 25783])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25801 25805])
                            ("size" variable nil (reparse-symbol function_parameters) [25807 25811]))                          )
                        (reparse-symbol indented_block_body) [25788 26027])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26046 26050])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [26052 26060]))                          )
                        (reparse-symbol indented_block_body) [26032 26197])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26211 26215]))                          
                        :documentation " Return the next decoded line from the input stream.")
                        (reparse-symbol indented_block_body) [26202 26400])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26418 26422]))                          )
                        (reparse-symbol indented_block_body) [26405 26445])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26460 26464])
                            ("data" variable nil (reparse-symbol function_parameters) [26466 26470]))                          )
                        (reparse-symbol indented_block_body) [26450 26573])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26593 26597])
                            ("list" variable nil (reparse-symbol function_parameters) [26599 26603]))                          )
                        (reparse-symbol indented_block_body) [26578 26735])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26750 26754]))                          )
                        (reparse-symbol indented_block_body) [26740 26814])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26835 26839])
                            ("name" variable nil (reparse-symbol function_parameters) [26841 26845])
                            ("getattr" variable nil (reparse-symbol function_parameters) [26867 26874]))                          
                        :documentation " Inherit all other methods from the underlying stream.
        ")
                        (reparse-symbol indented_block_body) [26819 27006])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27025 27029]))                          )
                        (reparse-symbol indented_block_body) [27011 27052])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27070 27074])
                            ("type" variable nil (reparse-symbol function_parameters) [27076 27080])
                            ("value" variable nil (reparse-symbol function_parameters) [27082 27087])
                            ("tb" variable nil (reparse-symbol function_parameters) [27089 27091]))                          )
                        (reparse-symbol indented_block_body) [27057 27122]))                  
                :type "class")
                nil [23628 27122])
            ("open" function
               (:documentation " Open an encoded file using the given mode and return
        a wrapped version providing transparent encoding/decoding.

        Note: The wrapped version will only accept the object format
        defined by the codecs, i.e. Unicode objects for most builtin
        codecs. Output is also codec dependent and will usually be
        Unicode as well.

        Files are always opened in binary mode, even if no binary mode
        was specified. This is done to avoid data loss due to encodings
        using 8-bit values. The default file mode is 'rb' meaning to
        open the file in binary read mode.

        encoding specifies the encoding which is to be used for the
        file.

        errors may be given to define the error handling. It defaults
        to 'strict' which causes ValueErrors to be raised in case an
        encoding error occurs.

        buffering has the same meaning as for the builtin open() API.
        It defaults to line buffered.

        The returned wrapped file object provides an extra attribute
        .encoding which allows querying the used encoding. This
        attribute is only available if an encoding was specified as
        parameter.

    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [27147 27155])
                    ("mode" variable nil (reparse-symbol function_parameters) [27157 27161])
                    ("encoding" variable nil (reparse-symbol function_parameters) [27168 27176])
                    ("errors" variable nil (reparse-symbol function_parameters) [27183 27189])
                    ("buffering" variable nil (reparse-symbol function_parameters) [27200 27209]))                  )
                nil [27138 29091])
            ("EncodedFile" function
               (:documentation " Return a wrapped version of file which provides transparent
        encoding translation.

        Strings written to the wrapped file are interpreted according
        to the given data_encoding and then written to the original
        file as string using file_encoding. The intermediate encoding
        will usually be Unicode but depends on the specified codecs.

        Strings are read from the file using file_encoding and then
        passed back to the caller as string using data_encoding.

        If file_encoding is not given, it defaults to data_encoding.

        errors may be given to define the error handling. It defaults
        to 'strict' which causes ValueErrors to be raised in case an
        encoding error occurs.

        The returned wrapped file object provides two extra attributes
        .data_encoding and .file_encoding which reflect the given
        parameters of the same name. The attributes can be used for
        introspection by Python programs.

    "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [29108 29112])
                    ("data_encoding" variable nil (reparse-symbol function_parameters) [29114 29127])
                    ("file_encoding" variable nil (reparse-symbol function_parameters) [29129 29142])
                    ("errors" variable nil (reparse-symbol function_parameters) [29149 29155]))                  )
                nil [29092 30599])
            ("getencoder" function
               (:documentation " Lookup up the codec for the given encoding and return
        its encoder function.

        Raises a LookupError in case the encoding cannot be found.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [30645 30653]))                  )
                nil [30630 30861])
            ("getdecoder" function
               (:documentation " Lookup up the codec for the given encoding and return
        its decoder function.

        Raises a LookupError in case the encoding cannot be found.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [30877 30885]))                  )
                nil [30862 31093])
            ("getincrementalencoder" function
               (:documentation " Lookup up the codec for the given encoding and return
        its IncrementalEncoder class or factory function.

        Raises a LookupError in case the encoding cannot be found
        or the codecs doesn't provide an incremental encoder.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [31120 31128]))                  )
                nil [31094 31519])
            ("getincrementaldecoder" function
               (:documentation " Lookup up the codec for the given encoding and return
        its IncrementalDecoder class or factory function.

        Raises a LookupError in case the encoding cannot be found
        or the codecs doesn't provide an incremental decoder.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [31546 31554]))                  )
                nil [31520 31945])
            ("getreader" function
               (:documentation " Lookup up the codec for the given encoding and return
        its StreamReader class or factory function.

        Raises a LookupError in case the encoding cannot be found.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [31960 31968]))                  )
                nil [31946 32204])
            ("getwriter" function
               (:documentation " Lookup up the codec for the given encoding and return
        its StreamWriter class or factory function.

        Raises a LookupError in case the encoding cannot be found.

    "
                :arguments 
                  ( ("encoding" variable nil (reparse-symbol function_parameters) [32219 32227]))                  )
                nil [32205 32463])
            ("iterencode" function
               (:documentation "
    Encoding iterator.

    Encodes the input strings from the iterator using a IncrementalEncoder.

    errors and kwargs are passed through to the IncrementalEncoder
    constructor.
    "
                :arguments 
                  ( ("iterator" variable nil (reparse-symbol function_parameters) [32479 32487])
                    ("encoding" variable nil (reparse-symbol function_parameters) [32489 32497])
                    ("errors" variable nil (reparse-symbol function_parameters) [32499 32505])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [32516 32524]))                  )
                nil [32464 32976])
            ("iterdecode" function
               (:documentation "
    Decoding iterator.

    Decodes the input strings from the iterator using a IncrementalDecoder.

    errors and kwargs are passed through to the IncrementalDecoder
    constructor.
    "
                :arguments 
                  ( ("iterator" variable nil (reparse-symbol function_parameters) [32992 33000])
                    ("encoding" variable nil (reparse-symbol function_parameters) [33002 33010])
                    ("errors" variable nil (reparse-symbol function_parameters) [33012 33018])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [33029 33037]))                  )
                nil [32977 33489])
            ("make_identity_dict" function
               (:documentation " make_identity_dict(rng) -> dict

        Return a dictionary where elements of the rng sequence are
        mapped to themselves.

    "
                :arguments 
                  ( ("rng" variable nil (reparse-symbol function_parameters) [33551 33554]))                  )
                nil [33528 33768])
            ("make_encoding_map" function
               (:documentation " Creates an encoding map from a decoding map.

        If a target mapping in the decoding map occurs multiple
        times, then that target is mapped to None (undefined mapping),
        causing an exception when encountered by the charmap codec
        during translation.

        One example where this happens is cp875.py which decodes
        multiple character to \\u001a.

    "
                :arguments 
                  ( ("decoding_map" variable nil (reparse-symbol function_parameters) [33791 33803]))                  )
                nil [33769 34347])
            ("try" code nil nil [34368 34866])
            ("_false" variable nil nil [34944 34954])
            ("if" code nil nil [34955 34987])
            ("if" code nil nil [34999 35267]))          
    :file "codecs.py"
    :pointmax 35267
    :fsize 35266
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "shutil.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Utility functions for copying and archiving files and directory trees.

XXX The functions here don't copy the resource fork or other metadata on Mac.

\"\"\"" code nil nil [1 158])
            ("os" include nil nil [160 169])
            ("sys" include nil nil [170 180])
            ("stat" include nil nil [181 192])
            ("os.path" include nil nil [193 220])
            ("fnmatch" include nil nil [221 235])
            ("collections" include nil nil [236 254])
            ("errno" include nil nil [255 267])
            ("try" code nil nil [269 343])
            ("try" code nil nil [344 418])
            ("__all__" variable nil nil [419 727])
            ("Error" type
               (:superclasses ("EnvironmentError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [764 768]))                  
                :type "class")
                nil [729 769])
            ("SpecialFileError" type
               (:documentation "Raised when trying to do a kind of operation (e.g. copying) which is
    not supported on a special file (e.g. a named pipe)"
                :superclasses ("EnvironmentError")
                :type "class")
                nil [770 947])
            ("ExecError" type
               (:documentation "Raised when a command could not be executed"
                :superclasses ("EnvironmentError")
                :type "class")
                nil [948 1037])
            ("try" code nil nil [1038 1102])
            ("copyfileobj" function
               (:documentation "copy data from file-like object fsrc to file-like object fdst"
                :arguments 
                  ( ("fsrc" variable nil (reparse-symbol function_parameters) [1119 1123])
                    ("fdst" variable nil (reparse-symbol function_parameters) [1125 1129])
                    ("length" variable nil (reparse-symbol function_parameters) [1131 1137]))                  )
                nil [1103 1327])
            ("_samefile" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [1342 1345])
                ("dst" variable nil (reparse-symbol function_parameters) [1347 1350]))              ) nil [1328 1680])
            ("copyfile" function
               (:documentation "Copy data from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [1694 1697])
                    ("dst" variable nil (reparse-symbol function_parameters) [1699 1702]))                  )
                nil [1681 2298])
            ("copymode" function
               (:documentation "Copy mode bits from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [2312 2315])
                    ("dst" variable nil (reparse-symbol function_parameters) [2317 2320]))                  )
                nil [2299 2487])
            ("copystat" function
               (:documentation "Copy all stat info (mode bits, atime, mtime, flags) from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [2501 2504])
                    ("dst" variable nil (reparse-symbol function_parameters) [2506 2509]))                  )
                nil [2488 3048])
            ("copy" function
               (:documentation "Copy data and mode bits (\"cp src dst\").

    The destination may be a directory.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3058 3061])
                    ("dst" variable nil (reparse-symbol function_parameters) [3063 3066]))                  )
                nil [3049 3294])
            ("copy2" function
               (:documentation "Copy data and all stat info (\"cp -p src dst\").

    The destination may be a directory.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3305 3308])
                    ("dst" variable nil (reparse-symbol function_parameters) [3310 3313]))                  )
                nil [3295 3548])
            ("ignore_patterns" function
               (:documentation "Function that can be used as copytree() ignore parameter.

    Patterns is a sequence of glob-style patterns
    that are used to exclude files"
                :arguments 
                  ( ("patterns" variable nil (reparse-symbol function_parameters) [3569 3578]))                  )
                nil [3549 3961])
            ("copytree" function
               (:documentation "Recursively copy a directory tree using copy2().

    The destination directory must not already exist.
    If exception(s) occur, an Error is raised with a list of reasons.

    If the optional symlinks flag is true, symbolic links in the
    source tree result in symbolic links in the destination tree; if
    it is false, the contents of the files pointed to by symbolic
    links are copied.

    The optional ignore argument is a callable. If given, it
    is called with the `src` parameter, which is the directory
    being visited by copytree(), and `names` which is the list of
    `src` contents, as returned by os.listdir():

        callable(src, names) -> ignored_names

    Since copytree() is called recursively, the callable will be
    called once for each directory that is copied. It returns a
    list of names relative to the `src` directory that should
    not be copied.

    XXX Consider this example code rather than the ultimate tool.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3975 3978])
                    ("dst" variable nil (reparse-symbol function_parameters) [3980 3983])
                    ("symlinks" variable nil (reparse-symbol function_parameters) [3985 3993])
                    ("ignore" variable nil (reparse-symbol function_parameters) [4001 4007]))                  )
                nil [3962 6301])
            ("rmtree" function
               (:documentation "Recursively delete a directory tree.

    If ignore_errors is set, errors are ignored; otherwise, if onerror
    is set, it is called to handle the error with arguments (func,
    path, exc_info) where func is os.listdir, os.remove, or os.rmdir;
    path is the argument to that function that caused it to fail; and
    exc_info is a tuple returned by sys.exc_info().  If ignore_errors
    is false and onerror is None, an exception is raised.

    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [6313 6317])
                    ("ignore_errors" variable nil (reparse-symbol function_parameters) [6319 6332])
                    ("onerror" variable nil (reparse-symbol function_parameters) [6340 6347]))                  )
                nil [6302 7925])
            ("_basename" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [7941 7945]))              ) nil [7927 8159])
            ("move" function
               (:documentation "Recursively move a file or directory to another location. This is
    similar to the Unix \"mv\" command.

    If the destination is a directory or a symlink to a directory, the source
    is moved inside the directory. The destination path must not already
    exist.

    If the destination already exists but is not a directory, it may be
    overwritten depending on os.rename() semantics.

    If the destination is on our current filesystem, then rename() is used.
    Otherwise, src is copied to the destination and then removed.
    A lot more could be done here...  A look at a mv.c shows a lot of
    the issues this implementation glosses over.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [8169 8172])
                    ("dst" variable nil (reparse-symbol function_parameters) [8174 8177]))                  )
                nil [8160 9616])
            ("_destinsrc" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [9632 9635])
                ("dst" variable nil (reparse-symbol function_parameters) [9637 9640]))              ) nil [9617 9850])
            ("_get_gid" function
               (:documentation "Returns a gid, given a group name."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [9864 9868]))                  )
                nil [9851 10129])
            ("_get_uid" function
               (:documentation "Returns an uid, given a user name."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [10143 10147]))                  )
                nil [10130 10408])
            ("_make_tarball" function
               (:documentation "Create a (possibly compressed) tar file from all the files under
    'base_dir'.

    'compress' must be \"gzip\" (the default), \"bzip2\", or None.

    'owner' and 'group' can be used to define an owner and a group for the
    archive that is being built. If not provided, the current owner and group
    will be used.

    The output tar file will be named 'base_name' +  \".tar\", possibly plus
    the appropriate compression extension (\".gz\", or \".bz2\").

    Returns the output filename.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [10427 10436])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [10438 10446])
                    ("compress" variable nil (reparse-symbol function_parameters) [10448 10456])
                    ("verbose" variable nil (reparse-symbol function_parameters) [10465 10472])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [10476 10483])
                    ("owner" variable nil (reparse-symbol function_parameters) [10505 10510])
                    ("group" variable nil (reparse-symbol function_parameters) [10517 10522])
                    ("logger" variable nil (reparse-symbol function_parameters) [10529 10535]))                  )
                nil [10409 12411])
            ("_call_external_zip" function (:arguments 
              ( ("base_dir" variable nil (reparse-symbol function_parameters) [12435 12443])
                ("zip_filename" variable nil (reparse-symbol function_parameters) [12445 12457])
                ("verbose" variable nil (reparse-symbol function_parameters) [12459 12466])
                ("dry_run" variable nil (reparse-symbol function_parameters) [12474 12481]))              ) nil [12412 13141])
            ("_make_zipfile" function
               (:documentation "Create a zip file from all the files under 'base_dir'.

    The output zip file will be named 'base_name' + \".zip\".  Uses either the
    \"zipfile\" Python module (if available) or the InfoZIP \"zip\" utility
    (if installed and found on the default search path).  If neither tool is
    available, raises ExecError.  Returns the name of the output zip
    file.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [13160 13169])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [13171 13179])
                    ("verbose" variable nil (reparse-symbol function_parameters) [13181 13188])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [13192 13199])
                    ("logger" variable nil (reparse-symbol function_parameters) [13203 13209]))                  )
                nil [13142 14849])
            ("_ARCHIVE_FORMATS" variable nil nil [14850 15147])
            ("get_archive_formats" function (:documentation "Returns a list of supported formats for archiving and unarchiving.

    Each element of the returned sequence is a tuple (name, description)
    ") nil [15149 15468])
            ("register_archive_format" function
               (:documentation "Registers an archive format.

    name is the name of the format. function is the callable that will be
    used to create archives. If provided, extra_args is a sequence of
    (name, value) tuples that will be passed as arguments to the callable.
    description can be provided to describe the format, and will be returned
    by the get_archive_formats() function.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [15497 15501])
                    ("function" variable nil (reparse-symbol function_parameters) [15503 15511])
                    ("extra_args" variable nil (reparse-symbol function_parameters) [15513 15523])
                    ("description" variable nil (reparse-symbol function_parameters) [15530 15541]))                  )
                nil [15469 16460])
            ("unregister_archive_format" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [16491 16495]))              ) nil [16461 16529])
            ("make_archive" function
               (:documentation "Create an archive file (eg. zip or tar).

    'base_name' is the name of the file to create, minus any format-specific
    extension; 'format' is the archive format: one of \"zip\", \"tar\", \"bztar\"
    or \"gztar\".

    'root_dir' is a directory that will be the root directory of the
    archive; ie. we typically chdir into 'root_dir' before creating the
    archive.  'base_dir' is the directory where we start archiving from;
    ie. 'base_dir' will be the common prefix of all files and
    directories in the archive.  'root_dir' and 'base_dir' both default
    to the current directory.  Returns the name of the archive file.

    'owner' and 'group' are used when creating a tar archive. By default,
    uses the current owner and group.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [16547 16556])
                    ("format" variable nil (reparse-symbol function_parameters) [16558 16564])
                    ("root_dir" variable nil (reparse-symbol function_parameters) [16566 16574])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [16581 16589])
                    ("verbose" variable nil (reparse-symbol function_parameters) [16596 16603])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [16624 16631])
                    ("owner" variable nil (reparse-symbol function_parameters) [16635 16640])
                    ("group" variable nil (reparse-symbol function_parameters) [16647 16652])
                    ("logger" variable nil (reparse-symbol function_parameters) [16659 16665]))                  )
                nil [16530 18367]))          
    :file "shutil.py"
    :pointmax 18367
    :fsize 18366
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "posixpath.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Common operations on Posix pathnames.

Instead of importing this module directly, import os and refer to
this module as os.path.  The \"os.path\" name is an alias for this
module on Posix systems; on other systems (e.g. Mac, Windows),
os.path provides the same operations in a manner specific to that
platform, and is an alias to another module (e.g. macpath, ntpath).

Some of this can actually be useful on non-Posix systems too, e.g.
for manipulation of the pathname component of URLs.
\"\"\"" code nil nil [1 494])
            ("os" include nil nil [496 505])
            ("sys" include nil nil [506 516])
            ("stat" include nil nil [517 528])
            ("genericpath" include nil nil [529 547])
            ("warnings" include nil nil [548 563])
            ("genericpath" include nil nil [564 589])
            ("__all__" variable nil nil [591 1079])
            ("curdir" variable nil nil [1141 1153])
            ("pardir" variable nil nil [1154 1167])
            ("extsep" variable nil nil [1168 1180])
            ("sep" variable nil nil [1181 1190])
            ("pathsep" variable nil nil [1191 1204])
            ("defpath" variable nil nil [1205 1231])
            ("altsep" variable nil nil [1232 1245])
            ("devnull" variable nil nil [1246 1267])
            ("normcase" function
               (:documentation "Normalize case of pathname.  Has no effect under Posix"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1547 1548]))                  )
                nil [1534 1629])
            ("isabs" function
               (:documentation "Test whether a path is absolute"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1728 1729]))                  )
                nil [1718 1803])
            ("join" function
               (:documentation "Join two or more pathname components, inserting '/' as needed.
    If any component is an absolute path, all previous path components
    will be discarded."
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1954 1955])
                    ("p" variable nil (reparse-symbol function_parameters) [1957 1959]))                  )
                nil [1945 2337])
            ("split" function
               (:documentation "Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is
    everything after the final slash.  Either part may be empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [2593 2594]))                  )
                nil [2583 2884])
            ("splitext" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [3105 3106]))              ) nil [3092 3166])
            ("splitext" variable nil nil [3166 3214])
            ("splitdrive" function
               (:documentation "Split a pathname into drive and path. On Posix, drive is always
    empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [3369 3370]))                  )
                nil [3354 3475])
            ("basename" function
               (:documentation "Returns the final component of a pathname"
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [3560 3561]))                  )
                nil [3547 3658])
            ("dirname" function
               (:documentation "Returns the directory component of a pathname"
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [3741 3742]))                  )
                nil [3729 3930])
            ("islink" function
               (:documentation "Test whether a path is a symbolic link"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [4046 4050]))                  )
                nil [4035 4235])
            ("lexists" function
               (:documentation "Test whether a path exists.  Returns True for broken symbolic links"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [4306 4310]))                  )
                nil [4294 4481])
            ("samefile" function
               (:documentation "Test whether two pathnames reference the same actual file"
                :arguments 
                  ( ("f1" variable nil (reparse-symbol function_parameters) [4551 4553])
                    ("f2" variable nil (reparse-symbol function_parameters) [4555 4557]))                  )
                nil [4538 4698])
            ("sameopenfile" function
               (:documentation "Test whether two open file objects reference the same file"
                :arguments 
                  ( ("fp1" variable nil (reparse-symbol function_parameters) [4819 4822])
                    ("fp2" variable nil (reparse-symbol function_parameters) [4824 4827]))                  )
                nil [4802 4973])
            ("samestat" function
               (:documentation "Test whether two stat buffers reference the same file"
                :arguments 
                  ( ("s1" variable nil (reparse-symbol function_parameters) [5077 5079])
                    ("s2" variable nil (reparse-symbol function_parameters) [5081 5083]))                  )
                nil [5064 5224])
            ("ismount" function
               (:documentation "Test whether a path is a mount point"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [5342 5346]))                  )
                nil [5330 5919])
            ("walk" function
               (:documentation "Directory tree walk with callback function.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), call func(arg, dirname, fnames).
    dirname is the name of the directory, and fnames a list of the names of
    the files and subdirectories in dirname (excluding '.' and '..').  func
    may modify the fnames list in-place (e.g. via del or slice assignment),
    and walk will only recurse into the subdirectories whose names remain in
    fnames; this can be used to implement a filter, or to impose a specific
    order of visiting.  No semantics are defined for, or required of, arg,
    beyond that arg is always passed to func.  It can be used, e.g., to pass
    a filename pattern, or a mutable object designed to accumulate
    statistics.  Passing None for arg is common."
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [6317 6320])
                    ("func" variable nil (reparse-symbol function_parameters) [6322 6326])
                    ("arg" variable nil (reparse-symbol function_parameters) [6328 6331]))                  )
                nil [6308 7619])
            ("expanduser" function
               (:documentation "Expand ~ and ~user constructions.  If user or $HOME is unknown,
    do nothing."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [8110 8114]))                  )
                nil [8095 8755])
            ("_varprog" variable nil nil [8916 8931])
            ("expandvars" function
               (:documentation "Expand shell variables of form $var and ${var}.  Unknown variables
    are left unchanged."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [8948 8952]))                  )
                nil [8933 9652])
            ("normpath" function
               (:documentation "Normalize path, eliminating double slashes, etc."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [9840 9844]))                  )
                nil [9827 10794])
            ("abspath" function
               (:documentation "Return an absolute path."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [10808 10812]))                  )
                nil [10796 11044])
            ("realpath" function
               (:documentation "Return the canonical path of the specified filename, eliminating any
symbolic links encountered in the path."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [11146 11154]))                  )
                nil [11133 11908])
            ("_resolve_link" function
               (:documentation "Internal helper function.  Takes a path and follows symlinks
    until we either arrive at something that isn't a symlink, or
    encounter a path we've seen before (meaning that there's a loop).
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [11928 11932]))                  )
                nil [11910 12607])
            ("supports_unicode_filenames" variable nil nil [12608 12663])
            ("relpath" function
               (:documentation "Return a relative version of a path"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [12677 12681])
                    ("start" variable nil (reparse-symbol function_parameters) [12683 12688]))                  )
                nil [12665 13183]))          
    :file "posixpath.py"
    :pointmax 13183
    :fsize 13182
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax '((NAME 9954 . 9959) (IF 9980 . 9982) (ELSE 10009 . 10013))
    )
   (semanticdb-table "traceback.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Extract, format and print information about Python stack traces.\"\"\"" code nil nil [1 71])
            ("linecache" include nil nil [73 89])
            ("sys" include nil nil [90 100])
            ("types" include nil nil [101 113])
            ("__all__" variable nil nil [115 378])
            ("_print" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [391 395])
                ("str" variable nil (reparse-symbol function_parameters) [397 400])
                ("terminator" variable nil (reparse-symbol function_parameters) [405 415]))              ) nil [380 454])
            ("print_list" function
               (:documentation "Print the list of tuples as returned by extract_tb() or
    extract_stack() as a formatted stack trace to the given file."
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [471 485])
                    ("file" variable nil (reparse-symbol function_parameters) [487 491]))                  )
                nil [456 893])
            ("format_list" function
               (:documentation "Format a list of traceback entry tuples for printing.

    Given a list of tuples as returned by extract_tb() or
    extract_stack(), return a list of strings ready for printing.
    Each string in the resulting list corresponds to the item with the
    same index in the argument list.  Each string ends in a newline;
    the strings may contain internal newlines as well, for those items
    whose source text line is not None.
    "
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [910 924]))                  )
                nil [894 1625])
            ("print_tb" function
               (:documentation "Print up to 'limit' stack trace entries from the traceback 'tb'.

    If 'limit' is omitted or None, all entries are printed.  If 'file'
    is omitted or None, the output goes to sys.stderr; otherwise
    'file' should be an open file or file-like object with a write()
    method.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [1640 1642])
                    ("limit" variable nil (reparse-symbol function_parameters) [1644 1649])
                    ("file" variable nil (reparse-symbol function_parameters) [1656 1660]))                  )
                nil [1627 2612])
            ("format_tb" function
               (:documentation "A shorthand for 'format_list(extract_stack(f, limit))."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2627 2629])
                    ("limit" variable nil (reparse-symbol function_parameters) [2631 2636]))                  )
                nil [2613 2757])
            ("extract_tb" function
               (:documentation "Return list of up to limit pre-processed entries from traceback.

    This is useful for alternate formatting of stack traces.  If
    'limit' is omitted or None, all entries are extracted.  A
    pre-processed stack trace entry is a quadruple (filename, line
    number, function name, text) representing the information that is
    usually printed for a stack trace.  The text is a string with
    leading and trailing whitespace stripped; if the source is not
    available it is None.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2773 2775])
                    ("limit" variable nil (reparse-symbol function_parameters) [2777 2782]))                  )
                nil [2758 3893])
            ("print_exception" function
               (:documentation "Print exception up to 'limit' stack trace entries from 'tb' to 'file'.

    This differs from print_tb() in the following ways: (1) if
    traceback is not None, it prints a header \"Traceback (most recent
    call last):\"; (2) it prints the exception type and value after the
    stack trace; (3) if type is SyntaxError and value has the
    appropriate format, it prints the line where the syntax error
    occurred with a caret on the next line indicating the approximate
    position of the error.
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [3915 3920])
                    ("value" variable nil (reparse-symbol function_parameters) [3922 3927])
                    ("tb" variable nil (reparse-symbol function_parameters) [3929 3931])
                    ("limit" variable nil (reparse-symbol function_parameters) [3933 3938])
                    ("file" variable nil (reparse-symbol function_parameters) [3945 3949]))                  )
                nil [3895 4726])
            ("format_exception" function
               (:documentation "Format a stack trace and the exception information.

    The arguments have the same meaning as the corresponding arguments
    to print_exception().  The return value is a list of strings, each
    ending in a newline and some containing internal newlines.  When
    these lines are concatenated and printed, exactly the same text is
    printed as does print_exception().
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [4748 4753])
                    ("value" variable nil (reparse-symbol function_parameters) [4755 4760])
                    ("tb" variable nil (reparse-symbol function_parameters) [4762 4764])
                    ("limit" variable nil (reparse-symbol function_parameters) [4766 4771]))                  )
                nil [4727 5378])
            ("format_exception_only" function
               (:documentation "Format the exception part of a traceback.

    The arguments are the exception type and value such as given by
    sys.last_type and sys.last_value. The return value is a list of
    strings, each ending in a newline.

    Normally, the list contains a single string; however, for
    SyntaxError exceptions, it contains several lines that (when
    printed) display detailed information about where the syntax
    error occurred.

    The message indicating which exception occurred is always the last
    string in the list.

    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [5405 5410])
                    ("value" variable nil (reparse-symbol function_parameters) [5412 5417]))                  )
                nil [5379 7489])
            ("_format_final_exc_line" function
               (:documentation "Return a list of a single line -- normal case for format_exception_only"
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [7517 7522])
                    ("value" variable nil (reparse-symbol function_parameters) [7524 7529]))                  )
                nil [7490 7786])
            ("_some_str" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [7801 7806]))              ) nil [7787 8071])
            ("print_exc" function
               (:documentation "Shorthand for 'print_exception(sys.exc_type, sys.exc_value, sys.exc_traceback, limit, file)'.
    (In fact, it uses sys.exc_info() to retrieve the same information
    in a thread-safe way.)"
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8087 8092])
                    ("file" variable nil (reparse-symbol function_parameters) [8099 8103]))                  )
                nil [8073 8512])
            ("format_exc" function
               (:documentation "Like print_exc() but return a string."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8529 8534]))                  )
                nil [8514 8754])
            ("print_last" function
               (:documentation "This is a shorthand for 'print_exception(sys.last_type,
    sys.last_value, sys.last_traceback, limit, file)'."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8771 8776])
                    ("file" variable nil (reparse-symbol function_parameters) [8783 8787]))                  )
                nil [8756 9151])
            ("print_stack" function
               (:documentation "Print a stack trace from its invocation point.

    The optional 'f' argument can be used to specify an alternate
    stack frame at which to start. The optional 'limit' and 'file'
    arguments have the same meaning as for print_exception().
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9169 9170])
                    ("limit" variable nil (reparse-symbol function_parameters) [9177 9182])
                    ("file" variable nil (reparse-symbol function_parameters) [9189 9193]))                  )
                nil [9153 9656])
            ("format_stack" function
               (:documentation "Shorthand for 'format_list(extract_stack(f, limit))'."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9674 9675])
                    ("limit" variable nil (reparse-symbol function_parameters) [9682 9687]))                  )
                nil [9657 9958])
            ("extract_stack" function
               (:documentation "Extract the raw traceback from the current stack frame.

    The return value has the same format as for extract_tb().  The
    optional 'f' and 'limit' arguments have the same meaning as for
    print_stack().  Each item in the list is a quadruple (filename,
    line number, function name, text), and the entries are in order
    from oldest to newest stack frame.
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9977 9978])
                    ("limit" variable nil (reparse-symbol function_parameters) [9985 9990]))                  )
                nil [9959 11119])
            ("tb_lineno" function
               (:documentation "Calculate correct line number of traceback given in tb.

    Obsolete in 2.3.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [11134 11136]))                  )
                nil [11120 11256]))          
    :file "traceback.py"
    :pointmax 11256
    :fsize 11255
    :lastmodtime '(21060 39147 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "inspect.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Get useful information from live Python objects.

This module encapsulates the interface provided by the internal special
attributes (func_*, co_*, im_*, tb_*, etc.) in a friendlier fashion.
It also provides some help for examining source code and class layout.

Here are some of the useful functions provided by this module:

    ismodule(), isclass(), ismethod(), isfunction(), isgeneratorfunction(),
        isgenerator(), istraceback(), isframe(), iscode(), isbuiltin(),
        isroutine() - check object types
    getmembers() - get members of an object that satisfy a given condition

    getfile(), getsourcefile(), getsource() - find an object's source code
    getdoc(), getcomments() - get documentation on an object
    getmodule() - determine the module that an object came from
    getclasstree() - arrange classes so as to represent their hierarchy

    getargspec(), getargvalues(), getcallargs() - get info about function arguments
    formatargspec(), formatargvalues() - format an argument spec
    getouterframes(), getinnerframes() - get info about frames
    currentframe() - get the current stack frame
    stack(), trace() - get info about frames on the stack or in a traceback
\"\"\"" code nil nil [30 1238])
            ("__author__" variable nil nil [1296 1337])
            ("__date__" variable nil nil [1338 1361])
            ("sys" include nil nil [1363 1373])
            ("os" include nil nil [1374 1383])
            ("types" include nil nil [1384 1396])
            ("string" include nil nil [1397 1410])
            ("re" include nil nil [1411 1420])
            ("dis" include nil nil [1421 1431])
            ("imp" include nil nil [1432 1442])
            ("tokenize" include nil nil [1443 1458])
            ("linecache" include nil nil [1459 1475])
            ("operator" include nil nil [1476 1507])
            ("collections" include nil nil [1508 1542])
            ("CO_OPTIMIZED, CO_NEWLOCALS, CO_VARARGS, CO_VARKEYWORDS" code nil nil [1587 1662])
            ("CO_NESTED, CO_GENERATOR, CO_NOFREE" code nil nil [1663 1716])
            ("TPFLAGS_IS_ABSTRACT" code nil nil [1740 1769])
            ("ismodule" function
               (:documentation "Return true if the object is a module.

    Module objects provide these attributes:
        __doc__         documentation string
        __file__        filename (missing for built-in modules)"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1860 1866]))                  )
                nil [1847 2121])
            ("isclass" function
               (:documentation "Return true if the object is a class.

    Class objects provide these attributes:
        __doc__         documentation string
        __module__      name of module in which this class was defined"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2134 2140]))                  )
                nil [2122 2407])
            ("ismethod" function
               (:documentation "Return true if the object is an instance method.

    Instance method objects provide these attributes:
        __doc__         documentation string
        __name__        name with which this method was defined
        im_class        class object in which this method belongs
        im_func         function object containing implementation of method
        im_self         instance to which this method is bound, or None"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2421 2427]))                  )
                nil [2408 2915])
            ("ismethoddescriptor" function
               (:documentation "Return true if the object is a method descriptor.

    But not if ismethod() or isclass() or isfunction() are true.

    This is new in Python 2.2, and, for example, is true of int.__add__.
    An object passing this test has a __get__ attribute but not a __set__
    attribute, but beyond that the set of attributes varies.  __name__ is
    usually sensible, and __doc__ often is.

    Methods implemented via descriptors that also pass one of the other
    tests return false from the ismethoddescriptor() test, simply because
    the other tests promise more -- you can, e.g., count on having the
    im_func attribute (etc) when an object passes ismethod()."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2939 2945]))                  )
                nil [2916 3878])
            ("isdatadescriptor" function
               (:documentation "Return true if the object is a data descriptor.

    Data descriptors have both a __get__ and a __set__ attribute.  Examples are
    properties (defined in Python) and getsets and members (defined in C).
    Typically, data descriptors will also have __name__ and __doc__ attributes
    (properties, getsets, and members have both of these attributes), but this
    is not guaranteed."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [3900 3906]))                  )
                nil [3879 4375])
            ("if" code nil nil [4376 4953])
            ("if" code nil nil [4954 5531])
            ("isfunction" function
               (:documentation "Return true if the object is a user-defined function.

    Function objects provide these attributes:
        __doc__         documentation string
        __name__        name with which this function was defined
        func_code       code object containing compiled function bytecode
        func_defaults   tuple of any default values for arguments
        func_doc        (same as __doc__)
        func_globals    global namespace in which this function was defined
        func_name       (same as __name__)"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [5547 5553]))                  )
                nil [5532 6130])
            ("isgeneratorfunction" function
               (:documentation "Return true if the object is a user-defined generator function.

    Generator function objects provides same attributes as functions.

    See help(isfunction) for attributes listing."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [6155 6161]))                  )
                nil [6131 6478])
            ("isgenerator" function
               (:documentation "Return true if the object is a generator.

    Generator objects provide these attributes:
        __iter__        defined to support interation over container
        close           raises a new GeneratorExit exception inside the
                        generator to terminate the iteration
        gi_code         code object
        gi_frame        frame object or possibly None once the generator has
                        been exhausted
        gi_running      set to 1 when generator is executing, 0 otherwise
        next            return the next item from the container
        send            resumes the generator and \"sends\" a value that becomes
                        the result of the current yield-expression
        throw           used to raise an exception inside the generator"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [6495 6501]))                  )
                nil [6479 7366])
            ("istraceback" function
               (:documentation "Return true if the object is a traceback.

    Traceback objects provide these attributes:
        tb_frame        frame object at this level
        tb_lasti        index of last attempted instruction in bytecode
        tb_lineno       current line number in Python source code
        tb_next         next inner traceback object (called by this level)"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [7383 7389]))                  )
                nil [7367 7808])
            ("isframe" function
               (:documentation "Return true if the object is a frame object.

    Frame objects provide these attributes:
        f_back          next outer frame object (this frame's caller)
        f_builtins      built-in namespace seen by this frame
        f_code          code object being executed in this frame
        f_exc_traceback traceback if raised in this frame, or None
        f_exc_type      exception type if raised in this frame, or None
        f_exc_value     exception value if raised in this frame, or None
        f_globals       global namespace seen by this frame
        f_lasti         index of last attempted instruction in bytecode
        f_lineno        current line number in Python source code
        f_locals        local namespace seen by this frame
        f_restricted    0 or 1 if frame is in restricted execution mode
        f_trace         tracing function for this frame, or None"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [7821 7827]))                  )
                nil [7809 8780])
            ("iscode" function
               (:documentation "Return true if the object is a code object.

    Code objects provide these attributes:
        co_argcount     number of arguments (not including * or ** args)
        co_code         string of raw compiled bytecode
        co_consts       tuple of constants used in the bytecode
        co_filename     name of file in which this code object was created
        co_firstlineno  number of first line in Python source code
        co_flags        bitmap: 1=optimized | 2=newlocals | 4=*arg | 8=**arg
        co_lnotab       encoded mapping of line numbers to bytecode indices
        co_name         name with which this code object was defined
        co_names        tuple of names of local variables
        co_nlocals      number of local variables
        co_stacksize    virtual machine stack space required
        co_varnames     tuple of names of arguments and local variables"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [8792 8798]))                  )
                nil [8781 9743])
            ("isbuiltin" function
               (:documentation "Return true if the object is a built-in function or method.

    Built-in functions and methods provide these attributes:
        __doc__         documentation string
        __name__        original name of this function or method
        __self__        instance to which a method is bound, or None"
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [9758 9764]))                  )
                nil [9744 10135])
            ("isroutine" function
               (:documentation "Return true if the object is any kind of function or method."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [10150 10156]))                  )
                nil [10136 10369])
            ("isabstract" function
               (:documentation "Return true if the object is an abstract base class (ABC)."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [10385 10391]))                  )
                nil [10370 10548])
            ("getmembers" function
               (:documentation "Return all members of an object as (name, value) pairs sorted by name.
    Optionally, only return members that satisfy a given predicate."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [10564 10570])
                    ("predicate" variable nil (reparse-symbol function_parameters) [10572 10581]))                  )
                nil [10549 11014])
            ("Attribute" variable nil nil [11015 11085])
            ("classify_class_attrs" function
               (:documentation "Return list of attribute-descriptor tuples.

    For each name in dir(cls), the return list contains a 4-tuple
    with these elements:

        0. The name (a string).

        1. The kind of attribute this is, one of these strings:
               'class method'    created via classmethod()
               'static method'   created via staticmethod()
               'property'        created via property()
               'method'          any other flavor of method
               'data'            not a method

        2. The class which defined this attribute (a class).

        3. The object as obtained directly from the defining class's
           __dict__, not via getattr.  This is especially important for
           data attributes:  C.data is just a data object, but
           C.__dict__['data'] may be a data descriptor with additional
           info, like a __doc__ string.
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [11112 11115]))                  )
                nil [11087 13577])
            ("_searchbases" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [13671 13674])
                ("accum" variable nil (reparse-symbol function_parameters) [13676 13681]))              ) nil [13654 13856])
            ("getmro" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [13868 13871]))              ) nil [13857 14105])
            ("indentsize" function
               (:documentation "Return the indent size, in spaces, at the start of a line of text."
                :arguments 
                  ( ("line" variable nil (reparse-symbol function_parameters) [14197 14201]))                  )
                nil [14182 14373])
            ("getdoc" function
               (:documentation "Get the documentation string for an object.

    All tabs are expanded to spaces.  To clean up docstrings that are
    indented to line up with blocks of code, any whitespace than can be
    uniformly removed from the second line onwards is removed."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [14385 14391]))                  )
                nil [14374 14831])
            ("cleandoc" function
               (:documentation "Clean up indentation from docstrings.

    Any whitespace that can be uniformly removed from the second line
    onwards is removed."
                :arguments 
                  ( ("doc" variable nil (reparse-symbol function_parameters) [14845 14848]))                  )
                nil [14832 15826])
            ("getfile" function
               (:documentation "Work out which source or compiled file an object was defined in."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [15839 15845]))                  )
                nil [15827 16741])
            ("ModuleInfo" variable nil nil [16742 16811])
            ("getmoduleinfo" function
               (:documentation "Get the module name, suffix, mode, and module type for a given file."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [16831 16835]))                  )
                nil [16813 17320])
            ("getmodulename" function
               (:documentation "Return the module name for a given file, or None."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [17339 17343]))                  )
                nil [17321 17465])
            ("getsourcefile" function
               (:documentation "Return the filename that can be used to locate an object's source.
    Return None if no way can be identified to get the source.
    "
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [17484 17490]))                  )
                nil [17466 18302])
            ("getabsfile" function
               (:documentation "Return an absolute path to the source or compiled file for an object.

    The idea is for each object to have a unique origin, so this routine
    normalizes the result as much as possible."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [18318 18324])
                    ("_filename" variable nil (reparse-symbol function_parameters) [18326 18335]))                  )
                nil [18303 18687])
            ("modulesbyfile" variable nil nil [18688 18706])
            ("_filesbymodname" variable nil nil [18707 18727])
            ("getmodule" function
               (:documentation "Return the module an object was defined in, or None if not found."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [18743 18749])
                    ("_filename" variable nil (reparse-symbol function_parameters) [18751 18760]))                  )
                nil [18729 20611])
            ("findsource" function
               (:documentation "Return the entire source file and starting line number for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a list of all the lines
    in the file and the line number indexes a line in that list.  An IOError
    is raised if the source code cannot be retrieved."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [20627 20633]))                  )
                nil [20612 23120])
            ("getcomments" function
               (:documentation "Get lines of comments immediately preceding an object's source code.

    Returns None when source can't be found.
    "
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [23137 23143]))                  )
                nil [23121 24930])
            ("EndOfBlock" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [24931 24965])
            ("BlockFinder" type
               (:documentation "Provide a tokeneater() method to detect the end of a code block."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [25092 25107])
                            ("self" variable nil (reparse-symbol indented_block_body) [25116 25137])
                            ("self" variable nil (reparse-symbol indented_block_body) [25146 25166])
                            ("self" variable nil (reparse-symbol indented_block_body) [25175 25196])
                            ("self" variable nil (reparse-symbol indented_block_body) [25205 25218]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25077 25081]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25064 25219])
                    ("tokeneater" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25239 25243])
                            ("type" variable nil (reparse-symbol function_parameters) [25245 25249])
                            ("token" variable nil (reparse-symbol function_parameters) [25251 25256])
                            ("srow_scol" variable nil (reparse-symbol function_parameters) [25258 25267])
                            ("erow_ecol" variable nil (reparse-symbol function_parameters) [25269 25278])
                            ("line" variable nil (reparse-symbol function_parameters) [25280 25284]))                          )
                        (reparse-symbol indented_block_body) [25224 26684]))                  
                :type "class")
                nil [24966 26684])
            ("getblock" function
               (:documentation "Extract the block of code at the top of the given list of lines."
                :arguments 
                  ( ("lines" variable nil (reparse-symbol function_parameters) [26698 26703]))                  )
                nil [26685 26982])
            ("getsourcelines" function
               (:documentation "Return a list of source lines and starting line number for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a list of the lines
    corresponding to the object and the line number indicates where in the
    original source file the first line of code was found.  An IOError is
    raised if the source code cannot be retrieved."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [27002 27008]))                  )
                nil [26983 27570])
            ("getsource" function
               (:documentation "Return the text of the source code for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a single string.  An
    IOError is raised if the source code cannot be retrieved."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [27585 27591]))                  )
                nil [27571 27942])
            ("walktree" function
               (:documentation "Recursive helper function for getclasstree()."
                :arguments 
                  ( ("classes" variable nil (reparse-symbol function_parameters) [28032 28039])
                    ("children" variable nil (reparse-symbol function_parameters) [28041 28049])
                    ("parent" variable nil (reparse-symbol function_parameters) [28051 28057]))                  )
                nil [28019 28363])
            ("getclasstree" function
               (:documentation "Arrange the given list of classes into a hierarchy of nested lists.

    Where a nested list appears, it contains classes derived from the class
    whose entry immediately precedes the list.  Each entry is a 2-tuple
    containing a class and a tuple of its base classes.  If the 'unique'
    argument is true, exactly one entry appears in the returned structure
    for each class in the given list.  Otherwise, classes using multiple
    inheritance and their descendants will appear multiple times."
                :arguments 
                  ( ("classes" variable nil (reparse-symbol function_parameters) [28381 28388])
                    ("unique" variable nil (reparse-symbol function_parameters) [28390 28396]))                  )
                nil [28364 29410])
            ("Arguments" variable nil nil [29487 29547])
            ("getargs" function
               (:documentation "Get information about the arguments accepted by a code object.

    Three things are returned: (args, varargs, varkw), where 'args' is
    a list of argument names (possibly containing nested lists), and
    'varargs' and 'varkw' are the names of the * and ** arguments or None."
                :arguments 
                  ( ("co" variable nil (reparse-symbol function_parameters) [29561 29563]))                  )
                nil [29549 31899])
            ("ArgSpec" variable nil nil [31900 31965])
            ("getargspec" function
               (:documentation "Get the names and default values of a function's arguments.

    A tuple of four things is returned: (args, varargs, varkw, defaults).
    'args' is a list of the argument names (it may contain nested lists).
    'varargs' and 'varkw' are the names of the * and ** arguments or None.
    'defaults' is an n-tuple of the default values of the last n arguments.
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [31982 31986]))                  )
                nil [31967 32627])
            ("ArgInfo" variable nil nil [32628 32691])
            ("getargvalues" function
               (:documentation "Get information about arguments passed into a particular frame.

    A tuple of four things is returned: (args, varargs, varkw, locals).
    'args' is a list of the argument names (it may contain nested lists).
    'varargs' and 'varkw' are the names of the * and ** arguments or None.
    'locals' is the locals dictionary of the given frame."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [32710 32715]))                  )
                nil [32693 33178])
            ("joinseq" function (:arguments 
              ( ("seq" variable nil (reparse-symbol function_parameters) [33191 33194]))              ) nil [33179 33314])
            ("strseq" function
               (:documentation "Recursively walk a sequence, stringifying each element."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [33326 33332])
                    ("convert" variable nil (reparse-symbol function_parameters) [33334 33341])
                    ("join" variable nil (reparse-symbol function_parameters) [33343 33347]))                  )
                nil [33315 33582])
            ("formatargspec" function
               (:documentation "Format an argument spec from the 4 values returned by getargspec.

    The first four arguments are (args, varargs, varkw, defaults).  The
    other four arguments are the corresponding optional formatting functions
    that are called to turn names and values into strings.  The ninth
    argument is an optional function to format the sequence of arguments."
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [33601 33605])
                    ("varargs" variable nil (reparse-symbol function_parameters) [33607 33614])
                    ("varkw" variable nil (reparse-symbol function_parameters) [33621 33626])
                    ("defaults" variable nil (reparse-symbol function_parameters) [33633 33641])
                    ("formatarg" variable nil (reparse-symbol function_parameters) [33666 33675])
                    ("formatvarargs" variable nil (reparse-symbol function_parameters) [33699 33712])
                    ("formatvarkw" variable nil (reparse-symbol function_parameters) [33756 33767])
                    ("formatvalue" variable nil (reparse-symbol function_parameters) [33812 33823])
                    ("join" variable nil (reparse-symbol function_parameters) [33875 33879]))                  )
                nil [33583 34744])
            ("formatargvalues" function
               (:documentation "Format an argument spec from the 4 values returned by getargvalues.

    The first four arguments are (args, varargs, varkw, locals).  The
    next four arguments are the corresponding optional formatting functions
    that are called to turn names and values into strings.  The ninth
    argument is an optional function to format the sequence of arguments."
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [34765 34769])
                    ("varargs" variable nil (reparse-symbol function_parameters) [34771 34778])
                    ("varkw" variable nil (reparse-symbol function_parameters) [34780 34785])
                    ("locals" variable nil (reparse-symbol function_parameters) [34787 34793])
                    ("formatarg" variable nil (reparse-symbol function_parameters) [34815 34824])
                    ("formatvarargs" variable nil (reparse-symbol function_parameters) [34850 34863])
                    ("formatvarkw" variable nil (reparse-symbol function_parameters) [34909 34920])
                    ("formatvalue" variable nil (reparse-symbol function_parameters) [34967 34978])
                    ("join" variable nil (reparse-symbol function_parameters) [35032 35036]))                  )
                nil [34745 35898])
            ("getcallargs" function
               (:documentation "Get the mapping of arguments to values.

    A dict is returned, with keys the function argument names (including the
    names of the * and ** arguments, if any), and values the respective bound
    values from 'positional' and 'named'."
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [35915 35919])
                    ("positional" variable nil (reparse-symbol function_parameters) [35921 35932])
                    ("named" variable nil (reparse-symbol function_parameters) [35934 35941]))                  )
                nil [35899 39648])
            ("Traceback" variable nil nil [39726 39808])
            ("getframeinfo" function
               (:documentation "Get information about a frame or traceback object.

    A tuple of five things is returned: the filename, the line number of
    the current line, the function name, a list of lines of context from
    the source code, and the index of the current line within that list.
    The optional second argument specifies the number of lines of context
    to return, which are centered around the current line."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [39827 39832])
                    ("context" variable nil (reparse-symbol function_parameters) [39834 39841]))                  )
                nil [39810 41040])
            ("getlineno" function
               (:documentation "Get the line number from a frame object, allowing for optimization."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [41055 41060]))                  )
                nil [41041 41235])
            ("getouterframes" function
               (:documentation "Get a list of records for a frame and all higher (calling) frames.

    Each record contains a frame object, filename, line number, function
    name, a list of lines of context, and index within the context."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [41255 41260])
                    ("context" variable nil (reparse-symbol function_parameters) [41262 41269]))                  )
                nil [41236 41645])
            ("getinnerframes" function
               (:documentation "Get a list of records for a traceback's frame and all lower frames.

    Each record contains a frame object, filename, line number, function
    name, a list of lines of context, and index within the context."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [41665 41667])
                    ("context" variable nil (reparse-symbol function_parameters) [41669 41676]))                  )
                nil [41646 42048])
            ("if" code nil nil [42049 42157])
            ("stack" function
               (:documentation "Return a list of records for the stack above the caller's frame."
                :arguments 
                  ( ("context" variable nil (reparse-symbol function_parameters) [42168 42175]))                  )
                nil [42158 42308])
            ("trace" function
               (:documentation "Return a list of records for the stack below the current exception."
                :arguments 
                  ( ("context" variable nil (reparse-symbol function_parameters) [42319 42326]))                  )
                nil [42309 42463]))          
    :file "inspect.py"
    :pointmax 42463
    :fsize 42462
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax '((NAME 37505 . 37517) (IF 37534 . 37536) (ELSE 37546 . 37550) (NAME 21177 . 21181) (IF 21195 . 21197) (ELSE 21209 . 21213))
    )
   (semanticdb-table "httplib.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"HTTP/1.1 client library

<intro stuff goes here>
<other stuff, too>

HTTPConnection goes through a number of \"states\", which define when a client
may legally make another request or fetch the response for a particular
request. This diagram details these state transitions:

    (null)
      |
      | HTTPConnection()
      v
    Idle
      |
      | putrequest()
      v
    Request-started
      |
      | ( putheader() )*  endheaders()
      v
    Request-sent
      |
      | response = getresponse()
      v
    Unread-response   [Response-headers-read]
      |\\____________________
      |                     |
      | response.read()     | putrequest()
      v                     v
    Idle                  Req-started-unread-response
                     ______/|
                   /        |
   response.read() |        | ( putheader() )*  endheaders()
                   v        v
       Request-started    Req-sent-unread-response
                            |
                            | response.read()
                            v
                          Request-sent

This diagram presents the following rules:
  -- a second request may not be started until {response-headers-read}
  -- a response [object] cannot be retrieved until {request-sent}
  -- there is no differentiation between an unread response body and a
     partially read response body

Note: this enforcement is applied by the HTTPConnection class. The
      HTTPResponse class does not enforce this state machine, which
      implies sophisticated clients may accelerate the request/response
      pipeline. Caution should be taken, though: accelerating the states
      beyond the above pattern may imply knowledge of the server's
      connection-close behavior for certain requests. For example, it
      is impossible to tell whether the server will close the connection
      UNTIL the response headers have been read; this means that further
      requests cannot be placed into the pipeline until it is known that
      the server will NOT be closing the connection.

Logical State                  __state            __response
-------------                  -------            ----------
Idle                           _CS_IDLE           None
Request-started                _CS_REQ_STARTED    None
Request-sent                   _CS_REQ_SENT       None
Unread-response                _CS_IDLE           <response_class>
Req-started-unread-response    _CS_REQ_STARTED    <response_class>
Req-sent-unread-response       _CS_REQ_SENT       <response_class>
\"\"\"" code nil nil [1 2564])
            ("array" include nil nil [2566 2589])
            ("os" include nil nil [2590 2599])
            ("socket" include nil nil [2600 2613])
            ("sys" include nil nil [2614 2641])
            ("urlparse" include nil nil [2642 2671])
            ("warnings" include nil nil [2672 2687])
            ("with" code nil nil [2688 2887])
            ("try" code nil nil [2888 2982])
            ("__all__" variable nil nil [2983 3353])
            ("HTTP_PORT" variable nil nil [3355 3369])
            ("HTTPS_PORT" variable nil nil [3370 3386])
            ("_UNKNOWN" variable nil nil [3388 3408])
            ("_CS_IDLE" variable nil nil [3430 3447])
            ("_CS_REQ_STARTED" variable nil nil [3448 3483])
            ("_CS_REQ_SENT" variable nil nil [3484 3513])
            ("CONTINUE" variable nil nil [3546 3560])
            ("SWITCHING_PROTOCOLS" variable nil nil [3561 3586])
            ("PROCESSING" variable nil nil [3587 3603])
            ("OK" variable nil nil [3618 3626])
            ("CREATED" variable nil nil [3627 3640])
            ("ACCEPTED" variable nil nil [3641 3655])
            ("NON_AUTHORITATIVE_INFORMATION" variable nil nil [3656 3691])
            ("NO_CONTENT" variable nil nil [3692 3708])
            ("RESET_CONTENT" variable nil nil [3709 3728])
            ("PARTIAL_CONTENT" variable nil nil [3729 3750])
            ("MULTI_STATUS" variable nil nil [3751 3769])
            ("IM_USED" variable nil nil [3770 3783])
            ("MULTIPLE_CHOICES" variable nil nil [3799 3821])
            ("MOVED_PERMANENTLY" variable nil nil [3822 3845])
            ("FOUND" variable nil nil [3846 3857])
            ("SEE_OTHER" variable nil nil [3858 3873])
            ("NOT_MODIFIED" variable nil nil [3874 3892])
            ("USE_PROXY" variable nil nil [3893 3908])
            ("TEMPORARY_REDIRECT" variable nil nil [3909 3933])
            ("BAD_REQUEST" variable nil nil [3950 3967])
            ("UNAUTHORIZED" variable nil nil [3968 3986])
            ("PAYMENT_REQUIRED" variable nil nil [3987 4009])
            ("FORBIDDEN" variable nil nil [4010 4025])
            ("NOT_FOUND" variable nil nil [4026 4041])
            ("METHOD_NOT_ALLOWED" variable nil nil [4042 4066])
            ("NOT_ACCEPTABLE" variable nil nil [4067 4087])
            ("PROXY_AUTHENTICATION_REQUIRED" variable nil nil [4088 4123])
            ("REQUEST_TIMEOUT" variable nil nil [4124 4145])
            ("CONFLICT" variable nil nil [4146 4160])
            ("GONE" variable nil nil [4161 4171])
            ("LENGTH_REQUIRED" variable nil nil [4172 4193])
            ("PRECONDITION_FAILED" variable nil nil [4194 4219])
            ("REQUEST_ENTITY_TOO_LARGE" variable nil nil [4220 4250])
            ("REQUEST_URI_TOO_LONG" variable nil nil [4251 4277])
            ("UNSUPPORTED_MEDIA_TYPE" variable nil nil [4278 4306])
            ("REQUESTED_RANGE_NOT_SATISFIABLE" variable nil nil [4307 4344])
            ("EXPECTATION_FAILED" variable nil nil [4345 4369])
            ("UNPROCESSABLE_ENTITY" variable nil nil [4370 4396])
            ("LOCKED" variable nil nil [4397 4409])
            ("FAILED_DEPENDENCY" variable nil nil [4410 4433])
            ("UPGRADE_REQUIRED" variable nil nil [4434 4456])
            ("INTERNAL_SERVER_ERROR" variable nil nil [4473 4500])
            ("NOT_IMPLEMENTED" variable nil nil [4501 4522])
            ("BAD_GATEWAY" variable nil nil [4523 4540])
            ("SERVICE_UNAVAILABLE" variable nil nil [4541 4566])
            ("GATEWAY_TIMEOUT" variable nil nil [4567 4588])
            ("HTTP_VERSION_NOT_SUPPORTED" variable nil nil [4589 4621])
            ("INSUFFICIENT_STORAGE" variable nil nil [4622 4648])
            ("NOT_EXTENDED" variable nil nil [4649 4667])
            ("responses" variable nil nil [4714 5872])
            ("MAXAMOUNT" variable nil nil [5933 5952])
            ("_MAXLINE" variable nil nil [6001 6017])
            ("HTTPMessage" type
               (:superclasses ("mimetools.Message")
                :members 
                  ( ("addheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6076 6080])
                            ("key" variable nil (reparse-symbol function_parameters) [6082 6085])
                            ("value" variable nil (reparse-symbol function_parameters) [6087 6092]))                          
                        :documentation "Add header for field key handling repeats.")
                        (reparse-symbol indented_block_body) [6062 6346])
                    ("addcontinue" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6367 6371])
                            ("key" variable nil (reparse-symbol function_parameters) [6373 6376])
                            ("more" variable nil (reparse-symbol function_parameters) [6378 6382]))                          
                        :documentation "Add more field data from a continuation line.")
                        (reparse-symbol indented_block_body) [6351 6520])
                    ("readheaders" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6541 6545]))                          
                        :documentation "Read header lines.

        Read header lines up to the entirely blank line that terminates them.
        The (normally blank) line that ends the headers is skipped, but not
        included in the returned list.  If a non-header line ends the headers,
        (which is an error), an attempt is made to backspace over it; it is
        never included in the returned list.

        The variable self.status is set to the empty string if all went well,
        otherwise it is an error message.  The variable self.headers is a
        completely uninterpreted list of lines contained in the header (so
        printing them will reproduce the header exactly as it appears in the
        file).

        If multiple header fields with the same name occur, they are combined
        according to the rules in RFC 2616 sec 4.2:

        Appending each subsequent field-value to the first, each separated
        by a comma. The order in which header fields with the same field-name
        are received is significant to the interpretation of the combined
        field value.
        ")
                        (reparse-symbol indented_block_body) [6525 10282]))                  
                :type "class")
                nil [6019 10282])
            ("HTTPResponse" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [10787 11346])
                            ("self" variable nil (reparse-symbol indented_block_body) [11354 11382])
                            ("self" variable nil (reparse-symbol indented_block_body) [11391 11411])
                            ("self" variable nil (reparse-symbol indented_block_body) [11420 11441])
                            ("self" variable nil (reparse-symbol indented_block_body) [11451 11466])
                            ("self" variable nil (reparse-symbol indented_block_body) [11523 11546])
                            ("self" variable nil (reparse-symbol indented_block_body) [11570 11592])
                            ("self" variable nil (reparse-symbol indented_block_body) [11616 11638])
                            ("self" variable nil (reparse-symbol indented_block_body) [11665 11688])
                            ("self" variable nil (reparse-symbol indented_block_body) [11732 11758])
                            ("self" variable nil (reparse-symbol indented_block_body) [11810 11832])
                            ("self" variable nil (reparse-symbol indented_block_body) [11885 11911]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10712 10716])
                            ("sock" variable nil (reparse-symbol function_parameters) [10718 10722])
                            ("debuglevel" variable nil (reparse-symbol function_parameters) [10724 10734])
                            ("strict" variable nil (reparse-symbol function_parameters) [10738 10744])
                            ("method" variable nil (reparse-symbol function_parameters) [10748 10754])
                            ("buffering" variable nil (reparse-symbol function_parameters) [10761 10770]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10699 11954])
                    ("_read_status" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11976 11980]))                          )
                        (reparse-symbol indented_block_body) [11959 13307])
                    ("begin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13322 13326]))                          )
                        (reparse-symbol indented_block_body) [13312 16251])
                    ("_check_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16273 16277]))                          )
                        (reparse-symbol indented_block_body) [16256 17322])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17337 17341]))                          )
                        (reparse-symbol indented_block_body) [17327 17419])
                    ("isclosed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17437 17441]))                          )
                        (reparse-symbol indented_block_body) [17424 17839])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17926 17930])
                            ("amt" variable nil (reparse-symbol function_parameters) [17932 17935]))                          )
                        (reparse-symbol indented_block_body) [17917 18985])
                    ("_read_chunked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19008 19012])
                            ("amt" variable nil (reparse-symbol function_parameters) [19014 19017]))                          )
                        (reparse-symbol indented_block_body) [18990 21148])
                    ("_safe_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21168 21172])
                            ("amt" variable nil (reparse-symbol function_parameters) [21174 21177]))                          
                        :documentation "Read the number of bytes requested, compensating for partial reads.

        Normally, we have a blocking socket, but a read() can be interrupted
        by a signal (resulting in a partial read).

        Note that we cannot distinguish between EOF and an interrupt when zero
        bytes have been read. IncompleteRead() will be raised in this
        situation.

        This function should be used when <amt> bytes \"should\" be present for
        reading. If the bytes are truly not available (due to EOF), then the
        IncompleteRead exception can be used to detect the problem.
        ")
                        (reparse-symbol indented_block_body) [21153 22398])
                    ("fileno" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22414 22418]))                          )
                        (reparse-symbol indented_block_body) [22403 22453])
                    ("getheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22472 22476])
                            ("name" variable nil (reparse-symbol function_parameters) [22478 22482])
                            ("default" variable nil (reparse-symbol function_parameters) [22484 22491]))                          )
                        (reparse-symbol indented_block_body) [22458 22614])
                    ("getheaders" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22634 22638]))                          
                        :documentation "Return list of (header, value) tuples.")
                        (reparse-symbol indented_block_body) [22619 22792]))                  
                :type "class")
                nil [10283 22792])
            ("HTTPConnection" type
               (:members 
                  ( ("_http_vsn" variable nil (reparse-symbol indented_block_body) [22821 22835])
                    ("_http_vsn_str" variable nil (reparse-symbol indented_block_body) [22840 22866])
                    ("response_class" variable nil (reparse-symbol indented_block_body) [22872 22901])
                    ("default_port" variable nil (reparse-symbol indented_block_body) [22906 22930])
                    ("auto_open" variable nil (reparse-symbol indented_block_body) [22935 22948])
                    ("debuglevel" variable nil (reparse-symbol indented_block_body) [22953 22967])
                    ("strict" variable nil (reparse-symbol indented_block_body) [22972 22982])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [23124 23146])
                            ("self" variable nil (reparse-symbol indented_block_body) [23155 23191])
                            ("self" variable nil (reparse-symbol indented_block_body) [23200 23216])
                            ("self" variable nil (reparse-symbol indented_block_body) [23225 23242])
                            ("self" variable nil (reparse-symbol indented_block_body) [23251 23273])
                            ("self" variable nil (reparse-symbol indented_block_body) [23282 23305])
                            ("self" variable nil (reparse-symbol indented_block_body) [23314 23333])
                            ("self" variable nil (reparse-symbol indented_block_body) [23342 23366])
                            ("self" variable nil (reparse-symbol indented_block_body) [23375 23399])
                            ("self" variable nil (reparse-symbol indented_block_body) [23408 23433])
                            ("self" code nil (reparse-symbol indented_block_body) [23443 23473])
                            ("if" code nil (reparse-symbol indented_block_body) [23482 23538]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23001 23005])
                            ("host" variable nil (reparse-symbol function_parameters) [23007 23011])
                            ("port" variable nil (reparse-symbol function_parameters) [23013 23017])
                            ("strict" variable nil (reparse-symbol function_parameters) [23024 23030])
                            ("timeout" variable nil (reparse-symbol function_parameters) [23054 23061])
                            ("source_address" variable nil (reparse-symbol function_parameters) [23094 23108]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22988 23538])
                    ("set_tunnel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23558 23562])
                            ("host" variable nil (reparse-symbol function_parameters) [23564 23568])
                            ("port" variable nil (reparse-symbol function_parameters) [23570 23574])
                            ("headers" variable nil (reparse-symbol function_parameters) [23581 23588]))                          
                        :documentation " Sets up the host and the port for the HTTP CONNECT Tunnelling.

        The headers argument should be a mapping of extra HTTP headers
        to send with the CONNECT request.
        ")
                        (reparse-symbol indented_block_body) [23543 23981])
                    ("_set_hostport" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24004 24008])
                            ("host" variable nil (reparse-symbol function_parameters) [24010 24014])
                            ("port" variable nil (reparse-symbol function_parameters) [24016 24020]))                          )
                        (reparse-symbol indented_block_body) [23986 24738])
                    ("set_debuglevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24762 24766])
                            ("level" variable nil (reparse-symbol function_parameters) [24768 24773]))                          )
                        (reparse-symbol indented_block_body) [24743 24808])
                    ("_tunnel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24825 24829]))                          )
                        (reparse-symbol indented_block_body) [24813 25713])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25731 25735]))                          
                        :documentation "Connect to the host and port specified in __init__.")
                        (reparse-symbol indented_block_body) [25719 26010])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26025 26029]))                          
                        :documentation "Close the connection to the HTTP server.")
                        (reparse-symbol indented_block_body) [26015 26348])
                    ("send" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26362 26366])
                            ("data" variable nil (reparse-symbol function_parameters) [26368 26372]))                          
                        :documentation "Send `data' to the server.")
                        (reparse-symbol indented_block_body) [26353 27007])
                    ("_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27024 27028])
                            ("s" variable nil (reparse-symbol function_parameters) [27030 27031]))                          
                        :documentation "Add a line of output to the current request buffer.

        Assumes that the line does *not* end with \\\\r\\\\n.
        ")
                        (reparse-symbol indented_block_body) [27012 27199])
                    ("_send_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27221 27225])
                            ("message_body" variable nil (reparse-symbol function_parameters) [27227 27239]))                          
                        :documentation "Send the currently buffered request and clear the buffer.

        Appends an extra \\\\r\\\\n to the buffer.
        A message_body may be specified, to be appended to the request.
        ")
                        (reparse-symbol indented_block_body) [27204 28060])
                    ("putrequest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28080 28084])
                            ("method" variable nil (reparse-symbol function_parameters) [28086 28092])
                            ("url" variable nil (reparse-symbol function_parameters) [28094 28097])
                            ("skip_host" variable nil (reparse-symbol function_parameters) [28099 28108])
                            ("skip_accept_encoding" variable nil (reparse-symbol function_parameters) [28112 28132]))                          
                        :documentation "Send a request to the server.

        `method' specifies an HTTP request method, e.g. 'GET'.
        `url' specifies the object being requested, e.g. '/index.html'.
        `skip_host' if True does not add automatically a 'Host:' header
        `skip_accept_encoding' if True does not add automatically an
           'Accept-Encoding:' header
        ")
                        (reparse-symbol indented_block_body) [28065 32988])
                    ("putheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33007 33011])
                            ("header" variable nil (reparse-symbol function_parameters) [33013 33019])
                            ("values" variable nil (reparse-symbol function_parameters) [33021 33028]))                          
                        :documentation "Send a request header line to the server.

        For example: h.putheader('Accept', 'text/html')
        ")
                        (reparse-symbol indented_block_body) [32993 33336])
                    ("endheaders" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33356 33360])
                            ("message_body" variable nil (reparse-symbol function_parameters) [33362 33374]))                          
                        :documentation "Indicate that the last header line has been sent to the server.

        This method sends the request to the server.  The optional
        message_body argument can be used to pass a message body
        associated with the request.  The message body will be sent in
        the same packet as the message headers if it is string, otherwise it is
        sent as a separate packet.
        ")
                        (reparse-symbol indented_block_body) [33341 33963])
                    ("request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33980 33984])
                            ("method" variable nil (reparse-symbol function_parameters) [33986 33992])
                            ("url" variable nil (reparse-symbol function_parameters) [33994 33997])
                            ("body" variable nil (reparse-symbol function_parameters) [33999 34003])
                            ("headers" variable nil (reparse-symbol function_parameters) [34010 34017]))                          
                        :documentation "Send a complete request to the server.")
                        (reparse-symbol indented_block_body) [33968 34131])
                    ("_set_content_length" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34160 34164])
                            ("body" variable nil (reparse-symbol function_parameters) [34166 34170]))                          )
                        (reparse-symbol indented_block_body) [34136 34743])
                    ("_send_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34766 34770])
                            ("method" variable nil (reparse-symbol function_parameters) [34772 34778])
                            ("url" variable nil (reparse-symbol function_parameters) [34780 34783])
                            ("body" variable nil (reparse-symbol function_parameters) [34785 34789])
                            ("headers" variable nil (reparse-symbol function_parameters) [34791 34798]))                          )
                        (reparse-symbol indented_block_body) [34748 35389])
                    ("getresponse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35410 35414])
                            ("buffering" variable nil (reparse-symbol function_parameters) [35416 35425]))                          )
                        (reparse-symbol indented_block_body) [35394 37298]))                  
                :type "class")
                nil [22794 37298])
            ("HTTP" type
               (:members 
                  ( ("\"Compatibility class with httplib.py from 1.5.\"" code nil (reparse-symbol indented_block_body) [37316 37363])
                    ("_http_vsn" variable nil (reparse-symbol indented_block_body) [37369 37383])
                    ("_http_vsn_str" variable nil (reparse-symbol indented_block_body) [37388 37414])
                    ("debuglevel" variable nil (reparse-symbol indented_block_body) [37420 37434])
                    ("_connection_class" variable nil (reparse-symbol indented_block_body) [37440 37474])
                    ("__init__" function
                       (:suite 
                          ( ("\"Provide a default host, since the superclass requires one.\"" code nil (reparse-symbol indented_block_body) [37541 37601])
                            ("if" code nil (reparse-symbol indented_block_body) [37674 37712])
                            ("self" code nil (reparse-symbol indented_block_body) [37934 37989]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37493 37497])
                            ("host" variable nil (reparse-symbol function_parameters) [37499 37503])
                            ("port" variable nil (reparse-symbol function_parameters) [37508 37512])
                            ("strict" variable nil (reparse-symbol function_parameters) [37519 37525]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37480 37990])
                    ("_setup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38006 38010])
                            ("conn" variable nil (reparse-symbol function_parameters) [38012 38016]))                          )
                        (reparse-symbol indented_block_body) [37995 38416])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38433 38437])
                            ("host" variable nil (reparse-symbol function_parameters) [38439 38443])
                            ("port" variable nil (reparse-symbol function_parameters) [38450 38454]))                          )
                        (reparse-symbol indented_block_body) [38421 38649])
                    ("getfile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38666 38670]))                          )
                        (reparse-symbol indented_block_body) [38654 38776])
                    ("getreply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38794 38798])
                            ("buffering" variable nil (reparse-symbol function_parameters) [38800 38809]))                          
                        :documentation "Compat definition since superclass does not define it.

        Returns a tuple consisting of:
        - server status code (e.g. '200' if all goes well)
        - server \"reason\" corresponding to status code
        - any RFC822 headers in the response from the server
        ")
                        (reparse-symbol indented_block_body) [38781 40071])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40086 40090]))                          )
                        (reparse-symbol indented_block_body) [40076 40434]))                  
                :type "class")
                nil [37300 40434])
            ("try" code nil nil [40435 42630])
            ("HTTPException" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [42794 42798]))                  
                :type "class")
                nil [42632 42799])
            ("NotConnected" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [42839 42843]))                  
                :type "class")
                nil [42800 42844])
            ("InvalidURL" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [42882 42886]))                  
                :type "class")
                nil [42845 42887])
            ("UnknownProtocol" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [42967 42987])
                            ("self" variable nil (reparse-symbol indented_block_body) [42996 43018]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42943 42947])
                            ("version" variable nil (reparse-symbol function_parameters) [42949 42956]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42930 43019]))                  
                :type "class")
                nil [42888 43019])
            ("UnknownTransferEncoding" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [43070 43074]))                  
                :type "class")
                nil [43020 43075])
            ("UnimplementedFileMode" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [43124 43128]))                  
                :type "class")
                nil [43076 43129])
            ("IncompleteRead" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [43223 43243])
                            ("self" variable nil (reparse-symbol indented_block_body) [43252 43274])
                            ("self" variable nil (reparse-symbol indented_block_body) [43283 43307]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43184 43188])
                            ("partial" variable nil (reparse-symbol function_parameters) [43190 43197])
                            ("expected" variable nil (reparse-symbol function_parameters) [43199 43207]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43171 43308])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43325 43329]))                          )
                        (reparse-symbol indented_block_body) [43312 43530])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43546 43550]))                          )
                        (reparse-symbol indented_block_body) [43534 43579]))                  
                :type "class")
                nil [43130 43579])
            ("ImproperConnectionState" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [43630 43634]))                  
                :type "class")
                nil [43580 43635])
            ("CannotSendRequest" type
               (:superclasses ("ImproperConnectionState")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [43690 43694]))                  
                :type "class")
                nil [43636 43695])
            ("CannotSendHeader" type
               (:superclasses ("ImproperConnectionState")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [43749 43753]))                  
                :type "class")
                nil [43696 43754])
            ("ResponseNotReady" type
               (:superclasses ("ImproperConnectionState")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [43808 43812]))                  
                :type "class")
                nil [43755 43813])
            ("BadStatusLine" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [43888 43931])
                            ("self" variable nil (reparse-symbol indented_block_body) [43939 43956])
                            ("self" variable nil (reparse-symbol indented_block_body) [43965 43981]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43867 43871])
                            ("line" variable nil (reparse-symbol function_parameters) [43873 43877]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43854 43982]))                  
                :type "class")
                nil [43814 43982])
            ("LineTooLong" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HTTPException" code nil (reparse-symbol indented_block_body) [44060 44191]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44034 44038])
                            ("line_type" variable nil (reparse-symbol function_parameters) [44040 44049]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44021 44192]))                  
                :type "class")
                nil [43983 44192])
            ("error" variable nil nil [44223 44244])
            ("LineAndFileWrapper" type
               (:documentation "A limited file-like object for HTTP/0.9 responses."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [44635 44652])
                            ("self" variable nil (reparse-symbol indented_block_body) [44661 44678])
                            ("self" variable nil (reparse-symbol indented_block_body) [44687 44710])
                            ("self" variable nil (reparse-symbol indented_block_body) [44719 44740])
                            ("self" variable nil (reparse-symbol indented_block_body) [44749 44776]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44608 44612])
                            ("line" variable nil (reparse-symbol function_parameters) [44614 44618])
                            ("file" variable nil (reparse-symbol function_parameters) [44620 44624]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44595 44777])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44798 44802])
                            ("attr" variable nil (reparse-symbol function_parameters) [44804 44808]))                          )
                        (reparse-symbol indented_block_body) [44782 44852])
                    ("_done" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44867 44871]))                          )
                        (reparse-symbol indented_block_body) [44857 45190])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45204 45208])
                            ("amt" variable nil (reparse-symbol function_parameters) [45210 45213]))                          )
                        (reparse-symbol indented_block_body) [45195 45895])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45913 45917]))                          )
                        (reparse-symbol indented_block_body) [45900 46105])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46124 46128])
                            ("size" variable nil (reparse-symbol function_parameters) [46130 46134]))                          )
                        (reparse-symbol indented_block_body) [46110 46452]))                  
                :type "class")
                nil [44246 46452]))          
    :file "httplib.py"
    :pointmax 46452
    :fsize 46451
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "urllib.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Open an arbitrary URL.

See the following document for more info on URLs:
\"Names and Addresses, URIs, URLs, URNs, URCs\", at
http://www.w3.org/pub/WWW/Addressing/Overview.html

See also the HTTP spec (from which the error codes are derived):
\"HTTP - Hypertext Transfer Protocol\", at
http://www.w3.org/pub/WWW/Protocols/

Related standards and specs:
- RFC1808: the \"relative URL\" spec. (authoritative status)
- RFC1738 - the \"URL standard\". (authoritative status)
- RFC1630 - the \"URI spec\". (informational status)

The object returned by URLopener().open(file) will differ per
protocol.  All you know is that is has methods read(), readline(),
readlines(), fileno(), close() and info().  The read*(), fileno()
and close() methods work like those of open files.
The info() method returns a mimetools.Message object which can be
used to query various info about the object, if available.
(mimetools.Message objects are queried with the getheader() method.)
\"\"\"" code nil nil [1 962])
            ("string" include nil nil [964 977])
            ("socket" include nil nil [978 991])
            ("os" include nil nil [992 1001])
            ("time" include nil nil [1002 1013])
            ("sys" include nil nil [1014 1024])
            ("base64" include nil nil [1025 1038])
            ("urlparse" include nil nil [1040 1080])
            ("__all__" variable nil nil [1082 1532])
            ("__version__" variable nil nil [1534 1554])
            ("MAXFTPCACHE" variable nil nil [1604 1620])
            ("if" code nil nil [1697 2270])
            ("_urlopener" variable nil nil [2534 2551])
            ("urlopen" function
               (:documentation "Create a file-like object for the specified URL to read from."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [2564 2567])
                    ("data" variable nil (reparse-symbol function_parameters) [2569 2573])
                    ("proxies" variable nil (reparse-symbol function_parameters) [2580 2587]))                  )
                nil [2552 3151])
            ("urlretrieve" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [3167 3170])
                ("filename" variable nil (reparse-symbol function_parameters) [3172 3180])
                ("reporthook" variable nil (reparse-symbol function_parameters) [3187 3197])
                ("data" variable nil (reparse-symbol function_parameters) [3204 3208]))              ) nil [3151 3363])
            ("urlcleanup" function nil nil [3363 3476])
            ("try" code nil nil [3493 3570])
            ("ContentTooShortError" type
               (:superclasses ("IOError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("IOError" code nil (reparse-symbol indented_block_body) [3728 3759])
                            ("self" variable nil (reparse-symbol indented_block_body) [3768 3790]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3695 3699])
                            ("message" variable nil (reparse-symbol function_parameters) [3701 3708])
                            ("content" variable nil (reparse-symbol function_parameters) [3710 3717]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3682 3791]))                  
                :type "class")
                nil [3641 3791])
            ("ftpcache" variable nil nil [3792 3805])
            ("URLopener" type
               (:documentation "Class to open URLs.
    This is a class rather than just a subroutine because we may need
    more than one set of global protocol-specific options.
    Note -- this is a base class for those who don't want the
    automatic handling of errors type 302 (relocated) and 401
    (authorization needed)."
                :members 
                  ( ("__tempfiles" variable nil (reparse-symbol indented_block_body) [4139 4157])
                    ("version" code nil (reparse-symbol indented_block_body) [4163 4205])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [4279 4334])
                            ("assert" code nil (reparse-symbol indented_block_body) [4342 4405])
                            ("self" variable nil (reparse-symbol indented_block_body) [4414 4436])
                            ("self" variable nil (reparse-symbol indented_block_body) [4445 4481])
                            ("self" variable nil (reparse-symbol indented_block_body) [4490 4528])
                            ("self" variable nil (reparse-symbol indented_block_body) [4537 4585])
                            ("self" variable nil (reparse-symbol indented_block_body) [4594 4615])
                            ("self" variable nil (reparse-symbol indented_block_body) [4624 4649])
                            ("self" variable nil (reparse-symbol indented_block_body) [4674 4695])
                            ("self" variable nil (reparse-symbol indented_block_body) [5016 5040]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4242 4246])
                            ("proxies" variable nil (reparse-symbol function_parameters) [4248 4255])
                            ("x509" variable nil (reparse-symbol function_parameters) [4262 4268]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4229 5041])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5277 5281]))                          )
                        (reparse-symbol indented_block_body) [5265 5305])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5320 5324]))                          )
                        (reparse-symbol indented_block_body) [5310 5350])
                    ("cleanup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5367 5371]))                          )
                        (reparse-symbol indented_block_body) [5355 5819])
                    ("addheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5838 5842])
                            ("args" variable nil (reparse-symbol function_parameters) [5844 5849]))                          
                        :documentation "Add a header to be used by the HTTP interface only
        e.g. u.addheader('Accept', 'sound/basic')")
                        (reparse-symbol indented_block_body) [5824 6004])
                    ("open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6043 6047])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [6049 6056])
                            ("data" variable nil (reparse-symbol function_parameters) [6058 6062]))                          
                        :documentation "Use URLopener().open(file) instead of open(file, 'r').")
                        (reparse-symbol indented_block_body) [6034 7496])
                    ("open_unknown" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7518 7522])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [7524 7531])
                            ("data" variable nil (reparse-symbol function_parameters) [7533 7537]))                          
                        :documentation "Overridable interface to open unknown URL type.")
                        (reparse-symbol indented_block_body) [7501 7709])
                    ("open_unknown_proxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7737 7741])
                            ("proxy" variable nil (reparse-symbol function_parameters) [7743 7748])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [7750 7757])
                            ("data" variable nil (reparse-symbol function_parameters) [7759 7763]))                          
                        :documentation "Overridable interface to open unknown URL type.")
                        (reparse-symbol indented_block_body) [7714 7947])
                    ("retrieve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7990 7994])
                            ("url" variable nil (reparse-symbol function_parameters) [7996 7999])
                            ("filename" variable nil (reparse-symbol function_parameters) [8001 8009])
                            ("reporthook" variable nil (reparse-symbol function_parameters) [8016 8026])
                            ("data" variable nil (reparse-symbol function_parameters) [8033 8037]))                          
                        :documentation "retrieve(url) returns (filename, headers) for a local object
        or (tempfilename, headers) for a remote object.")
                        (reparse-symbol indented_block_body) [7977 10414])
                    ("open_http" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10505 10509])
                            ("url" variable nil (reparse-symbol function_parameters) [10511 10514])
                            ("data" variable nil (reparse-symbol function_parameters) [10516 10520]))                          
                        :documentation "Use HTTP protocol.")
                        (reparse-symbol indented_block_body) [10491 13413])
                    ("http_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13433 13437])
                            ("url" variable nil (reparse-symbol function_parameters) [13439 13442])
                            ("fp" variable nil (reparse-symbol function_parameters) [13444 13446])
                            ("errcode" variable nil (reparse-symbol function_parameters) [13448 13455])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [13457 13463])
                            ("headers" variable nil (reparse-symbol function_parameters) [13465 13472])
                            ("data" variable nil (reparse-symbol function_parameters) [13474 13478]))                          
                        :documentation "Handle http errors.
        Derived class can override this, or provide specific handlers
        named http_error_DDD where DDD is the 3-digit error code.")
                        (reparse-symbol indented_block_body) [13418 14135])
                    ("http_error_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14163 14167])
                            ("url" variable nil (reparse-symbol function_parameters) [14169 14172])
                            ("fp" variable nil (reparse-symbol function_parameters) [14174 14176])
                            ("errcode" variable nil (reparse-symbol function_parameters) [14178 14185])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [14187 14193])
                            ("headers" variable nil (reparse-symbol function_parameters) [14195 14202]))                          
                        :documentation "Default error handler: close the connection and raise IOError.")
                        (reparse-symbol indented_block_body) [14140 14365])
                    ("if" code nil (reparse-symbol indented_block_body) [14370 17639])
                    ("open_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17658 17662])
                            ("url" variable nil (reparse-symbol function_parameters) [17664 17667]))                          
                        :documentation "Use local file or FTP depending on form of URL.")
                        (reparse-symbol indented_block_body) [17644 18055])
                    ("open_local_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18080 18084])
                            ("url" variable nil (reparse-symbol function_parameters) [18086 18089]))                          
                        :documentation "Use local file.")
                        (reparse-symbol indented_block_body) [18060 19595])
                    ("open_ftp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19613 19617])
                            ("url" variable nil (reparse-symbol function_parameters) [19619 19622]))                          
                        :documentation "Use FTP protocol.")
                        (reparse-symbol indented_block_body) [19600 22058])
                    ("open_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22077 22081])
                            ("url" variable nil (reparse-symbol function_parameters) [22083 22086])
                            ("data" variable nil (reparse-symbol function_parameters) [22088 22092]))                          
                        :documentation "Use \"data\" URL.")
                        (reparse-symbol indented_block_body) [22063 23724]))                  
                :type "class")
                nil [3806 23724])
            ("FancyURLopener" type
               (:documentation "Derived class with handlers for errors we can handle (perhaps)."
                :superclasses ("URLopener")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("URLopener" code nil (reparse-symbol indented_block_body) [23883 23924])
                            ("self" variable nil (reparse-symbol indented_block_body) [23933 23953])
                            ("self" variable nil (reparse-symbol indented_block_body) [23962 23976])
                            ("self" variable nil (reparse-symbol indented_block_body) [23985 24003]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23851 23855])
                            ("args" variable nil (reparse-symbol function_parameters) [23857 23862])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23864 23872]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23838 24004])
                    ("http_error_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24032 24036])
                            ("url" variable nil (reparse-symbol function_parameters) [24038 24041])
                            ("fp" variable nil (reparse-symbol function_parameters) [24043 24045])
                            ("errcode" variable nil (reparse-symbol function_parameters) [24047 24054])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [24056 24062])
                            ("headers" variable nil (reparse-symbol function_parameters) [24064 24071]))                          
                        :documentation "Default error handling -- don't raise an exception.")
                        (reparse-symbol indented_block_body) [24009 24203])
                    ("http_error_302" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24227 24231])
                            ("url" variable nil (reparse-symbol function_parameters) [24233 24236])
                            ("fp" variable nil (reparse-symbol function_parameters) [24238 24240])
                            ("errcode" variable nil (reparse-symbol function_parameters) [24242 24249])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [24251 24257])
                            ("headers" variable nil (reparse-symbol function_parameters) [24259 24266])
                            ("data" variable nil (reparse-symbol function_parameters) [24268 24272]))                          
                        :documentation "Error 302 -- relocated (temporarily).")
                        (reparse-symbol indented_block_body) [24208 24879])
                    ("redirect_internal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24906 24910])
                            ("url" variable nil (reparse-symbol function_parameters) [24912 24915])
                            ("fp" variable nil (reparse-symbol function_parameters) [24917 24919])
                            ("errcode" variable nil (reparse-symbol function_parameters) [24921 24928])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [24930 24936])
                            ("headers" variable nil (reparse-symbol function_parameters) [24938 24945])
                            ("data" variable nil (reparse-symbol function_parameters) [24947 24951]))                          )
                        (reparse-symbol indented_block_body) [24884 25823])
                    ("http_error_301" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25847 25851])
                            ("url" variable nil (reparse-symbol function_parameters) [25853 25856])
                            ("fp" variable nil (reparse-symbol function_parameters) [25858 25860])
                            ("errcode" variable nil (reparse-symbol function_parameters) [25862 25869])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [25871 25877])
                            ("headers" variable nil (reparse-symbol function_parameters) [25879 25886])
                            ("data" variable nil (reparse-symbol function_parameters) [25888 25892]))                          
                        :documentation "Error 301 -- also relocated (permanently).")
                        (reparse-symbol indented_block_body) [25828 26033])
                    ("http_error_303" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26057 26061])
                            ("url" variable nil (reparse-symbol function_parameters) [26063 26066])
                            ("fp" variable nil (reparse-symbol function_parameters) [26068 26070])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26072 26079])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26081 26087])
                            ("headers" variable nil (reparse-symbol function_parameters) [26089 26096])
                            ("data" variable nil (reparse-symbol function_parameters) [26098 26102]))                          
                        :documentation "Error 303 -- also relocated (essentially identical to 302).")
                        (reparse-symbol indented_block_body) [26038 26260])
                    ("http_error_307" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26284 26288])
                            ("url" variable nil (reparse-symbol function_parameters) [26290 26293])
                            ("fp" variable nil (reparse-symbol function_parameters) [26295 26297])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26299 26306])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26308 26314])
                            ("headers" variable nil (reparse-symbol function_parameters) [26316 26323])
                            ("data" variable nil (reparse-symbol function_parameters) [26325 26329]))                          
                        :documentation "Error 307 -- relocated, but turn POST into error.")
                        (reparse-symbol indented_block_body) [26265 26598])
                    ("http_error_401" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26622 26626])
                            ("url" variable nil (reparse-symbol function_parameters) [26628 26631])
                            ("fp" variable nil (reparse-symbol function_parameters) [26633 26635])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26637 26644])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26646 26652])
                            ("headers" variable nil (reparse-symbol function_parameters) [26654 26661])
                            ("data" variable nil (reparse-symbol function_parameters) [26663 26667]))                          
                        :documentation "Error 401 -- authentication required.
        This function supports Basic authentication only.")
                        (reparse-symbol indented_block_body) [26603 27630])
                    ("http_error_407" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27654 27658])
                            ("url" variable nil (reparse-symbol function_parameters) [27660 27663])
                            ("fp" variable nil (reparse-symbol function_parameters) [27665 27667])
                            ("errcode" variable nil (reparse-symbol function_parameters) [27669 27676])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [27678 27684])
                            ("headers" variable nil (reparse-symbol function_parameters) [27686 27693])
                            ("data" variable nil (reparse-symbol function_parameters) [27695 27699]))                          
                        :documentation "Error 407 -- proxy authentication required.
        This function supports Basic authentication only.")
                        (reparse-symbol indented_block_body) [27635 28678])
                    ("retry_proxy_http_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28715 28719])
                            ("url" variable nil (reparse-symbol function_parameters) [28721 28724])
                            ("realm" variable nil (reparse-symbol function_parameters) [28726 28731])
                            ("data" variable nil (reparse-symbol function_parameters) [28733 28737]))                          )
                        (reparse-symbol indented_block_body) [28683 29427])
                    ("retry_proxy_https_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29465 29469])
                            ("url" variable nil (reparse-symbol function_parameters) [29471 29474])
                            ("realm" variable nil (reparse-symbol function_parameters) [29476 29481])
                            ("data" variable nil (reparse-symbol function_parameters) [29483 29487]))                          )
                        (reparse-symbol indented_block_body) [29432 30181])
                    ("retry_http_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30212 30216])
                            ("url" variable nil (reparse-symbol function_parameters) [30218 30221])
                            ("realm" variable nil (reparse-symbol function_parameters) [30223 30228])
                            ("data" variable nil (reparse-symbol function_parameters) [30230 30234]))                          )
                        (reparse-symbol indented_block_body) [30186 30686])
                    ("retry_https_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30718 30722])
                            ("url" variable nil (reparse-symbol function_parameters) [30724 30727])
                            ("realm" variable nil (reparse-symbol function_parameters) [30729 30734])
                            ("data" variable nil (reparse-symbol function_parameters) [30736 30740]))                          )
                        (reparse-symbol indented_block_body) [30691 31193])
                    ("get_user_passwd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31218 31222])
                            ("host" variable nil (reparse-symbol function_parameters) [31224 31228])
                            ("realm" variable nil (reparse-symbol function_parameters) [31230 31235])
                            ("clear_cache" variable nil (reparse-symbol function_parameters) [31237 31248]))                          )
                        (reparse-symbol indented_block_body) [31198 31613])
                    ("prompt_user_passwd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31641 31645])
                            ("host" variable nil (reparse-symbol function_parameters) [31647 31651])
                            ("realm" variable nil (reparse-symbol function_parameters) [31653 31658]))                          
                        :documentation "Override this in a GUI environment!")
                        (reparse-symbol indented_block_body) [31618 32117]))                  
                :type "class")
                nil [23726 32117])
            ("_localhost" variable nil nil [32140 32157])
            ("localhost" function (:documentation "Return the IP address of the magic hostname 'localhost'.") nil [32158 32368])
            ("_thishost" variable nil nil [32369 32385])
            ("thishost" function (:documentation "Return the IP address of the current host.") nil [32386 32586])
            ("_ftperrors" variable nil nil [32587 32604])
            ("ftperrors" function (:documentation "Return the set of errors raised by the FTP class.") nil [32605 32814])
            ("_noheaders" variable nil nil [32815 32832])
            ("noheaders" function (:documentation "Return an empty mimetools.Message object.") nil [32833 33236])
            ("ftpwrapper" type
               (:documentation "Class used by open_ftp() for cache of open FTP connections."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [33501 33517])
                            ("self" variable nil (reparse-symbol indented_block_body) [33526 33546])
                            ("self" variable nil (reparse-symbol indented_block_body) [33555 33571])
                            ("self" variable nil (reparse-symbol indented_block_body) [33580 33596])
                            ("self" variable nil (reparse-symbol indented_block_body) [33605 33621])
                            ("self" variable nil (reparse-symbol indented_block_body) [33630 33652])
                            ("self" variable nil (reparse-symbol indented_block_body) [33661 33678])
                            ("self" variable nil (reparse-symbol indented_block_body) [33687 33714])
                            ("self" code nil (reparse-symbol indented_block_body) [33723 33734]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33363 33367])
                            ("user" variable nil (reparse-symbol function_parameters) [33369 33373])
                            ("passwd" variable nil (reparse-symbol function_parameters) [33375 33381])
                            ("host" variable nil (reparse-symbol function_parameters) [33383 33387])
                            ("port" variable nil (reparse-symbol function_parameters) [33389 33393])
                            ("dirs" variable nil (reparse-symbol function_parameters) [33395 33399])
                            ("timeout" variable nil (reparse-symbol function_parameters) [33418 33425])
                            ("persistent" variable nil (reparse-symbol function_parameters) [33475 33485]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33350 33735])
                    ("init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33749 33753]))                          )
                        (reparse-symbol indented_block_body) [33740 34000])
                    ("retrfile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34018 34022])
                            ("file" variable nil (reparse-symbol function_parameters) [34024 34028])
                            ("type" variable nil (reparse-symbol function_parameters) [34030 34034]))                          )
                        (reparse-symbol indented_block_body) [34005 35600])
                    ("endtransfer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35621 35625]))                          )
                        (reparse-symbol indented_block_body) [35605 35785])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35800 35804]))                          )
                        (reparse-symbol indented_block_body) [35790 35899])
                    ("file_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35919 35923]))                          )
                        (reparse-symbol indented_block_body) [35904 36064])
                    ("real_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36084 36088]))                          )
                        (reparse-symbol indented_block_body) [36069 36205]))                  
                :type "class")
                nil [33257 36205])
            ("addbase" type
               (:documentation "Base class for addinfo and addclosehook."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [36309 36321])
                            ("self" variable nil (reparse-symbol indented_block_body) [36330 36354])
                            ("self" variable nil (reparse-symbol indented_block_body) [36363 36395])
                            ("if" code nil (reparse-symbol indented_block_body) [36404 36473])
                            ("if" code nil (reparse-symbol indented_block_body) [36481 36606])
                            ("if" code nil (reparse-symbol indented_block_body) [36614 36774]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36290 36294])
                            ("fp" variable nil (reparse-symbol function_parameters) [36296 36298]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36277 36774])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36792 36796]))                          )
                        (reparse-symbol indented_block_body) [36779 36933])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36948 36952]))                          )
                        (reparse-symbol indented_block_body) [36938 37125]))                  
                :type "class")
                nil [36206 37125])
            ("addclosehook" type
               (:documentation "Class to add a close hook to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [37267 37293])
                            ("self" variable nil (reparse-symbol indented_block_body) [37302 37328])
                            ("self" variable nil (reparse-symbol indented_block_body) [37337 37361]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37226 37230])
                            ("fp" variable nil (reparse-symbol function_parameters) [37232 37234])
                            ("closehook" variable nil (reparse-symbol function_parameters) [37236 37245])
                            ("hookargs" variable nil (reparse-symbol function_parameters) [37247 37256]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37213 37362])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37377 37381]))                          )
                        (reparse-symbol indented_block_body) [37367 37549]))                  
                :type "class")
                nil [37126 37549])
            ("addinfo" type
               (:documentation "class to add an info() method to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [37677 37703])
                            ("self" variable nil (reparse-symbol indented_block_body) [37712 37734]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37649 37653])
                            ("fp" variable nil (reparse-symbol function_parameters) [37655 37657])
                            ("headers" variable nil (reparse-symbol function_parameters) [37659 37666]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37636 37735])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37749 37753]))                          )
                        (reparse-symbol indented_block_body) [37740 37784]))                  
                :type "class")
                nil [37550 37784])
            ("addinfourl" type
               (:documentation "class to add info() and geturl() methods to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [37942 37968])
                            ("self" variable nil (reparse-symbol indented_block_body) [37977 37999])
                            ("self" variable nil (reparse-symbol indented_block_body) [38008 38022])
                            ("self" variable nil (reparse-symbol indented_block_body) [38031 38047]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37898 37902])
                            ("fp" variable nil (reparse-symbol function_parameters) [37904 37906])
                            ("headers" variable nil (reparse-symbol function_parameters) [37908 37915])
                            ("url" variable nil (reparse-symbol function_parameters) [37917 37920])
                            ("code" variable nil (reparse-symbol function_parameters) [37922 37926]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37885 38048])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38062 38066]))                          )
                        (reparse-symbol indented_block_body) [38053 38097])
                    ("getcode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38114 38118]))                          )
                        (reparse-symbol indented_block_body) [38102 38146])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38162 38166]))                          )
                        (reparse-symbol indented_block_body) [38151 38193]))                  
                :type "class")
                nil [37785 38193])
            ("try" code nil nil [38932 39076])
            ("toBytes" function
               (:documentation "toBytes(u\"URL\") --> 'URL'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [39089 39092]))                  )
                nil [39077 39460])
            ("unwrap" function
               (:documentation "unwrap('<URL:type://host/path>') --> 'type://host/path'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [39472 39475]))                  )
                nil [39461 39705])
            ("_typeprog" variable nil nil [39706 39722])
            ("splittype" function
               (:documentation "splittype('type:opaquestring') --> 'type', 'opaquestring'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [39737 39740]))                  )
                nil [39723 40076])
            ("_hostprog" variable nil nil [40077 40093])
            ("splithost" function
               (:documentation "splithost('//host[:port]/path') --> 'host[:port]', '/path'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [40108 40111]))                  )
                nil [40094 40541])
            ("_userprog" variable nil nil [40542 40558])
            ("splituser" function
               (:documentation "splituser('user[:passwd]@host[:port]') --> 'user[:passwd]', 'host[:port]'."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [40573 40577]))                  )
                nil [40559 40872])
            ("_passwdprog" variable nil nil [40873 40891])
            ("splitpasswd" function
               (:documentation "splitpasswd('user:passwd') -> 'user', 'passwd'."
                :arguments 
                  ( ("user" variable nil (reparse-symbol function_parameters) [40908 40912]))                  )
                nil [40892 41196])
            ("_portprog" variable nil nil [41240 41256])
            ("splitport" function
               (:documentation "splitport('host:port') --> 'host', 'port'."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [41271 41275]))                  )
                nil [41257 41542])
            ("_nportprog" variable nil nil [41543 41560])
            ("splitnport" function
               (:documentation "Split host and port, returning numeric port.
    Return given default port if no ':' found; defaults to -1.
    Return numerical port if a valid number are found after ':'.
    Return None if ':' but not a valid number."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [41576 41580])
                    ("defport" variable nil (reparse-symbol function_parameters) [41582 41589]))                  )
                nil [41561 42230])
            ("_queryprog" variable nil nil [42231 42248])
            ("splitquery" function
               (:documentation "splitquery('/path?query') --> '/path', 'query'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [42264 42267]))                  )
                nil [42249 42541])
            ("_tagprog" variable nil nil [42542 42557])
            ("splittag" function
               (:documentation "splittag('/path#tag') --> '/path', 'tag'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [42571 42574]))                  )
                nil [42558 42833])
            ("splitattr" function
               (:documentation "splitattr('/path;attr1=value1;attr2=value2;...') ->
        '/path', ['attr1=value1', 'attr2=value2', ...]."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [42848 42851]))                  )
                nil [42834 43030])
            ("_valueprog" variable nil nil [43031 43048])
            ("splitvalue" function
               (:documentation "splitvalue('attr=value') --> 'attr', 'value'."
                :arguments 
                  ( ("attr" variable nil (reparse-symbol function_parameters) [43064 43068]))                  )
                nil [43049 43341])
            ("_hexdig" variable nil nil [43534 43568])
            ("_hextochr" variable nil nil [43569 43666])
            ("unquote" function
               (:documentation "unquote('abc%20def') -> 'abc def'."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [43680 43681]))                  )
                nil [43668 44062])
            ("unquote_plus" function
               (:documentation "unquote('%7e/abc+def') -> '~/abc def'"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [44080 44081]))                  )
                nil [44063 44182])
            ("always_safe" variable nil nil [44183 44305])
            ("_safe_map" variable nil nil [44306 44320])
            ("for" code nil nil [44321 44460])
            ("_safe_quoters" variable nil nil [44460 44478])
            ("quote" function
               (:documentation "quote('abc def') -> 'abc%20def'

    Each part of a URL, e.g. the path info, the query, etc., has a
    different set of reserved characters that must be quoted.

    RFC 2396 Uniform Resource Identifiers (URI): Generic Syntax lists
    the following reserved characters.

    reserved    = \";\" | \"/\" | \"?\" | \":\" | \"@\" | \"&\" | \"=\" | \"+\" |
                  \"$\" | \",\"

    Each of these characters is reserved in some component of a URL,
    but not necessarily in all of them.

    By default, the quote function is intended for quoting the path
    section of a URL.  Thus, it will not encode '/'.  This character
    is reserved, but in typical usage the quote function is being
    called on a path where the existing slash characters are used as
    reserved characters.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [44490 44491])
                    ("safe" variable nil (reparse-symbol function_parameters) [44493 44497]))                  )
                nil [44480 45820])
            ("quote_plus" function
               (:documentation "Quote the query fragment of a URL; replacing ' ' with '+'"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [45836 45837])
                    ("safe" variable nil (reparse-symbol function_parameters) [45839 45843]))                  )
                nil [45821 46028])
            ("urlencode" function
               (:documentation "Encode a sequence of two-element tuples or dictionary into a URL query string.

    If any values in the query arg are sequences and doseq is true, each
    sequence element is converted to a separate parameter.

    If the query arg is a sequence of two-element tuples, the order of the
    parameters in the output will match the order of parameters in the
    input.
    "
                :arguments 
                  ( ("query" variable nil (reparse-symbol function_parameters) [46043 46048])
                    ("doseq" variable nil (reparse-symbol function_parameters) [46050 46055]))                  )
                nil [46029 48456])
            ("getproxies_environment" function (:documentation "Return a dictionary of scheme -> proxy server URL mappings.

    Scan the environment for variables named <scheme>_proxy;
    this seems to be the standard convention.  If you need a
    different way, you can pass a proxies dictionary to the
    [Fancy]URLopener constructor.

    ") nil [48474 48987])
            ("proxy_bypass_environment" function
               (:documentation "Test if proxies should not be used for a particular host.

    Checks the environment for a variable named no_proxy, which should
    be a list of DNS suffixes separated by commas, or '*' for all hosts.
    "
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [49017 49021]))                  )
                nil [48988 49762])
            ("if" code nil nil [49764 57175])
            ("test1" function nil nil [57214 57504])
            ("reporthook" function (:arguments 
              ( ("blocknum" variable nil (reparse-symbol function_parameters) [57521 57529])
                ("blocksize" variable nil (reparse-symbol function_parameters) [57531 57540])
                ("totalsize" variable nil (reparse-symbol function_parameters) [57542 57551]))              ) nil [57506 57696]))          
    :file "urllib.py"
    :pointmax 57696
    :fsize 57695
    :lastmodtime '(21060 39147 0 0)
    :unmatched-syntax '((NAME 44384 . 44393) (IF 44401 . 44403) (ELSE 44435 . 44439))
    )
   (semanticdb-table "hashlib.py"
    :major-mode 'python-mode
    :tags 
        '( ("__doc__" variable nil nil [122 2057])
            ("__always_supported" variable nil nil [2169 2245])
            ("algorithms" variable nil nil [2247 2278])
            ("__all__" code nil nil [2280 2332])
            ("__get_builtin_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [2365 2369]))              ) nil [2335 3203])
            ("__get_openssl_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [3235 3239]))              ) nil [3205 3612])
            ("__py_new" function
               (:documentation "new(name, string='') - Return a new hashing object using the named algorithm;
    optionally initialized with a string.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3627 3631])
                    ("string" variable nil (reparse-symbol function_parameters) [3633 3639]))                  )
                nil [3614 3831])
            ("__hash_new" function
               (:documentation "new(name, string='') - Return a new hashing object using the named algorithm;
    optionally initialized with a string.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3848 3852])
                    ("string" variable nil (reparse-symbol function_parameters) [3854 3860]))                  )
                nil [3833 4393])
            ("try" code nil nil [4395 4566])
            ("for" code nil nil [4567 4894])
            ("del" code nil nil [4914 4961])
            ("del" code nil nil [4962 5013]))          
    :file "hashlib.py"
    :pointmax 5014
    :fsize 5013
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "re.py"
    :major-mode 'python-mode
    :tags 
        '( ("r\"\"\"Support for regular expressions (RE).

This module provides regular expression matching operations similar to
those found in Perl.  It supports both 8-bit and Unicode strings; both
the pattern and the strings being processed can contain null bytes and
characters outside the US ASCII range.

Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like \"A\", \"a\", or \"0\", are the simplest
regular expressions; they simply match themselves.  You can
concatenate ordinary characters, so last matches the string 'last'.

The special characters are:
    \".\"      Matches any character except a newline.
    \"^\"      Matches the start of the string.
    \"$\"      Matches the end of the string or just before the newline at
             the end of the string.
    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.
    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    \"\\\\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A \"^\" as the first character indicates a complementing set.
    \"|\"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?iLmsux) Set the I, L, M, S, U, or X flag for the RE (see below).
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ... matches next, but doesn't consume the string.
    (?!...)  Matches if ... doesn't match next.
    (?<=...) Matches if preceded by ... (must be fixed length).
    (?<!...) Matches if not preceded by ... (must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.

The special sequences consist of \"\\\\\" and a character from the list
below.  If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \\number  Matches the contents of the group of the same number.
    \\A       Matches only at the start of the string.
    \\Z       Matches only at the end of the string.
    \\b       Matches the empty string, but only at the start or end of a word.
    \\B       Matches the empty string, but not at the start or end of a word.
    \\d       Matches any decimal digit; equivalent to the set [0-9].
    \\D       Matches any non-digit character; equivalent to the set [^0-9].
    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v].
    \\S       Matches any non-whitespace character; equiv. to [^ \\t\\n\\r\\f\\v].
    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_].
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \\W       Matches the complement of \\w.
    \\\\       Matches a literal backslash.

This module exports the following functions:
    match    Match a regular expression pattern to the beginning of a string.
    search   Search a string for the presence of a pattern.
    sub      Substitute occurrences of a pattern found in a string.
    subn     Same as sub, but also return the number of substitutions made.
    split    Split a string by the occurrences of a pattern.
    findall  Find all occurrences of a pattern in a string.
    finditer Return an iterator yielding a match object for each match.
    compile  Compile a pattern into a RegexObject.
    purge    Clear the regular expression cache.
    escape   Backslash all non-alphanumerics in a string.

Some of the functions in this module takes flags as optional parameters:
    I  IGNORECASE  Perform case-insensitive matching.
    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.
    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)
                   as well as the string.
                   \"$\" matches the end of lines (before a newline) as well
                   as the end of the string.
    S  DOTALL      \".\" matches any character at all, including the newline.
    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
    U  UNICODE     Make \\w, \\W, \\b, \\B, dependent on the Unicode locale.

This module also defines an exception 'error'.

\"\"\"" code nil nil [501 5342])
            ("sys" include nil nil [5344 5354])
            ("sre_compile" include nil nil [5355 5373])
            ("sre_parse" include nil nil [5374 5390])
            ("__all__" variable nil nil [5409 5637])
            ("__version__" variable nil nil [5639 5660])
            ("I" variable nil nil [5670 5718])
            ("L" variable nil nil [5733 5773])
            ("U" variable nil nil [5804 5846])
            ("M" variable nil nil [5871 5917])
            ("S" variable nil nil [5950 5990])
            ("X" variable nil nil [6016 6058])
            ("T" variable nil nil [6146 6190])
            ("DEBUG" variable nil nil [6214 6248])
            ("error" variable nil nil [6299 6324])
            ("match" function
               (:documentation "Try to apply the pattern at the start of the string, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6427 6434])
                    ("string" variable nil (reparse-symbol function_parameters) [6436 6442])
                    ("flags" variable nil (reparse-symbol function_parameters) [6444 6449]))                  )
                nil [6417 6628])
            ("search" function
               (:documentation "Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6640 6647])
                    ("string" variable nil (reparse-symbol function_parameters) [6649 6655])
                    ("flags" variable nil (reparse-symbol function_parameters) [6657 6662]))                  )
                nil [6629 6845])
            ("sub" function
               (:documentation "Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the match object and must return
    a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6854 6861])
                    ("repl" variable nil (reparse-symbol function_parameters) [6863 6867])
                    ("string" variable nil (reparse-symbol function_parameters) [6869 6875])
                    ("count" variable nil (reparse-symbol function_parameters) [6877 6882])
                    ("flags" variable nil (reparse-symbol function_parameters) [6886 6891]))                  )
                nil [6846 7314])
            ("subn" function
               (:documentation "Return a 2-tuple containing (new_string, number).
    new_string is the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in the source
    string by the replacement repl.  number is the number of
    substitutions that were made. repl can be either a string or a
    callable; if a string, backslash escapes in it are processed.
    If it is a callable, it's passed the match object and must
    return a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7324 7331])
                    ("repl" variable nil (reparse-symbol function_parameters) [7333 7337])
                    ("string" variable nil (reparse-symbol function_parameters) [7339 7345])
                    ("count" variable nil (reparse-symbol function_parameters) [7347 7352])
                    ("flags" variable nil (reparse-symbol function_parameters) [7356 7361]))                  )
                nil [7315 7914])
            ("split" function
               (:documentation "Split the source string by the occurrences of the pattern,
    returning a list containing the resulting substrings."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7925 7932])
                    ("string" variable nil (reparse-symbol function_parameters) [7934 7940])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [7942 7950])
                    ("flags" variable nil (reparse-symbol function_parameters) [7954 7959]))                  )
                nil [7915 8151])
            ("findall" function
               (:documentation "Return a list of all non-overlapping matches in the string.

    If one or more groups are present in the pattern, return a
    list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8164 8171])
                    ("string" variable nil (reparse-symbol function_parameters) [8173 8179])
                    ("flags" variable nil (reparse-symbol function_parameters) [8181 8186]))                  )
                nil [8152 8518])
            ("if" code nil nil [8519 8878])
            ("compile" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [8891 8898])
                ("flags" variable nil (reparse-symbol function_parameters) [8900 8905]))              ) nil [8879 9018])
            ("purge" function nil nil [9019 9116])
            ("template" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9130 9137])
                ("flags" variable nil (reparse-symbol function_parameters) [9139 9144]))              ) nil [9117 9248])
            ("_alphanum" variable nil nil [9249 9341])
            ("escape" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9354 9361]))              ) nil [9343 9674])
            ("_cache" variable nil nil [9759 9770])
            ("_cache_repl" variable nil nil [9771 9787])
            ("_pattern_type" variable nil nil [9789 9837])
            ("_MAXCACHE" variable nil nil [9839 9854])
            ("_compile" function (:arguments 
              ( ("key" variable nil (reparse-symbol function_parameters) [9869 9873]))              ) nil [9856 10543])
            ("_compile_repl" function (:arguments 
              ( ("key" variable nil (reparse-symbol function_parameters) [10562 10566]))              ) nil [10544 10935])
            ("_expand" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [10948 10955])
                ("match" variable nil (reparse-symbol function_parameters) [10957 10962])
                ("template" variable nil (reparse-symbol function_parameters) [10964 10972]))              ) nil [10936 11137])
            ("_subx" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [11148 11155])
                ("template" variable nil (reparse-symbol function_parameters) [11157 11165]))              ) nil [11138 11499])
            ("copy_reg" include nil nil [11532 11547])
            ("_pickle" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [11561 11562]))              ) nil [11549 11607])
            ("copy_reg" code nil nil [11608 11657])
            ("Scanner" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("sre_constants" include nil (reparse-symbol indented_block_body) [11858 11902])
                            ("self" variable nil (reparse-symbol indented_block_body) [11911 11933])
                            ("p" variable nil (reparse-symbol indented_block_body) [11992 11998])
                            ("s" variable nil (reparse-symbol indented_block_body) [12007 12030])
                            ("s" variable nil (reparse-symbol indented_block_body) [12039 12054])
                            ("for" code nil (reparse-symbol indented_block_body) [12063 12235])
                            ("s" code nil (reparse-symbol indented_block_body) [12243 12262])
                            ("p" variable nil (reparse-symbol indented_block_body) [12271 12321])
                            ("self" variable nil (reparse-symbol indented_block_body) [12330 12367]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11825 11829])
                            ("lexicon" variable nil (reparse-symbol function_parameters) [11831 11838])
                            ("flags" variable nil (reparse-symbol function_parameters) [11840 11845]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11812 12368])
                    ("scan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12381 12385])
                            ("string" variable nil (reparse-symbol function_parameters) [12387 12393]))                          )
                        (reparse-symbol indented_block_body) [12372 12960]))                  
                :type "class")
                nil [11793 12960]))          
    :file "re.py"
    :pointmax 12960
    :fsize 12959
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "pprint.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Support to pretty-print lists, tuples, & dictionaries recursively.

Very simple, but useful, especially in debugging data structures.

Classes
-------

PrettyPrinter()
    Handle pretty-printing operations onto a stream using a configured
    set of formatting parameters.

Functions
---------

pformat()
    Format a Python object into a pretty-printed representation.

pprint()
    Pretty-print a Python object to a stream [default is sys.stdout].

saferepr()
    Generate a 'standard' repr()-like value, but protect against recursive
    data structures.

\"\"\"" code nil nil [489 1054])
            ("sys" include nil nil [1056 1074])
            ("warnings" include nil nil [1075 1090])
            ("cStringIO" include nil nil [1092 1135])
            ("__all__" variable nil nil [1137 1233])
            ("_commajoin" variable nil nil [1268 1290])
            ("_id" variable nil nil [1291 1299])
            ("_len" variable nil nil [1300 1310])
            ("_type" variable nil nil [1311 1323])
            ("pprint" function
               (:documentation "Pretty-print a Python object to a stream [default is sys.stdout]."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1337 1343])
                    ("stream" variable nil (reparse-symbol function_parameters) [1345 1351])
                    ("indent" variable nil (reparse-symbol function_parameters) [1358 1364])
                    ("width" variable nil (reparse-symbol function_parameters) [1368 1373])
                    ("depth" variable nil (reparse-symbol function_parameters) [1378 1383]))                  )
                nil [1326 1587])
            ("pformat" function
               (:documentation "Format a Python object into a pretty-printed representation."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1600 1606])
                    ("indent" variable nil (reparse-symbol function_parameters) [1608 1614])
                    ("width" variable nil (reparse-symbol function_parameters) [1618 1623])
                    ("depth" variable nil (reparse-symbol function_parameters) [1628 1633]))                  )
                nil [1588 1794])
            ("saferepr" function
               (:documentation "Version of repr() which can handle recursive data structures."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1808 1814]))                  )
                nil [1795 1935])
            ("isreadable" function
               (:documentation "Determine if saferepr(object) is readable by eval()."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [1951 1957]))                  )
                nil [1936 2069])
            ("isrecursive" function
               (:documentation "Determine if object requires a recursive representation."
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2086 2092]))                  )
                nil [2070 2208])
            ("_sorted" function (:arguments 
              ( ("iterable" variable nil (reparse-symbol function_parameters) [2221 2229]))              ) nil [2209 2475])
            ("PrettyPrinter" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Handle pretty printing operations onto a stream using a set of
        configured parameters.

        indent
            Number of spaces to indent for each level of nesting.

        width
            Attempted maximum number of columns in the output.

        depth
            The maximum depth to print out nested structures.

        stream
            The desired output stream.  If omitted (or false), the standard
            output stream available at construction will be used.

        \"\"\"" code nil (reparse-symbol indented_block_body) [2574 3078])
                            ("indent" variable nil (reparse-symbol indented_block_body) [3087 3107])
                            ("width" variable nil (reparse-symbol indented_block_body) [3116 3134])
                            ("assert" code nil (reparse-symbol indented_block_body) [3143 3184])
                            ("assert" code nil (reparse-symbol indented_block_body) [3193 3247])
                            ("assert" code nil (reparse-symbol indented_block_body) [3256 3290])
                            ("self" variable nil (reparse-symbol indented_block_body) [3299 3318])
                            ("self" variable nil (reparse-symbol indented_block_body) [3327 3358])
                            ("self" variable nil (reparse-symbol indented_block_body) [3367 3386])
                            ("if" code nil (reparse-symbol indented_block_body) [3395 3505]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2514 2518])
                            ("indent" variable nil (reparse-symbol function_parameters) [2520 2526])
                            ("width" variable nil (reparse-symbol function_parameters) [2530 2535])
                            ("depth" variable nil (reparse-symbol function_parameters) [2540 2545])
                            ("stream" variable nil (reparse-symbol function_parameters) [2552 2558]))                          
                        :documentation "Handle pretty printing operations onto a stream using a set of
        configured parameters.

        indent
            Number of spaces to indent for each level of nesting.

        width
            Attempted maximum number of columns in the output.

        depth
            The maximum depth to print out nested structures.

        stream
            The desired output stream.  If omitted (or false), the standard
            output stream available at construction will be used.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2501 3505])
                    ("pprint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3521 3525])
                            ("object" variable nil (reparse-symbol function_parameters) [3527 3533]))                          )
                        (reparse-symbol indented_block_body) [3510 3625])
                    ("pformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3642 3646])
                            ("object" variable nil (reparse-symbol function_parameters) [3648 3654]))                          )
                        (reparse-symbol indented_block_body) [3630 3760])
                    ("isrecursive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3781 3785])
                            ("object" variable nil (reparse-symbol function_parameters) [3787 3793]))                          )
                        (reparse-symbol indented_block_body) [3765 3844])
                    ("isreadable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3864 3868])
                            ("object" variable nil (reparse-symbol function_parameters) [3870 3876]))                          )
                        (reparse-symbol indented_block_body) [3849 3984])
                    ("_format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4001 4005])
                            ("object" variable nil (reparse-symbol function_parameters) [4007 4013])
                            ("stream" variable nil (reparse-symbol function_parameters) [4015 4021])
                            ("indent" variable nil (reparse-symbol function_parameters) [4023 4029])
                            ("allowance" variable nil (reparse-symbol function_parameters) [4031 4040])
                            ("context" variable nil (reparse-symbol function_parameters) [4042 4049])
                            ("level" variable nil (reparse-symbol function_parameters) [4051 4056]))                          )
                        (reparse-symbol indented_block_body) [3989 7808])
                    ("_repr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7823 7827])
                            ("object" variable nil (reparse-symbol function_parameters) [7829 7835])
                            ("context" variable nil (reparse-symbol function_parameters) [7837 7844])
                            ("level" variable nil (reparse-symbol function_parameters) [7846 7851]))                          )
                        (reparse-symbol indented_block_body) [7813 8131])
                    ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8147 8151])
                            ("object" variable nil (reparse-symbol function_parameters) [8153 8159])
                            ("context" variable nil (reparse-symbol function_parameters) [8161 8168])
                            ("maxlevels" variable nil (reparse-symbol function_parameters) [8170 8179])
                            ("level" variable nil (reparse-symbol function_parameters) [8181 8186]))                          
                        :documentation "Format object for a specific context, returning a string
        and flags indicating whether the representation is 'readable'
        and whether the object represents a recursive construct.
        ")
                        (reparse-symbol indented_block_body) [8136 8465]))                  
                :type "class")
                nil [2476 8465])
            ("_safe_repr" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [8539 8545])
                ("context" variable nil (reparse-symbol function_parameters) [8547 8554])
                ("maxlevels" variable nil (reparse-symbol function_parameters) [8556 8565])
                ("level" variable nil (reparse-symbol function_parameters) [8567 8572]))              ) nil [8524 11419])
            ("_recursion" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [11436 11442]))              ) nil [11421 11541])
            ("_perfcheck" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [11558 11564]))              ) nil [11543 11888])
            ("if" code nil nil [11889 11933]))          
    :file "pprint.py"
    :pointmax 11933
    :fsize 11932
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "argparse.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Command-line parsing library

This module is an optparse-inspired command-line parsing library that:

    - handles both optional and positional arguments
    - produces highly informative usage messages
    - supports parsers that dispatch to sub-parsers

The following is a simple usage example that sums integers from the
command-line and writes the result to a file::

    parser = argparse.ArgumentParser(
        description='sum the integers at the command line')
    parser.add_argument(
        'integers', metavar='int', nargs='+', type=int,
        help='an integer to be summed')
    parser.add_argument(
        '--log', default=sys.stdout, type=argparse.FileType('w'),
        help='the file where the sum should be written')
    args = parser.parse_args()
    args.log.write('%s' % sum(args.integers))
    args.log.close()

The module contains the following public classes:

    - ArgumentParser -- The main entry point for command-line parsing. As the
        example above shows, the add_argument() method is used to populate
        the parser with actions for optional and positional arguments. Then
        the parse_args() method is invoked to convert the args at the
        command-line into an object with attributes.

    - ArgumentError -- The exception raised by ArgumentParser objects when
        there are errors with the parser's actions. Errors raised while
        parsing the command-line are caught by ArgumentParser and emitted
        as command-line messages.

    - FileType -- A factory for defining types of files to be created. As the
        example above shows, instances of FileType are typically passed as
        the type= argument of add_argument() calls.

    - Action -- The base class for parser actions. Typically actions are
        selected by passing strings like 'store_true' or 'append_const' to
        the action= argument of add_argument(). However, for greater
        customization of ArgumentParser actions, subclasses of Action may
        be defined and passed as the action= argument.

    - HelpFormatter, RawDescriptionHelpFormatter, RawTextHelpFormatter,
        ArgumentDefaultsHelpFormatter -- Formatter classes which
        may be passed as the formatter_class= argument to the
        ArgumentParser constructor. HelpFormatter is the default,
        RawDescriptionHelpFormatter and RawTextHelpFormatter tell the parser
        not to change the formatting for help text, and
        ArgumentDefaultsHelpFormatter adds information about argument defaults
        to the help.

All other classes in this module are considered implementation details.
(Also note that HelpFormatter and RawDescriptionHelpFormatter are only
considered public as object names -- the API of the formatter objects is
still considered an implementation detail.)
\"\"\"" code nil nil [58 2875])
            ("__version__" variable nil nil [2877 2896])
            ("__all__" variable nil nil [2897 3248])
            ("collections" include nil nil [3251 3285])
            ("copy" include nil nil [3286 3306])
            ("os" include nil nil [3307 3323])
            ("re" include nil nil [3324 3340])
            ("sys" include nil nil [3341 3359])
            ("textwrap" include nil nil [3360 3388])
            ("gettext" include nil nil [3390 3422])
            ("_callable" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [3439 3442]))              ) nil [3425 3510])
            ("SUPPRESS" variable nil nil [3512 3537])
            ("OPTIONAL" variable nil nil [3539 3553])
            ("ZERO_OR_MORE" variable nil nil [3554 3572])
            ("ONE_OR_MORE" variable nil nil [3573 3590])
            ("PARSER" variable nil nil [3591 3606])
            ("REMAINDER" variable nil nil [3607 3624])
            ("_UNRECOGNIZED_ARGS_ATTR" variable nil nil [3625 3671])
            ("_AttributeHolder" type
               (:documentation "Abstract base class that provides __repr__.

    The __repr__ method returns a string in the format::
        ClassName(attr=name, attr=name, ...)
    The attributes are determined either by a class-level attribute,
    '_kwarg_names', or by inspecting the instance __dict__.
    "
                :superclasses ("object")
                :members 
                  ( ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4111 4115]))                          )
                        (reparse-symbol indented_block_body) [4098 4427])
                    ("_get_kwargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4448 4452]))                          )
                        (reparse-symbol indented_block_body) [4432 4500])
                    ("_get_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4519 4523]))                          )
                        (reparse-symbol indented_block_body) [4505 4544]))                  
                :type "class")
                nil [3770 4544])
            ("_ensure_value" function (:arguments 
              ( ("namespace" variable nil (reparse-symbol function_parameters) [4564 4573])
                ("name" variable nil (reparse-symbol function_parameters) [4575 4579])
                ("value" variable nil (reparse-symbol function_parameters) [4581 4586]))              ) nil [4546 4712])
            ("HelpFormatter" type
               (:documentation "Formatter for generating usage messages and argument help strings.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [5222 5402])
                            ("self" variable nil (reparse-symbol indented_block_body) [5411 5428])
                            ("self" variable nil (reparse-symbol indented_block_body) [5437 5478])
                            ("self" variable nil (reparse-symbol indented_block_body) [5487 5530])
                            ("self" variable nil (reparse-symbol indented_block_body) [5539 5558])
                            ("self" variable nil (reparse-symbol indented_block_body) [5568 5592])
                            ("self" variable nil (reparse-symbol indented_block_body) [5601 5616])
                            ("self" variable nil (reparse-symbol indented_block_body) [5625 5652])
                            ("self" variable nil (reparse-symbol indented_block_body) [5662 5708])
                            ("self" variable nil (reparse-symbol indented_block_body) [5717 5759])
                            ("self" variable nil (reparse-symbol indented_block_body) [5769 5815])
                            ("self" variable nil (reparse-symbol indented_block_body) [5824 5874]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5042 5046])
                            ("prog" variable nil (reparse-symbol function_parameters) [5065 5069])
                            ("indent_increment" variable nil (reparse-symbol function_parameters) [5088 5104])
                            ("max_help_position" variable nil (reparse-symbol function_parameters) [5125 5142])
                            ("width" variable nil (reparse-symbol function_parameters) [5164 5169]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5029 5875])
                    ("_indent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6006 6010]))                          )
                        (reparse-symbol indented_block_body) [5994 6093])
                    ("_dedent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6110 6114]))                          )
                        (reparse-symbol indented_block_body) [6098 6267])
                    ("_Section" type
                       (:superclasses ("object")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self" variable nil (reparse-symbol indented_block_body) [6370 6396])
                                    ("self" variable nil (reparse-symbol indented_block_body) [6409 6429])
                                    ("self" variable nil (reparse-symbol indented_block_body) [6442 6464])
                                    ("self" variable nil (reparse-symbol indented_block_body) [6477 6492]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [6318 6322])
                                    ("formatter" variable nil (reparse-symbol function_parameters) [6324 6333])
                                    ("parent" variable nil (reparse-symbol function_parameters) [6335 6341])
                                    ("heading" variable nil (reparse-symbol function_parameters) [6343 6350]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [6305 6493])
                            ("format_help" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [6518 6522]))                                  )
                                (reparse-symbol indented_block_body) [6502 7480]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [6272 7480])
                    ("_add_item" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7499 7503])
                            ("func" variable nil (reparse-symbol function_parameters) [7505 7509])
                            ("args" variable nil (reparse-symbol function_parameters) [7511 7515]))                          )
                        (reparse-symbol indented_block_body) [7485 7575])
                    ("start_section" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7691 7695])
                            ("heading" variable nil (reparse-symbol function_parameters) [7697 7704]))                          )
                        (reparse-symbol indented_block_body) [7673 7888])
                    ("end_section" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7909 7913]))                          )
                        (reparse-symbol indented_block_body) [7893 8000])
                    ("add_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8018 8022])
                            ("text" variable nil (reparse-symbol function_parameters) [8024 8028]))                          )
                        (reparse-symbol indented_block_body) [8005 8139])
                    ("add_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8158 8162])
                            ("usage" variable nil (reparse-symbol function_parameters) [8164 8169])
                            ("actions" variable nil (reparse-symbol function_parameters) [8171 8178])
                            ("groups" variable nil (reparse-symbol function_parameters) [8180 8186])
                            ("prefix" variable nil (reparse-symbol function_parameters) [8188 8194]))                          )
                        (reparse-symbol indented_block_body) [8144 8339])
                    ("add_argument" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8361 8365])
                            ("action" variable nil (reparse-symbol function_parameters) [8367 8373]))                          )
                        (reparse-symbol indented_block_body) [8344 9098])
                    ("add_arguments" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9121 9125])
                            ("actions" variable nil (reparse-symbol function_parameters) [9127 9134]))                          )
                        (reparse-symbol indented_block_body) [9103 9206])
                    ("format_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9317 9321]))                          )
                        (reparse-symbol indented_block_body) [9301 9514])
                    ("_join_parts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9535 9539])
                            ("part_strings" variable nil (reparse-symbol function_parameters) [9541 9553]))                          )
                        (reparse-symbol indented_block_body) [9519 9693])
                    ("_format_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9716 9720])
                            ("usage" variable nil (reparse-symbol function_parameters) [9722 9727])
                            ("actions" variable nil (reparse-symbol function_parameters) [9729 9736])
                            ("groups" variable nil (reparse-symbol function_parameters) [9738 9744])
                            ("prefix" variable nil (reparse-symbol function_parameters) [9746 9752]))                          )
                        (reparse-symbol indented_block_body) [9698 13531])
                    ("_format_actions_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13562 13566])
                            ("actions" variable nil (reparse-symbol function_parameters) [13568 13575])
                            ("groups" variable nil (reparse-symbol function_parameters) [13577 13583]))                          )
                        (reparse-symbol indented_block_body) [13536 17186])
                    ("_format_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17208 17212])
                            ("text" variable nil (reparse-symbol function_parameters) [17214 17218]))                          )
                        (reparse-symbol indented_block_body) [17191 17465])
                    ("_format_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17489 17493])
                            ("action" variable nil (reparse-symbol function_parameters) [17495 17501]))                          )
                        (reparse-symbol indented_block_body) [17470 19393])
                    ("_format_action_invocation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19428 19432])
                            ("action" variable nil (reparse-symbol function_parameters) [19434 19440]))                          )
                        (reparse-symbol indented_block_body) [19398 20189])
                    ("_metavar_formatter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20217 20221])
                            ("action" variable nil (reparse-symbol function_parameters) [20223 20229])
                            ("default_metavar" variable nil (reparse-symbol function_parameters) [20231 20246]))                          )
                        (reparse-symbol indented_block_body) [20194 20729])
                    ("_format_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20751 20755])
                            ("action" variable nil (reparse-symbol function_parameters) [20757 20763])
                            ("default_metavar" variable nil (reparse-symbol function_parameters) [20765 20780]))                          )
                        (reparse-symbol indented_block_body) [20734 21517])
                    ("_expand_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21539 21543])
                            ("action" variable nil (reparse-symbol function_parameters) [21545 21551]))                          )
                        (reparse-symbol indented_block_body) [21522 22069])
                    ("_iter_indented_subactions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22104 22108])
                            ("action" variable nil (reparse-symbol function_parameters) [22110 22116]))                          )
                        (reparse-symbol indented_block_body) [22074 22379])
                    ("_split_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22401 22405])
                            ("text" variable nil (reparse-symbol function_parameters) [22407 22411])
                            ("width" variable nil (reparse-symbol function_parameters) [22413 22418]))                          )
                        (reparse-symbol indented_block_body) [22384 22527])
                    ("_fill_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22547 22551])
                            ("text" variable nil (reparse-symbol function_parameters) [22553 22557])
                            ("width" variable nil (reparse-symbol function_parameters) [22559 22564])
                            ("indent" variable nil (reparse-symbol function_parameters) [22566 22572]))                          )
                        (reparse-symbol indented_block_body) [22532 22773])
                    ("_get_help_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22799 22803])
                            ("action" variable nil (reparse-symbol function_parameters) [22805 22811]))                          )
                        (reparse-symbol indented_block_body) [22778 22841]))                  
                :type "class")
                nil [4769 22841])
            ("RawDescriptionHelpFormatter" type
               (:documentation "Help message formatter which retains any formatting in descriptions.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    "
                :superclasses ("HelpFormatter")
                :members 
                  ( ("_fill_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23141 23145])
                            ("text" variable nil (reparse-symbol function_parameters) [23147 23151])
                            ("width" variable nil (reparse-symbol function_parameters) [23153 23158])
                            ("indent" variable nil (reparse-symbol function_parameters) [23160 23166]))                          )
                        (reparse-symbol indented_block_body) [23126 23243]))                  
                :type "class")
                nil [22843 23243])
            ("RawTextHelpFormatter" type
               (:documentation "Help message formatter which retains formatting of all help text.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    "
                :superclasses ("RawDescriptionHelpFormatter")
                :members 
                  ( ("_split_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23549 23553])
                            ("text" variable nil (reparse-symbol function_parameters) [23555 23559])
                            ("width" variable nil (reparse-symbol function_parameters) [23561 23566]))                          )
                        (reparse-symbol indented_block_body) [23532 23602]))                  
                :type "class")
                nil [23245 23602])
            ("ArgumentDefaultsHelpFormatter" type
               (:documentation "Help message formatter which adds default values to argument help.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    "
                :superclasses ("HelpFormatter")
                :members 
                  ( ("_get_help_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23908 23912])
                            ("action" variable nil (reparse-symbol function_parameters) [23914 23920]))                          )
                        (reparse-symbol indented_block_body) [23887 24253]))                  
                :type "class")
                nil [23604 24253])
            ("_get_action_name" function (:arguments 
              ( ("argument" variable nil (reparse-symbol function_parameters) [24349 24357]))              ) nil [24328 24679])
            ("ArgumentError" type
               (:documentation "An error from creating or using an argument (optional or positional).

    The string value of this exception is the message, augmented with
    information about the argument that caused it.
    "
                :superclasses ("Exception")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [24972 25019])
                            ("self" variable nil (reparse-symbol indented_block_body) [25028 25050]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24938 24942])
                            ("argument" variable nil (reparse-symbol function_parameters) [24944 24952])
                            ("message" variable nil (reparse-symbol function_parameters) [24954 24961]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24925 25051])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25068 25072]))                          )
                        (reparse-symbol indented_block_body) [25056 25340]))                  
                :type "class")
                nil [24681 25340])
            ("ArgumentTypeError" type
               (:documentation "An error from trying to convert a command line string to a type."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [25457 25461]))                  
                :type "class")
                nil [25342 25462])
            ("Action" type
               (:documentation "Information about how to convert command line strings to Python objects.

    Action objects are used by an ArgumentParser to represent the information
    needed to parse a single argument from one or more strings from the
    command line. The keyword arguments to the Action constructor are also
    all attributes of Action instances.

    Keyword Arguments:

        - option_strings -- A list of command-line option strings which
            should be associated with this action.

        - dest -- The name of the attribute to hold the created object(s)

        - nargs -- The number of command-line arguments that should be
            consumed. By default, one argument will be consumed and a single
            value will be produced.  Other values include:
                - N (an integer) consumes N arguments (and produces a list)
                - '?' consumes zero or one arguments
                - '*' consumes zero or more arguments (and produces a list)
                - '+' consumes one or more arguments (and produces a list)
            Note that the difference between the default and nargs=1 is that
            with the default, a single value will be produced, while with
            nargs=1, a list containing a single value will be produced.

        - const -- The value to be produced if the option is specified and the
            option uses an action that takes no values.

        - default -- The value to be produced if the option is not specified.

        - type -- The type which the command-line arguments should be converted
            to, should be one of 'string', 'int', 'float', 'complex' or a
            callable object that accepts a single string argument. If None,
            'string' is assumed.

        - choices -- A container of values that should be allowed. If not None,
            after a command-line argument has been converted to the appropriate
            type, an exception will be raised if it is not a member of this
            collection.

        - required -- True if the action must always be specified at the
            command line. This is only meaningful for optional command-line
            arguments.

        - help -- The help string describing the argument.

        - metavar -- The name to be used for the option's argument with the
            help string. If None, the 'dest' value will be used as the name.
    "
                :superclasses ("_AttributeHolder")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [28292 28328])
                            ("self" variable nil (reparse-symbol indented_block_body) [28337 28353])
                            ("self" variable nil (reparse-symbol indented_block_body) [28362 28380])
                            ("self" variable nil (reparse-symbol indented_block_body) [28389 28407])
                            ("self" variable nil (reparse-symbol indented_block_body) [28416 28438])
                            ("self" variable nil (reparse-symbol indented_block_body) [28447 28463])
                            ("self" variable nil (reparse-symbol indented_block_body) [28472 28494])
                            ("self" variable nil (reparse-symbol indented_block_body) [28503 28527])
                            ("self" variable nil (reparse-symbol indented_block_body) [28536 28552])
                            ("self" variable nil (reparse-symbol indented_block_body) [28561 28583]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27981 27985])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [28004 28018])
                            ("dest" variable nil (reparse-symbol function_parameters) [28037 28041])
                            ("nargs" variable nil (reparse-symbol function_parameters) [28060 28065])
                            ("const" variable nil (reparse-symbol function_parameters) [28089 28094])
                            ("default" variable nil (reparse-symbol function_parameters) [28118 28125])
                            ("type" variable nil (reparse-symbol function_parameters) [28149 28153])
                            ("choices" variable nil (reparse-symbol function_parameters) [28177 28184])
                            ("required" variable nil (reparse-symbol function_parameters) [28208 28216])
                            ("help" variable nil (reparse-symbol function_parameters) [28241 28245])
                            ("metavar" variable nil (reparse-symbol function_parameters) [28269 28276]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27968 28584])
                    ("_get_kwargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28605 28609]))                          )
                        (reparse-symbol indented_block_body) [28589 28904])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28922 28926])
                            ("parser" variable nil (reparse-symbol function_parameters) [28928 28934])
                            ("namespace" variable nil (reparse-symbol function_parameters) [28936 28945])
                            ("values" variable nil (reparse-symbol function_parameters) [28947 28953])
                            ("option_string" variable nil (reparse-symbol function_parameters) [28955 28968]))                          )
                        (reparse-symbol indented_block_body) [28909 29040]))                  
                :type "class")
                nil [25516 29040])
            ("_StoreAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [29399 29643])
                            ("if" code nil (reparse-symbol indented_block_body) [29651 29771])
                            ("super" code nil (reparse-symbol indented_block_body) [29779 30094]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29088 29092])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [29111 29125])
                            ("dest" variable nil (reparse-symbol function_parameters) [29144 29148])
                            ("nargs" variable nil (reparse-symbol function_parameters) [29167 29172])
                            ("const" variable nil (reparse-symbol function_parameters) [29196 29201])
                            ("default" variable nil (reparse-symbol function_parameters) [29225 29232])
                            ("type" variable nil (reparse-symbol function_parameters) [29256 29260])
                            ("choices" variable nil (reparse-symbol function_parameters) [29284 29291])
                            ("required" variable nil (reparse-symbol function_parameters) [29315 29323])
                            ("help" variable nil (reparse-symbol function_parameters) [29348 29352])
                            ("metavar" variable nil (reparse-symbol function_parameters) [29376 29383]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29075 30095])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30113 30117])
                            ("parser" variable nil (reparse-symbol function_parameters) [30119 30125])
                            ("namespace" variable nil (reparse-symbol function_parameters) [30127 30136])
                            ("values" variable nil (reparse-symbol function_parameters) [30138 30144])
                            ("option_string" variable nil (reparse-symbol function_parameters) [30146 30159]))                          )
                        (reparse-symbol indented_block_body) [30100 30213]))                  
                :type "class")
                nil [29042 30213])
            ("_StoreConstAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [30484 30719]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30266 30270])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [30289 30303])
                            ("dest" variable nil (reparse-symbol function_parameters) [30322 30326])
                            ("const" variable nil (reparse-symbol function_parameters) [30345 30350])
                            ("default" variable nil (reparse-symbol function_parameters) [30369 30376])
                            ("required" variable nil (reparse-symbol function_parameters) [30400 30408])
                            ("help" variable nil (reparse-symbol function_parameters) [30433 30437])
                            ("metavar" variable nil (reparse-symbol function_parameters) [30461 30468]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30253 30720])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30738 30742])
                            ("parser" variable nil (reparse-symbol function_parameters) [30744 30750])
                            ("namespace" variable nil (reparse-symbol function_parameters) [30752 30761])
                            ("values" variable nil (reparse-symbol function_parameters) [30763 30769])
                            ("option_string" variable nil (reparse-symbol function_parameters) [30771 30784]))                          )
                        (reparse-symbol indented_block_body) [30725 30842]))                  
                :type "class")
                nil [30215 30842])
            ("_StoreTrueAction" type
               (:superclasses ("_StoreConstAction")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [31069 31281]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30905 30909])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [30928 30942])
                            ("dest" variable nil (reparse-symbol function_parameters) [30961 30965])
                            ("default" variable nil (reparse-symbol function_parameters) [30984 30991])
                            ("required" variable nil (reparse-symbol function_parameters) [31016 31024])
                            ("help" variable nil (reparse-symbol function_parameters) [31049 31053]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30892 31282]))                  
                :type "class")
                nil [30844 31282])
            ("_StoreFalseAction" type
               (:superclasses ("_StoreConstAction")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [31509 31723]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31346 31350])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [31369 31383])
                            ("dest" variable nil (reparse-symbol function_parameters) [31402 31406])
                            ("default" variable nil (reparse-symbol function_parameters) [31425 31432])
                            ("required" variable nil (reparse-symbol function_parameters) [31456 31464])
                            ("help" variable nil (reparse-symbol function_parameters) [31489 31493]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31333 31724]))                  
                :type "class")
                nil [31284 31724])
            ("_AppendAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [32084 32335])
                            ("if" code nil (reparse-symbol indented_block_body) [32343 32463])
                            ("super" code nil (reparse-symbol indented_block_body) [32471 32787]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31773 31777])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [31796 31810])
                            ("dest" variable nil (reparse-symbol function_parameters) [31829 31833])
                            ("nargs" variable nil (reparse-symbol function_parameters) [31852 31857])
                            ("const" variable nil (reparse-symbol function_parameters) [31881 31886])
                            ("default" variable nil (reparse-symbol function_parameters) [31910 31917])
                            ("type" variable nil (reparse-symbol function_parameters) [31941 31945])
                            ("choices" variable nil (reparse-symbol function_parameters) [31969 31976])
                            ("required" variable nil (reparse-symbol function_parameters) [32000 32008])
                            ("help" variable nil (reparse-symbol function_parameters) [32033 32037])
                            ("metavar" variable nil (reparse-symbol function_parameters) [32061 32068]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31760 32788])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32806 32810])
                            ("parser" variable nil (reparse-symbol function_parameters) [32812 32818])
                            ("namespace" variable nil (reparse-symbol function_parameters) [32820 32829])
                            ("values" variable nil (reparse-symbol function_parameters) [32831 32837])
                            ("option_string" variable nil (reparse-symbol function_parameters) [32839 32852]))                          )
                        (reparse-symbol indented_block_body) [32793 33002]))                  
                :type "class")
                nil [31726 33002])
            ("_AppendConstAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [33274 33539]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33056 33060])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [33079 33093])
                            ("dest" variable nil (reparse-symbol function_parameters) [33112 33116])
                            ("const" variable nil (reparse-symbol function_parameters) [33135 33140])
                            ("default" variable nil (reparse-symbol function_parameters) [33159 33166])
                            ("required" variable nil (reparse-symbol function_parameters) [33190 33198])
                            ("help" variable nil (reparse-symbol function_parameters) [33223 33227])
                            ("metavar" variable nil (reparse-symbol function_parameters) [33251 33258]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33043 33540])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33558 33562])
                            ("parser" variable nil (reparse-symbol function_parameters) [33564 33570])
                            ("namespace" variable nil (reparse-symbol function_parameters) [33572 33581])
                            ("values" variable nil (reparse-symbol function_parameters) [33583 33589])
                            ("option_string" variable nil (reparse-symbol function_parameters) [33591 33604]))                          )
                        (reparse-symbol indented_block_body) [33545 33758]))                  
                :type "class")
                nil [33004 33758])
            ("_CountAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [33969 34174]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33806 33810])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [33829 33843])
                            ("dest" variable nil (reparse-symbol function_parameters) [33862 33866])
                            ("default" variable nil (reparse-symbol function_parameters) [33885 33892])
                            ("required" variable nil (reparse-symbol function_parameters) [33916 33924])
                            ("help" variable nil (reparse-symbol function_parameters) [33949 33953]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33793 34175])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34193 34197])
                            ("parser" variable nil (reparse-symbol function_parameters) [34199 34205])
                            ("namespace" variable nil (reparse-symbol function_parameters) [34207 34216])
                            ("values" variable nil (reparse-symbol function_parameters) [34218 34224])
                            ("option_string" variable nil (reparse-symbol function_parameters) [34226 34239]))                          )
                        (reparse-symbol indented_block_body) [34180 34359]))                  
                :type "class")
                nil [33760 34359])
            ("_HelpAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [34549 34722]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34406 34410])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [34429 34443])
                            ("dest" variable nil (reparse-symbol function_parameters) [34462 34466])
                            ("default" variable nil (reparse-symbol function_parameters) [34494 34501])
                            ("help" variable nil (reparse-symbol function_parameters) [34529 34533]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34393 34723])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34741 34745])
                            ("parser" variable nil (reparse-symbol function_parameters) [34747 34753])
                            ("namespace" variable nil (reparse-symbol function_parameters) [34755 34764])
                            ("values" variable nil (reparse-symbol function_parameters) [34766 34772])
                            ("option_string" variable nil (reparse-symbol function_parameters) [34774 34787]))                          )
                        (reparse-symbol indented_block_body) [34728 34845]))                  
                :type "class")
                nil [34361 34845])
            ("_VersionAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [35105 35281])
                            ("self" variable nil (reparse-symbol indented_block_body) [35290 35312]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34895 34899])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [34918 34932])
                            ("version" variable nil (reparse-symbol function_parameters) [34951 34958])
                            ("dest" variable nil (reparse-symbol function_parameters) [34982 34986])
                            ("default" variable nil (reparse-symbol function_parameters) [35014 35021])
                            ("help" variable nil (reparse-symbol function_parameters) [35049 35053]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34882 35313])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35331 35335])
                            ("parser" variable nil (reparse-symbol function_parameters) [35337 35343])
                            ("namespace" variable nil (reparse-symbol function_parameters) [35345 35354])
                            ("values" variable nil (reparse-symbol function_parameters) [35356 35362])
                            ("option_string" variable nil (reparse-symbol function_parameters) [35364 35377]))                          )
                        (reparse-symbol indented_block_body) [35318 35614]))                  
                :type "class")
                nil [34847 35614])
            ("_SubParsersAction" type
               (:superclasses ("Action")
                :members 
                  ( ("_ChoicesPseudoAction" type
                       (:superclasses ("Action")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("sup" variable nil (reparse-symbol indented_block_body) [35743 35800])
                                    ("sup" code nil (reparse-symbol indented_block_body) [35813 35866]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [35712 35716])
                                    ("name" variable nil (reparse-symbol function_parameters) [35718 35722])
                                    ("help" variable nil (reparse-symbol function_parameters) [35724 35728]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [35699 35867]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [35654 35867])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [36079 36103])
                            ("self" variable nil (reparse-symbol indented_block_body) [36112 36145])
                            ("self" variable nil (reparse-symbol indented_block_body) [36154 36204])
                            ("self" variable nil (reparse-symbol indented_block_body) [36213 36239])
                            ("super" code nil (reparse-symbol indented_block_body) [36249 36476]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35885 35889])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [35908 35922])
                            ("prog" variable nil (reparse-symbol function_parameters) [35941 35945])
                            ("parser_class" variable nil (reparse-symbol function_parameters) [35964 35976])
                            ("dest" variable nil (reparse-symbol function_parameters) [35995 35999])
                            ("help" variable nil (reparse-symbol function_parameters) [36027 36031])
                            ("metavar" variable nil (reparse-symbol function_parameters) [36055 36062]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [35872 36477])
                    ("add_parser" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36497 36501])
                            ("name" variable nil (reparse-symbol function_parameters) [36503 36507])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [36509 36517]))                          )
                        (reparse-symbol indented_block_body) [36482 37079])
                    ("_get_subactions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37104 37108]))                          )
                        (reparse-symbol indented_block_body) [37084 37148])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37166 37170])
                            ("parser" variable nil (reparse-symbol function_parameters) [37172 37178])
                            ("namespace" variable nil (reparse-symbol function_parameters) [37180 37189])
                            ("values" variable nil (reparse-symbol function_parameters) [37191 37197])
                            ("option_string" variable nil (reparse-symbol function_parameters) [37199 37212]))                          )
                        (reparse-symbol indented_block_body) [37153 38151]))                  
                :type "class")
                nil [35616 38151])
            ("FileType" type
               (:documentation "Factory for creating file object types

    Instances of FileType are typically passed as type= arguments to the
    ArgumentParser add_argument() method.

    Keyword Arguments:
        - mode -- A string indicating how the file is to be opened. Accepts the
            same values as the builtin open() function.
        - bufsize -- The file's desired buffer size. Accepts the same values as
            the builtin open() function.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [38733 38750])
                            ("self" variable nil (reparse-symbol indented_block_body) [38759 38782]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38696 38700])
                            ("mode" variable nil (reparse-symbol function_parameters) [38702 38706])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [38712 38719]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38683 38783])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38801 38805])
                            ("string" variable nil (reparse-symbol function_parameters) [38807 38813]))                          )
                        (reparse-symbol indented_block_body) [38788 39421])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39439 39443]))                          )
                        (reparse-symbol indented_block_body) [39426 39614]))                  
                :type "class")
                nil [38203 39614])
            ("Namespace" type
               (:documentation "Simple object for storing attributes.

    Implements equality by attribute names and values, and provides a simple
    string representation.
    "
                :superclasses ("_AttributeHolder")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("for" code nil (reparse-symbol indented_block_body) [39946 40012]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39921 39925])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [39927 39935]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39908 40012])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [40017 40032])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40049 40053])
                            ("other" variable nil (reparse-symbol function_parameters) [40055 40060]))                          )
                        (reparse-symbol indented_block_body) [40038 40104])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40120 40124])
                            ("other" variable nil (reparse-symbol function_parameters) [40126 40131]))                          )
                        (reparse-symbol indented_block_body) [40109 40169])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40191 40195])
                            ("key" variable nil (reparse-symbol function_parameters) [40197 40200]))                          )
                        (reparse-symbol indented_block_body) [40174 40239]))                  
                :type "class")
                nil [39710 40239])
            ("_ActionsContainer" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [40438 40479])
                            ("self" variable nil (reparse-symbol indented_block_body) [40489 40519])
                            ("self" variable nil (reparse-symbol indented_block_body) [40528 40568])
                            ("self" variable nil (reparse-symbol indented_block_body) [40577 40609])
                            ("self" variable nil (reparse-symbol indented_block_body) [40618 40658])
                            ("self" variable nil (reparse-symbol indented_block_body) [40696 40717])
                            ("self" code nil (reparse-symbol indented_block_body) [40754 40797])
                            ("self" code nil (reparse-symbol indented_block_body) [40806 40852])
                            ("self" code nil (reparse-symbol indented_block_body) [40861 40918])
                            ("self" code nil (reparse-symbol indented_block_body) [40927 40982])
                            ("self" code nil (reparse-symbol indented_block_body) [40991 41048])
                            ("self" code nil (reparse-symbol indented_block_body) [41057 41105])
                            ("self" code nil (reparse-symbol indented_block_body) [41114 41173])
                            ("self" code nil (reparse-symbol indented_block_body) [41182 41228])
                            ("self" code nil (reparse-symbol indented_block_body) [41237 41281])
                            ("self" code nil (reparse-symbol indented_block_body) [41290 41340])
                            ("self" code nil (reparse-symbol indented_block_body) [41349 41402])
                            ("self" code nil (reparse-symbol indented_block_body) [41476 41495])
                            ("self" variable nil (reparse-symbol indented_block_body) [41530 41548])
                            ("self" variable nil (reparse-symbol indented_block_body) [41557 41589])
                            ("self" variable nil (reparse-symbol indented_block_body) [41616 41640])
                            ("self" variable nil (reparse-symbol indented_block_body) [41649 41685])
                            ("self" variable nil (reparse-symbol indented_block_body) [41722 41741])
                            ("self" variable nil (reparse-symbol indented_block_body) [41821 41887])
                            ("self" variable nil (reparse-symbol indented_block_body) [42034 42074]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40292 40296])
                            ("description" variable nil (reparse-symbol function_parameters) [40315 40326])
                            ("prefix_chars" variable nil (reparse-symbol function_parameters) [40345 40357])
                            ("argument_default" variable nil (reparse-symbol function_parameters) [40376 40392])
                            ("conflict_handler" variable nil (reparse-symbol function_parameters) [40411 40427]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [40279 42075])
                    ("register" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42174 42178])
                            ("registry_name" variable nil (reparse-symbol function_parameters) [42180 42193])
                            ("value" variable nil (reparse-symbol function_parameters) [42195 42200])
                            ("object" variable nil (reparse-symbol function_parameters) [42202 42208]))                          )
                        (reparse-symbol indented_block_body) [42161 42310])
                    ("_registry_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42333 42337])
                            ("registry_name" variable nil (reparse-symbol function_parameters) [42339 42352])
                            ("value" variable nil (reparse-symbol function_parameters) [42354 42359])
                            ("default" variable nil (reparse-symbol function_parameters) [42361 42368]))                          )
                        (reparse-symbol indented_block_body) [42315 42443])
                    ("set_defaults" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42588 42592])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [42594 42602]))                          )
                        (reparse-symbol indented_block_body) [42571 42900])
                    ("get_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42921 42925])
                            ("dest" variable nil (reparse-symbol function_parameters) [42927 42931]))                          )
                        (reparse-symbol indented_block_body) [42905 43122])
                    ("add_argument" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43235 43239])
                            ("args" variable nil (reparse-symbol function_parameters) [43241 43246])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [43248 43256]))                          
                        :documentation "
        add_argument(dest, ..., name=value, ...)
        add_argument(option_string, option_string, ..., name=value, ...)
        ")
                        (reparse-symbol indented_block_body) [43218 45179])
                    ("add_argument_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45207 45211])
                            ("args" variable nil (reparse-symbol function_parameters) [45213 45218])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [45220 45228]))                          )
                        (reparse-symbol indented_block_body) [45184 45348])
                    ("add_mutually_exclusive_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45386 45390])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [45392 45400]))                          )
                        (reparse-symbol indented_block_body) [45353 45534])
                    ("_add_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45555 45559])
                            ("action" variable nil (reparse-symbol function_parameters) [45561 45567]))                          )
                        (reparse-symbol indented_block_body) [45539 46292])
                    ("_remove_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46316 46320])
                            ("action" variable nil (reparse-symbol function_parameters) [46322 46328]))                          )
                        (reparse-symbol indented_block_body) [46297 46368])
                    ("_add_container_actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46400 46404])
                            ("container" variable nil (reparse-symbol function_parameters) [46406 46415]))                          )
                        (reparse-symbol indented_block_body) [46373 48098])
                    ("_get_positional_kwargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48130 48134])
                            ("dest" variable nil (reparse-symbol function_parameters) [48136 48140])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [48142 48150]))                          )
                        (reparse-symbol indented_block_body) [48103 48769])
                    ("_get_optional_kwargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48799 48803])
                            ("args" variable nil (reparse-symbol function_parameters) [48805 48810])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [48812 48820]))                          )
                        (reparse-symbol indented_block_body) [48774 50335])
                    ("_pop_action_class" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50362 50366])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [50368 50374])
                            ("default" variable nil (reparse-symbol function_parameters) [50376 50383]))                          )
                        (reparse-symbol indented_block_body) [50340 50498])
                    ("_get_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50520 50524]))                          )
                        (reparse-symbol indented_block_body) [50503 50874])
                    ("_check_conflict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50899 50903])
                            ("action" variable nil (reparse-symbol function_parameters) [50905 50911]))                          )
                        (reparse-symbol indented_block_body) [50879 51429])
                    ("_handle_conflict_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51461 51465])
                            ("action" variable nil (reparse-symbol function_parameters) [51467 51473])
                            ("conflicting_actions" variable nil (reparse-symbol function_parameters) [51475 51494]))                          )
                        (reparse-symbol indented_block_body) [51434 51792])
                    ("_handle_conflict_resolve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51826 51830])
                            ("action" variable nil (reparse-symbol function_parameters) [51832 51838])
                            ("conflicting_actions" variable nil (reparse-symbol function_parameters) [51840 51859]))                          )
                        (reparse-symbol indented_block_body) [51797 52335]))                  
                :type "class")
                nil [40241 52335])
            ("_ArgumentGroup" type
               (:superclasses ("_ActionsContainer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("update" variable nil (reparse-symbol indented_block_body) [52532 52558])
                            ("update" code nil (reparse-symbol indented_block_body) [52567 52621])
                            ("update" code nil (reparse-symbol indented_block_body) [52630 52676])
                            ("update" code nil (reparse-symbol indented_block_body) [52685 52739])
                            ("super_init" variable nil (reparse-symbol indented_block_body) [52748 52797])
                            ("super_init" code nil (reparse-symbol indented_block_body) [52806 52851])
                            ("self" variable nil (reparse-symbol indented_block_body) [52888 52906])
                            ("self" variable nil (reparse-symbol indented_block_body) [52915 52939])
                            ("self" variable nil (reparse-symbol indented_block_body) [53000 53040])
                            ("self" variable nil (reparse-symbol indented_block_body) [53049 53083])
                            ("self" variable nil (reparse-symbol indented_block_body) [53092 53154])
                            ("self" variable nil (reparse-symbol indented_block_body) [53163 53199])
                            ("self" variable nil (reparse-symbol indented_block_body) [53208 53300])
                            ("self" variable nil (reparse-symbol indented_block_body) [53309 53379]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52396 52400])
                            ("container" variable nil (reparse-symbol function_parameters) [52402 52411])
                            ("title" variable nil (reparse-symbol function_parameters) [52413 52418])
                            ("description" variable nil (reparse-symbol function_parameters) [52425 52436])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [52443 52451]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [52383 53380])
                    ("_add_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53401 53405])
                            ("action" variable nil (reparse-symbol function_parameters) [53407 53413]))                          )
                        (reparse-symbol indented_block_body) [53385 53546])
                    ("_remove_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53570 53574])
                            ("action" variable nil (reparse-symbol function_parameters) [53576 53582]))                          )
                        (reparse-symbol indented_block_body) [53551 53687]))                  
                :type "class")
                nil [52337 53687])
            ("_MutuallyExclusiveGroup" type
               (:superclasses ("_ArgumentGroup")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [53796 53852])
                            ("self" variable nil (reparse-symbol indented_block_body) [53861 53885])
                            ("self" variable nil (reparse-symbol indented_block_body) [53894 53921]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53754 53758])
                            ("container" variable nil (reparse-symbol function_parameters) [53760 53769])
                            ("required" variable nil (reparse-symbol function_parameters) [53771 53779]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [53741 53922])
                    ("_add_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53943 53947])
                            ("action" variable nil (reparse-symbol function_parameters) [53949 53955]))                          )
                        (reparse-symbol indented_block_body) [53927 54207])
                    ("_remove_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54231 54235])
                            ("action" variable nil (reparse-symbol function_parameters) [54237 54243]))                          )
                        (reparse-symbol indented_block_body) [54212 54336]))                  
                :type "class")
                nil [53689 54336])
            ("ArgumentParser" type
               (:documentation "Object for parsing command line strings into Python objects.

    Keyword Arguments:
        - prog -- The name of the program (default: sys.argv[0])
        - usage -- A usage message (default: auto-generated from arguments)
        - description -- A description of what the program does
        - epilog -- Text following the argument descriptions
        - parents -- Parsers whose arguments should be copied into this one
        - formatter_class -- HelpFormatter class for printing help messages
        - prefix_chars -- Characters that prefix optional arguments
        - fromfile_prefix_chars -- Characters that prefix files containing
            additional arguments
        - argument_default -- The default value for all arguments
        - conflict_handler -- String indicating how to handle conflicts
        - add_help -- Add a -h/-help option
    "
                :superclasses ("_AttributeHolder" "_ActionsContainer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [55732 56054])
                            ("superinit" variable nil (reparse-symbol indented_block_body) [56063 56111])
                            ("superinit" code nil (reparse-symbol indented_block_body) [56120 56305])
                            ("if" code nil (reparse-symbol indented_block_body) [56350 56418])
                            ("self" variable nil (reparse-symbol indented_block_body) [56427 56443])
                            ("self" variable nil (reparse-symbol indented_block_body) [56452 56470])
                            ("self" variable nil (reparse-symbol indented_block_body) [56479 56499])
                            ("self" variable nil (reparse-symbol indented_block_body) [56508 56530])
                            ("self" variable nil (reparse-symbol indented_block_body) [56539 56577])
                            ("self" variable nil (reparse-symbol indented_block_body) [56586 56636])
                            ("self" variable nil (reparse-symbol indented_block_body) [56645 56669])
                            ("add_group" variable nil (reparse-symbol indented_block_body) [56679 56714])
                            ("self" variable nil (reparse-symbol indented_block_body) [56723 56779])
                            ("self" variable nil (reparse-symbol indented_block_body) [56788 56840])
                            ("self" variable nil (reparse-symbol indented_block_body) [56849 56872])
                            ("identity" function (:arguments 
                              ( ("string" variable nil (reparse-symbol function_parameters) [56920 56926]))                              ) (reparse-symbol indented_block_body) [56907 56955])
                            ("self" code nil (reparse-symbol indented_block_body) [56963 57000])
                            ("prefix_chars" code nil (reparse-symbol indented_block_body) [57184 57199])
                            ("if" code nil (reparse-symbol indented_block_body) [57208 57426])
                            ("if" code nil (reparse-symbol indented_block_body) [57434 57702])
                            ("for" code nil (reparse-symbol indented_block_body) [57755 58009]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55291 55295])
                            ("prog" variable nil (reparse-symbol function_parameters) [55314 55318])
                            ("usage" variable nil (reparse-symbol function_parameters) [55342 55347])
                            ("description" variable nil (reparse-symbol function_parameters) [55371 55382])
                            ("epilog" variable nil (reparse-symbol function_parameters) [55406 55412])
                            ("version" variable nil (reparse-symbol function_parameters) [55436 55443])
                            ("parents" variable nil (reparse-symbol function_parameters) [55467 55474])
                            ("formatter_class" variable nil (reparse-symbol function_parameters) [55496 55511])
                            ("prefix_chars" variable nil (reparse-symbol function_parameters) [55544 55556])
                            ("fromfile_prefix_chars" variable nil (reparse-symbol function_parameters) [55579 55600])
                            ("argument_default" variable nil (reparse-symbol function_parameters) [55624 55640])
                            ("conflict_handler" variable nil (reparse-symbol function_parameters) [55664 55680])
                            ("add_help" variable nil (reparse-symbol function_parameters) [55707 55715]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [55278 58009])
                    ("_get_kwargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58120 58124]))                          )
                        (reparse-symbol indented_block_body) [58104 58396])
                    ("add_subparsers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58543 58547])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [58549 58557]))                          )
                        (reparse-symbol indented_block_body) [58524 59872])
                    ("_add_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59893 59897])
                            ("action" variable nil (reparse-symbol function_parameters) [59899 59905]))                          )
                        (reparse-symbol indented_block_body) [59877 60076])
                    ("_get_optional_actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60107 60111]))                          )
                        (reparse-symbol indented_block_body) [60081 60223])
                    ("_get_positional_actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60256 60260]))                          )
                        (reparse-symbol indented_block_body) [60228 60376])
                    ("parse_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60528 60532])
                            ("args" variable nil (reparse-symbol function_parameters) [60534 60538])
                            ("namespace" variable nil (reparse-symbol function_parameters) [60545 60554]))                          )
                        (reparse-symbol indented_block_body) [60513 60754])
                    ("parse_known_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60780 60784])
                            ("args" variable nil (reparse-symbol function_parameters) [60786 60790])
                            ("namespace" variable nil (reparse-symbol function_parameters) [60797 60806]))                          )
                        (reparse-symbol indented_block_body) [60759 62209])
                    ("_parse_known_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62236 62240])
                            ("arg_strings" variable nil (reparse-symbol function_parameters) [62242 62253])
                            ("namespace" variable nil (reparse-symbol function_parameters) [62255 62264]))                          )
                        (reparse-symbol indented_block_body) [62214 73019])
                    ("_read_args_from_files" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73050 73054])
                            ("arg_strings" variable nil (reparse-symbol function_parameters) [73056 73067]))                          )
                        (reparse-symbol indented_block_body) [73024 74210])
                    ("convert_arg_line_to_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74244 74248])
                            ("arg_line" variable nil (reparse-symbol function_parameters) [74250 74258]))                          )
                        (reparse-symbol indented_block_body) [74215 74287])
                    ("_match_argument" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74312 74316])
                            ("action" variable nil (reparse-symbol function_parameters) [74318 74324])
                            ("arg_strings_pattern" variable nil (reparse-symbol function_parameters) [74326 74345]))                          )
                        (reparse-symbol indented_block_body) [74292 75095])
                    ("_match_arguments_partial" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75129 75133])
                            ("actions" variable nil (reparse-symbol function_parameters) [75135 75142])
                            ("arg_strings_pattern" variable nil (reparse-symbol function_parameters) [75144 75163]))                          )
                        (reparse-symbol indented_block_body) [75100 75769])
                    ("_parse_optional" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75794 75798])
                            ("arg_string" variable nil (reparse-symbol function_parameters) [75800 75810]))                          )
                        (reparse-symbol indented_block_body) [75774 78190])
                    ("_get_option_tuples" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78218 78222])
                            ("option_string" variable nil (reparse-symbol function_parameters) [78224 78237]))                          )
                        (reparse-symbol indented_block_body) [78195 80114])
                    ("_get_nargs_pattern" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80142 80146])
                            ("action" variable nil (reparse-symbol function_parameters) [80148 80154]))                          )
                        (reparse-symbol indented_block_body) [80119 81438])
                    ("_get_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81552 81556])
                            ("action" variable nil (reparse-symbol function_parameters) [81558 81564])
                            ("arg_strings" variable nil (reparse-symbol function_parameters) [81566 81577]))                          )
                        (reparse-symbol indented_block_body) [81536 83540])
                    ("_get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83560 83564])
                            ("action" variable nil (reparse-symbol function_parameters) [83566 83572])
                            ("arg_string" variable nil (reparse-symbol function_parameters) [83574 83584]))                          )
                        (reparse-symbol indented_block_body) [83545 84482])
                    ("_check_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84504 84508])
                            ("action" variable nil (reparse-symbol function_parameters) [84510 84516])
                            ("value" variable nil (reparse-symbol function_parameters) [84518 84523]))                          )
                        (reparse-symbol indented_block_body) [84487 84837])
                    ("format_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84949 84953]))                          )
                        (reparse-symbol indented_block_body) [84932 85153])
                    ("format_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85174 85178]))                          )
                        (reparse-symbol indented_block_body) [85158 85886])
                    ("format_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85910 85914]))                          )
                        (reparse-symbol indented_block_body) [85891 86256])
                    ("_get_formatter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86280 86284]))                          )
                        (reparse-symbol indented_block_body) [86261 86339])
                    ("print_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86444 86448])
                            ("file" variable nil (reparse-symbol function_parameters) [86450 86454]))                          )
                        (reparse-symbol indented_block_body) [86428 86573])
                    ("print_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86593 86597])
                            ("file" variable nil (reparse-symbol function_parameters) [86599 86603]))                          )
                        (reparse-symbol indented_block_body) [86578 86721])
                    ("print_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86744 86748])
                            ("file" variable nil (reparse-symbol function_parameters) [86750 86754]))                          )
                        (reparse-symbol indented_block_body) [86726 87035])
                    ("_print_message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87059 87063])
                            ("message" variable nil (reparse-symbol function_parameters) [87065 87072])
                            ("file" variable nil (reparse-symbol function_parameters) [87074 87078]))                          )
                        (reparse-symbol indented_block_body) [87040 87202])
                    ("exit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87282 87286])
                            ("status" variable nil (reparse-symbol function_parameters) [87288 87294])
                            ("message" variable nil (reparse-symbol function_parameters) [87298 87305]))                          )
                        (reparse-symbol indented_block_body) [87273 87413])
                    ("error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87428 87432])
                            ("message" variable nil (reparse-symbol function_parameters) [87434 87441]))                          
                        :documentation "error(message: string)

        Prints a usage message incorporating the message to stderr and
        exits.

        If you override this in a subclass, it should not return -- it
        should either exit or raise an exception.
        ")
                        (reparse-symbol indented_block_body) [87418 87803]))                  
                :type "class")
                nil [54338 87803]))          
    :file "argparse.py"
    :pointmax 87803
    :fsize 87802
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax '((NAME 57135 . 57149) (IF 57156 . 57158) (ELSE 57179 . 57183) (INDENT_BLOCK 39315 . 39421) (NEWLINE 39314 . 39315) (COLON 39313 . 39314) (TRY 39222 . 39225) (AS 39309 . 39311))
    )
   (semanticdb-table "copy_reg.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Helper to provide extensibility for pickle/cPickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
\"\"\"" code nil nil [1 179])
            ("types" include nil nil [181 222])
            ("__all__" variable nil nil [224 332])
            ("dispatch_table" variable nil nil [334 353])
            ("pickle" function (:arguments 
              ( ("ob_type" variable nil (reparse-symbol function_parameters) [366 373])
                ("pickle_function" variable nil (reparse-symbol function_parameters) [375 390])
                ("constructor_ob" variable nil (reparse-symbol function_parameters) [392 406]))              ) nil [355 886])
            ("constructor" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [903 909]))              ) nil [887 1009])
            ("try" code nil nil [1068 1233])
            ("_reconstructor" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [1295 1298])
                ("base" variable nil (reparse-symbol function_parameters) [1300 1304])
                ("state" variable nil (reparse-symbol function_parameters) [1306 1311]))              ) nil [1276 1518])
            ("_HEAPTYPE" code nil nil [1519 1535])
            ("_reduce_ex" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1614 1618])
                    ("proto" variable nil (reparse-symbol function_parameters) [1620 1625]))                  )
                nil [1599 2561])
            ("__newobj__" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [2616 2619])
                ("args" variable nil (reparse-symbol function_parameters) [2621 2626]))              ) nil [2601 2664])
            ("_slotnames" function
               (:documentation "Return a list of slot names for a given class.

    This needs to find slots defined by the class and its bases, so we
    can't simply return the __slots__ attribute.  We must walk down
    the Method Resolution Order and concatenate the __slots__ of each
    class found there.  (This assumes classes don't modify their
    __slots__ attribute to misrepresent their slots after the class is
    defined.)
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2680 2683]))                  )
                nil [2665 4346])
            ("_extension_registry" variable nil nil [4828 4852])
            ("_inverted_registry" variable nil nil [4882 4905])
            ("_extension_cache" variable nil nil [4936 4957])
            ("add_extension" function
               (:documentation "Register an extension code."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5132 5138])
                    ("name" variable nil (reparse-symbol function_parameters) [5140 5144])
                    ("code" variable nil (reparse-symbol function_parameters) [5146 5150]))                  )
                nil [5114 5861])
            ("remove_extension" function
               (:documentation "Unregister an extension code.  For testing only."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5883 5889])
                    ("name" variable nil (reparse-symbol function_parameters) [5891 5895])
                    ("code" variable nil (reparse-symbol function_parameters) [5897 5901]))                  )
                nil [5862 6321])
            ("clear_extension_cache" function nil nil [6322 6380]))          
    :file "copy_reg.py"
    :pointmax 6801
    :fsize 6800
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "functools.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"functools.py - Tools for working with functions and callable objects
\"\"\"" code nil nil [1 76])
            ("_functools" include nil nil [358 396])
            ("WRAPPER_ASSIGNMENTS" variable nil nil [510 569])
            ("WRAPPER_UPDATES" variable nil nil [570 601])
            ("update_wrapper" function
               (:documentation "Update a wrapper function to look like the wrapped function

       wrapper is the function to be updated
       wrapped is the original function
       assigned is a tuple naming the attributes assigned directly
       from the wrapped function to the wrapper function (defaults to
       functools.WRAPPER_ASSIGNMENTS)
       updated is a tuple naming the attributes of the wrapper that
       are updated with the corresponding attribute from the wrapped
       function (defaults to functools.WRAPPER_UPDATES)
    "
                :arguments 
                  ( ("wrapper" variable nil (reparse-symbol function_parameters) [621 628])
                    ("wrapped" variable nil (reparse-symbol function_parameters) [649 656])
                    ("assigned" variable nil (reparse-symbol function_parameters) [677 685])
                    ("updated" variable nil (reparse-symbol function_parameters) [728 735]))                  )
                nil [602 1550])
            ("wraps" function
               (:documentation "Decorator factory to apply update_wrapper() to a wrapper function

       Returns a decorator that invokes update_wrapper() with the decorated
       function as the wrapper argument and the arguments to wraps() as the
       remaining arguments. Default arguments are as for update_wrapper().
       This is a convenience function to simplify applying partial() to
       update_wrapper().
    "
                :arguments 
                  ( ("wrapped" variable nil (reparse-symbol function_parameters) [1561 1568])
                    ("assigned" variable nil (reparse-symbol function_parameters) [1580 1588])
                    ("updated" variable nil (reparse-symbol function_parameters) [1622 1629]))                  )
                nil [1551 2163])
            ("total_ordering" function
               (:documentation "Class decorator that fills in missing ordering methods"
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2183 2186]))                  )
                nil [2164 3689])
            ("cmp_to_key" function
               (:documentation "Convert a cmp= function into a key= function"
                :arguments 
                  ( ("mycmp" variable nil (reparse-symbol function_parameters) [3705 3710]))                  )
                nil [3690 4479]))          
    :file "functools.py"
    :pointmax 4479
    :fsize 4478
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "stat.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Constants/functions for interpreting results of os.stat() and os.lstat().

Suggested usage: from stat import *
\"\"\"" code nil nil [1 118])
            ("ST_MODE" variable nil nil [190 202])
            ("ST_INO" variable nil nil [203 215])
            ("ST_DEV" variable nil nil [216 228])
            ("ST_NLINK" variable nil nil [229 241])
            ("ST_UID" variable nil nil [242 254])
            ("ST_GID" variable nil nil [255 267])
            ("ST_SIZE" variable nil nil [268 280])
            ("ST_ATIME" variable nil nil [281 293])
            ("ST_MTIME" variable nil nil [294 306])
            ("ST_CTIME" variable nil nil [307 319])
            ("S_IMODE" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [363 367]))              ) nil [351 394])
            ("S_IFMT" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [406 410]))              ) nil [395 439])
            ("S_IFDIR" variable nil nil [536 554])
            ("S_IFCHR" variable nil nil [555 573])
            ("S_IFBLK" variable nil nil [574 592])
            ("S_IFREG" variable nil nil [593 611])
            ("S_IFIFO" variable nil nil [612 630])
            ("S_IFLNK" variable nil nil [631 649])
            ("S_IFSOCK" variable nil nil [650 668])
            ("S_ISDIR" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [722 726]))              ) nil [710 764])
            ("S_ISCHR" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [777 781]))              ) nil [765 819])
            ("S_ISBLK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [832 836]))              ) nil [820 874])
            ("S_ISREG" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [887 891]))              ) nil [875 929])
            ("S_ISFIFO" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [943 947]))              ) nil [930 985])
            ("S_ISLNK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [998 1002]))              ) nil [986 1040])
            ("S_ISSOCK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [1054 1058]))              ) nil [1041 1097])
            ("S_ISUID" variable nil nil [1127 1142])
            ("S_ISGID" variable nil nil [1143 1158])
            ("S_ENFMT" variable nil nil [1159 1176])
            ("S_ISVTX" variable nil nil [1177 1192])
            ("S_IREAD" variable nil nil [1193 1208])
            ("S_IWRITE" variable nil nil [1209 1225])
            ("S_IEXEC" variable nil nil [1226 1241])
            ("S_IRWXU" variable nil nil [1242 1257])
            ("S_IRUSR" variable nil nil [1258 1273])
            ("S_IWUSR" variable nil nil [1274 1289])
            ("S_IXUSR" variable nil nil [1290 1305])
            ("S_IRWXG" variable nil nil [1306 1321])
            ("S_IRGRP" variable nil nil [1322 1337])
            ("S_IWGRP" variable nil nil [1338 1353])
            ("S_IXGRP" variable nil nil [1354 1369])
            ("S_IRWXO" variable nil nil [1370 1385])
            ("S_IROTH" variable nil nil [1386 1401])
            ("S_IWOTH" variable nil nil [1402 1417])
            ("S_IXOTH" variable nil nil [1418 1433])
            ("UF_NODUMP" variable nil nil [1459 1484])
            ("UF_IMMUTABLE" variable nil nil [1485 1510])
            ("UF_APPEND" variable nil nil [1511 1536])
            ("UF_OPAQUE" variable nil nil [1537 1562])
            ("UF_NOUNLINK" variable nil nil [1563 1588])
            ("UF_COMPRESSED" variable nil nil [1589 1615])
            ("UF_HIDDEN" variable nil nil [1648 1673])
            ("SF_ARCHIVED" variable nil nil [1713 1738])
            ("SF_IMMUTABLE" variable nil nil [1739 1764])
            ("SF_APPEND" variable nil nil [1765 1790])
            ("SF_NOUNLINK" variable nil nil [1791 1816])
            ("SF_SNAPSHOT" variable nil nil [1817 1842]))          
    :file "stat.py"
    :pointmax 1843
    :fsize 1842
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "fnmatch.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Filename matching with shell patterns.

fnmatch(FILENAME, PATTERN) matches according to the local convention.
fnmatchcase(FILENAME, PATTERN) always takes case in account.

The functions operate by translating the pattern into a regular
expression.  They cache the compiled regular expressions for speed.

The function translate(PATTERN) returns a regular expression
corresponding to PATTERN.  (It does not compile it.)
\"\"\"" code nil nil [1 426])
            ("re" include nil nil [428 437])
            ("__all__" variable nil nil [439 498])
            ("_cache" variable nil nil [500 511])
            ("_MAXCACHE" variable nil nil [512 527])
            ("_purge" function (:documentation "Clear the pattern cache") nil [529 596])
            ("fnmatch" function
               (:documentation "Test whether FILENAME matches PATTERN.

    Patterns are Unix shell style:

    *       matches everything
    ?       matches any single character
    [seq]   matches any character in seq
    [!seq]  matches any char not in seq

    An initial period in FILENAME is not special.
    Both FILENAME and PATTERN are first case-normalized
    if the operating system requires it.
    If you don't want this, use fnmatchcase(FILENAME, PATTERN).
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [609 613])
                    ("pat" variable nil (reparse-symbol function_parameters) [615 618]))                  )
                nil [597 1192])
            ("filter" function
               (:documentation "Return the subset of the list NAMES that match PAT"
                :arguments 
                  ( ("names" variable nil (reparse-symbol function_parameters) [1204 1209])
                    ("pat" variable nil (reparse-symbol function_parameters) [1211 1214]))                  )
                nil [1193 1856])
            ("fnmatchcase" function
               (:documentation "Test whether FILENAME matches PATTERN, including case.

    This is a version of fnmatch() which doesn't case-normalize
    its arguments.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [1873 1877])
                    ("pat" variable nil (reparse-symbol function_parameters) [1879 1882]))                  )
                nil [1857 2244])
            ("translate" function
               (:documentation "Translate a shell PATTERN to a regular expression.

    There is no way to quote meta-characters.
    "
                :arguments 
                  ( ("pat" variable nil (reparse-symbol function_parameters) [2259 2262]))                  )
                nil [2245 3240]))          
    :file "fnmatch.py"
    :pointmax 3240
    :fsize 3239
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "collections.py"
    :major-mode 'python-mode
    :tags 
        '( ("__all__" variable nil nil [1 75])
            ("_abcoll" include nil nil [224 245])
            ("_abcoll" include nil nil [246 260])
            ("__all__" variable nil nil [261 287])
            ("_collections" include nil nil [289 332])
            ("operator" include nil nil [333 379])
            ("keyword" include nil nil [380 423])
            ("sys" include nil nil [424 442])
            ("heapq" include nil nil [443 465])
            ("itertools" include nil nil [466 543])
            ("try" code nil nil [545 670])
            ("OrderedDict" type
               (:superclasses ("dict")
                :members 
                  ( ("'Dictionary that remembers insertion order'" code nil (reparse-symbol indented_block_body) [880 923])
                    ("__init__" function
                       (:suite 
                          ( ("'''Initialize an ordered dictionary.  The signature is the same as
        regular dictionaries, but keyword arguments are not recommended because
        their insertion order is arbitrary.

        '''" code nil (reparse-symbol indented_block_body) [1532 1735])
                            ("if" code nil (reparse-symbol indented_block_body) [1744 1842])
                            ("try" code nil (reparse-symbol indented_block_body) [1850 2051])
                            ("self" code nil (reparse-symbol indented_block_body) [2059 2087]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1502 1506])
                            ("args" variable nil (reparse-symbol function_parameters) [1508 1513])
                            ("kwds" variable nil (reparse-symbol function_parameters) [1515 1521]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1489 2088])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2109 2113])
                            ("key" variable nil (reparse-symbol function_parameters) [2115 2118])
                            ("value" variable nil (reparse-symbol function_parameters) [2120 2125])
                            ("PREV" variable nil (reparse-symbol function_parameters) [2127 2131])
                            ("NEXT" variable nil (reparse-symbol function_parameters) [2135 2139])
                            ("dict_setitem" variable nil (reparse-symbol function_parameters) [2143 2155]))                          )
                        (reparse-symbol indented_block_body) [2093 2579])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2600 2604])
                            ("key" variable nil (reparse-symbol function_parameters) [2606 2609])
                            ("PREV" variable nil (reparse-symbol function_parameters) [2611 2615])
                            ("NEXT" variable nil (reparse-symbol function_parameters) [2619 2623])
                            ("dict_delitem" variable nil (reparse-symbol function_parameters) [2627 2639]))                          )
                        (reparse-symbol indented_block_body) [2584 3022])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3040 3044]))                          )
                        (reparse-symbol indented_block_body) [3027 3298])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3320 3324]))                          )
                        (reparse-symbol indented_block_body) [3303 3594])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3609 3613]))                          )
                        (reparse-symbol indented_block_body) [3599 3858])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3947 3951]))                          )
                        (reparse-symbol indented_block_body) [3938 4022])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4038 4042]))                          )
                        (reparse-symbol indented_block_body) [4027 4134])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4149 4153]))                          )
                        (reparse-symbol indented_block_body) [4139 4263])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4281 4285]))                          )
                        (reparse-symbol indented_block_body) [4268 4373])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4393 4397]))                          )
                        (reparse-symbol indented_block_body) [4378 4510])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4529 4533]))                          )
                        (reparse-symbol indented_block_body) [4515 4662])
                    ("update" variable nil (reparse-symbol indented_block_body) [4667 4697])
                    ("__update" variable nil (reparse-symbol indented_block_body) [4703 4720])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [4785 4804])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4818 4822])
                            ("key" variable nil (reparse-symbol function_parameters) [4824 4827])
                            ("default" variable nil (reparse-symbol function_parameters) [4829 4836]))                          )
                        (reparse-symbol indented_block_body) [4810 5240])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5260 5264])
                            ("key" variable nil (reparse-symbol function_parameters) [5266 5269])
                            ("default" variable nil (reparse-symbol function_parameters) [5271 5278]))                          )
                        (reparse-symbol indented_block_body) [5245 5469])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5486 5490])
                            ("last" variable nil (reparse-symbol function_parameters) [5492 5496]))                          )
                        (reparse-symbol indented_block_body) [5474 5858])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5876 5880])
                            ("_repr_running" variable nil (reparse-symbol function_parameters) [5882 5895]))                          )
                        (reparse-symbol indented_block_body) [5863 6304])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6324 6328]))                          )
                        (reparse-symbol indented_block_body) [6309 6654])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6668 6672]))                          )
                        (reparse-symbol indented_block_body) [6659 6755])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6790 6793])
                            ("iterable" variable nil (reparse-symbol function_parameters) [6795 6803])
                            ("value" variable nil (reparse-symbol function_parameters) [6805 6810]))                          )
                        (reparse-symbol indented_block_body) [6760 7060])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7076 7080])
                            ("other" variable nil (reparse-symbol function_parameters) [7082 7087]))                          )
                        (reparse-symbol indented_block_body) [7065 7410])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7426 7430])
                            ("other" variable nil (reparse-symbol function_parameters) [7432 7437]))                          )
                        (reparse-symbol indented_block_body) [7415 7507])
                    ("viewkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7602 7606]))                          )
                        (reparse-symbol indented_block_body) [7589 7714])
                    ("viewvalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7734 7738]))                          )
                        (reparse-symbol indented_block_body) [7719 7844])
                    ("viewitems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7863 7867]))                          )
                        (reparse-symbol indented_block_body) [7849 7978]))                  
                :type "class")
                nil [851 7978])
            ("namedtuple" function
               (:documentation "Returns a new subclass of tuple with named fields.

    >>> Point = namedtuple('Point', 'x y')
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessable by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)

    "
                :arguments 
                  ( ("typename" variable nil (reparse-symbol function_parameters) [8173 8181])
                    ("field_names" variable nil (reparse-symbol function_parameters) [8183 8194])
                    ("verbose" variable nil (reparse-symbol function_parameters) [8196 8203])
                    ("rename" variable nil (reparse-symbol function_parameters) [8211 8217]))                  )
                nil [8158 13490])
            ("Counter" type
               (:superclasses ("dict")
                :members 
                  ( ("'''Dict subclass for counting hashable items.  Sometimes called a bag
    or multiset.  Elements are stored as dictionary keys and their counts
    are stored as dictionary values.

    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string

    >>> c.most_common(3)                # three most common elements
    [('a', 5), ('b', 4), ('c', 3)]
    >>> sorted(c)                       # list all unique elements
    ['a', 'b', 'c', 'd', 'e']
    >>> ''.join(sorted(c.elements()))   # list elements with repetitions
    'aaaaabbbbcccdde'
    >>> sum(c.values())                 # total of all counts
    15

    >>> c['a']                          # count of letter 'a'
    5
    >>> for elem in 'shazam':           # update counts from an iterable
    ...     c[elem] += 1                # by adding 1 to each element's count
    >>> c['a']                          # now there are seven 'a'
    7
    >>> del c['b']                      # remove all 'b'
    >>> c['b']                          # now there are zero 'b'
    0

    >>> d = Counter('simsalabim')       # make another counter
    >>> c.update(d)                     # add in the second counter
    >>> c['a']                          # now there are nine 'a'
    9

    >>> c.clear()                       # empty the counter
    >>> c
    Counter()

    Note:  If a count is set to zero or reduced to zero, it will remain
    in the counter until the entry is deleted or the counter is cleared:

    >>> c = Counter('aaabbc')
    >>> c['b'] -= 2                     # reduce the count of 'b' by two
    >>> c.most_common()                 # 'b' is still in, but its count is zero
    [('a', 3), ('c', 1), ('b', 0)]

    '''" code nil (reparse-symbol indented_block_body) [13677 15378])
                    ("__init__" function
                       (:suite 
                          ( ("'''Create a new, empty Counter object.  And if given, count elements
        from an input iterable.  Or, initialize the count from another mapping
        of elements to their counts.

        >>> c = Counter()                           # a new, empty counter
        >>> c = Counter('gallahad')                 # a new counter from an iterable
        >>> c = Counter({'a': 4, 'b': 2})           # a new counter from a mapping
        >>> c = Counter(a=4, b=2)                   # a new counter from keyword args

        '''" code nil (reparse-symbol indented_block_body) [15763 16290])
                            ("super" code nil (reparse-symbol indented_block_body) [16299 16330])
                            ("self" code nil (reparse-symbol indented_block_body) [16339 16368]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15725 15729])
                            ("iterable" variable nil (reparse-symbol function_parameters) [15731 15739])
                            ("kwds" variable nil (reparse-symbol function_parameters) [15746 15752]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15712 16369])
                    ("__missing__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16390 16394])
                            ("key" variable nil (reparse-symbol function_parameters) [16396 16399]))                          )
                        (reparse-symbol indented_block_body) [16374 16547])
                    ("most_common" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16568 16572])
                            ("n" variable nil (reparse-symbol function_parameters) [16574 16575]))                          )
                        (reparse-symbol indented_block_body) [16552 17061])
                    ("elements" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17079 17083]))                          )
                        (reparse-symbol indented_block_body) [17066 17884])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [17964 17967])
                            ("iterable" variable nil (reparse-symbol function_parameters) [17969 17977])
                            ("v" variable nil (reparse-symbol function_parameters) [17979 17980]))                          )
                        (reparse-symbol indented_block_body) [17934 18243])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18259 18263])
                            ("iterable" variable nil (reparse-symbol function_parameters) [18265 18273])
                            ("kwds" variable nil (reparse-symbol function_parameters) [18280 18286]))                          )
                        (reparse-symbol indented_block_body) [18248 19789])
                    ("subtract" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19807 19811])
                            ("iterable" variable nil (reparse-symbol function_parameters) [19813 19821])
                            ("kwds" variable nil (reparse-symbol function_parameters) [19828 19834]))                          )
                        (reparse-symbol indented_block_body) [19794 20930])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20944 20948]))                          )
                        (reparse-symbol indented_block_body) [20935 21020])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21040 21044]))                          )
                        (reparse-symbol indented_block_body) [21025 21092])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21113 21117])
                            ("elem" variable nil (reparse-symbol function_parameters) [21119 21123]))                          )
                        (reparse-symbol indented_block_body) [21097 21284])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21302 21306]))                          )
                        (reparse-symbol indented_block_body) [21289 21512])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21869 21873])
                            ("other" variable nil (reparse-symbol function_parameters) [21875 21880]))                          )
                        (reparse-symbol indented_block_body) [21857 22430])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22447 22451])
                            ("other" variable nil (reparse-symbol function_parameters) [22453 22458]))                          )
                        (reparse-symbol indented_block_body) [22435 23037])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23053 23057])
                            ("other" variable nil (reparse-symbol function_parameters) [23059 23064]))                          )
                        (reparse-symbol indented_block_body) [23042 23711])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23728 23732])
                            ("other" variable nil (reparse-symbol function_parameters) [23734 23739]))                          )
                        (reparse-symbol indented_block_body) [23716 24235]))                  
                :type "class")
                nil [13652 24235])
            ("if" code nil nil [24237 25404]))          
    :file "collections.py"
    :pointmax 25404
    :fsize 25403
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax '((NAME 24862 . 24872) (PAREN_BLOCK 24872 . 24888) (NAME 24520 . 24530) (PAREN_BLOCK 24530 . 24546) (NAME 24087 . 24095) (IF 24104 . 24106) (ELSE 24127 . 24131) (NAME 23437 . 23445) (IF 23460 . 23462) (ELSE 23483 . 23487))
    )
   (semanticdb-table "genericpath.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
Path operations common to more than one OS
Do not use directly.  The OS specific modules import the appropriate
functions from this module themselves.
\"\"\"" code nil nil [1 159])
            ("os" include nil nil [160 169])
            ("stat" include nil nil [170 181])
            ("__all__" variable nil nil [183 296])
            ("exists" function
               (:documentation "Test whether a path exists.  Returns False for broken symbolic links"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [405 409]))                  )
                nil [394 580])
            ("isfile" function
               (:documentation "Test whether a path is a regular file"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [719 723]))                  )
                nil [708 888])
            ("isdir" function
               (:documentation "Return true if the pathname refers to an existing directory."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1050 1051]))                  )
                nil [1040 1236])
            ("getsize" function
               (:documentation "Return the size of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1250 1258]))                  )
                nil [1238 1358])
            ("getmtime" function
               (:documentation "Return the last modification time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1373 1381]))                  )
                nil [1360 1500])
            ("getatime" function
               (:documentation "Return the last access time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1515 1523]))                  )
                nil [1502 1636])
            ("getctime" function
               (:documentation "Return the metadata change time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1651 1659]))                  )
                nil [1638 1776])
            ("commonprefix" function (:arguments 
              ( ("m" variable nil (reparse-symbol function_parameters) [1845 1846]))              ) nil [1828 2077])
            ("_splitext" function
               (:documentation "Split the extension from a pathname.

    Extension is everything from the last dot to the end, ignoring
    leading dots.  Returns \"(root, ext)\"; ext may be empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [2377 2378])
                    ("sep" variable nil (reparse-symbol function_parameters) [2380 2383])
                    ("altsep" variable nil (reparse-symbol function_parameters) [2385 2391])
                    ("extsep" variable nil (reparse-symbol function_parameters) [2393 2399]))                  )
                nil [2363 3016]))          
    :file "genericpath.py"
    :pointmax 3016
    :fsize 3015
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "warnings.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Python part of the warnings subsystem.\"\"\"" code nil nil [1 45])
            ("linecache" include nil nil [172 188])
            ("sys" include nil nil [189 199])
            ("types" include nil nil [200 212])
            ("__all__" variable nil nil [214 328])
            ("warnpy3k" function
               (:documentation "Issue a deprecation warning for Python 3.x related changes.

    Warnings are omitted unless Python is started with the -3 option.
    "
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [344 351])
                    ("category" variable nil (reparse-symbol function_parameters) [353 361])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [368 378]))                  )
                nil [331 670])
            ("_show_warning" function
               (:documentation "Hook to write a warning to a file; replace if you like."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [689 696])
                    ("category" variable nil (reparse-symbol function_parameters) [698 706])
                    ("filename" variable nil (reparse-symbol function_parameters) [708 716])
                    ("lineno" variable nil (reparse-symbol function_parameters) [718 724])
                    ("file" variable nil (reparse-symbol function_parameters) [726 730])
                    ("line" variable nil (reparse-symbol function_parameters) [737 741]))                  )
                nil [671 1047])
            ("showwarning" variable nil nil [1134 1161])
            ("formatwarning" function
               (:documentation "Function to format a warning the standard way."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [1181 1188])
                    ("category" variable nil (reparse-symbol function_parameters) [1190 1198])
                    ("filename" variable nil (reparse-symbol function_parameters) [1200 1208])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1210 1216])
                    ("line" variable nil (reparse-symbol function_parameters) [1218 1222]))                  )
                nil [1163 1519])
            ("filterwarnings" function
               (:documentation "Insert an entry into the list of warnings filters (at the front).

    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'message' -- a regex that the warning message must match
    'category' -- a class that the warning must be a subclass of
    'module' -- a regex that the module name must match
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [1539 1545])
                    ("message" variable nil (reparse-symbol function_parameters) [1547 1554])
                    ("category" variable nil (reparse-symbol function_parameters) [1559 1567])
                    ("module" variable nil (reparse-symbol function_parameters) [1577 1583])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1588 1594])
                    ("append" variable nil (reparse-symbol function_parameters) [1617 1623]))                  )
                nil [1520 2854])
            ("simplefilter" function
               (:documentation "Insert a simple entry into the list of warnings filters (at the front).

    A simple filter matches all modules and messages.
    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'category' -- a class that the warning must be a subclass of
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [2872 2878])
                    ("category" variable nil (reparse-symbol function_parameters) [2880 2888])
                    ("lineno" variable nil (reparse-symbol function_parameters) [2898 2904])
                    ("append" variable nil (reparse-symbol function_parameters) [2908 2914]))                  )
                nil [2855 3709])
            ("resetwarnings" function (:documentation "Clear the list of warning filters, so that no filters are active.") nil [3710 3827])
            ("_OptionError" type
               (:documentation "Exception used by option processing helpers."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [3918 3922]))                  
                :type "class")
                nil [3828 3923])
            ("_processoptions" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [4002 4006]))              ) nil [3982 4171])
            ("_setoption" function (:arguments 
              ( ("arg" variable nil (reparse-symbol function_parameters) [4218 4221]))              ) nil [4203 5029])
            ("_getaction" function (:arguments 
              ( ("action" variable nil (reparse-symbol function_parameters) [5071 5077]))              ) nil [5056 5356])
            ("_getcategory" function (:arguments 
              ( ("category" variable nil (reparse-symbol function_parameters) [5400 5408]))              ) nil [5383 6216])
            ("warn" function
               (:documentation "Issue a warning, or maybe ignore it or raise an exception."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [6266 6273])
                    ("category" variable nil (reparse-symbol function_parameters) [6275 6283])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [6290 6300]))                  )
                nil [6257 7596])
            ("warn_explicit" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [7615 7622])
                ("category" variable nil (reparse-symbol function_parameters) [7624 7632])
                ("filename" variable nil (reparse-symbol function_parameters) [7634 7642])
                ("lineno" variable nil (reparse-symbol function_parameters) [7644 7650])
                ("module" variable nil (reparse-symbol function_parameters) [7670 7676])
                ("registry" variable nil (reparse-symbol function_parameters) [7683 7691])
                ("module_globals" variable nil (reparse-symbol function_parameters) [7698 7712]))              ) nil [7597 9607])
            ("WarningMessage" type
               (:documentation "Holds the result of a single showwarning() call."
                :superclasses ("object")
                :members 
                  ( ("_WARNING_DETAILS" variable nil (reparse-symbol indented_block_body) [9704 9808])
                    ("__init__" function
                       (:suite 
                          ( ("local_values" variable nil (reparse-symbol indented_block_body) [9921 9944])
                            ("for" code nil (reparse-symbol indented_block_body) [9953 10040])
                            ("None" code nil (reparse-symbol indented_block_body) [10105 10109]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9827 9831])
                            ("message" variable nil (reparse-symbol function_parameters) [9833 9840])
                            ("category" variable nil (reparse-symbol function_parameters) [9842 9850])
                            ("filename" variable nil (reparse-symbol function_parameters) [9852 9860])
                            ("lineno" variable nil (reparse-symbol function_parameters) [9862 9868])
                            ("file" variable nil (reparse-symbol function_parameters) [9870 9874])
                            ("line" variable nil (reparse-symbol function_parameters) [9901 9905]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9814 10110])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10127 10131]))                          )
                        (reparse-symbol indented_block_body) [10115 10358]))                  
                :type "class")
                nil [9609 10358])
            ("catch_warnings" type
               (:documentation "A context manager that copies and restores the warnings filter upon
    exiting the context.

    The 'record' argument specifies whether warnings should be captured by a
    custom implementation of warnings.showwarning() and be appended to a list
    returned by the context manager. Otherwise None is returned by the context
    manager. The objects appended to the list are arguments whose attributes
    mirror the arguments to showwarning().

    The 'module' argument is to specify an alternative module to the module
    named 'warnings' and imported under that name. This argument is only useful
    when testing the warnings module itself.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        \"\"\"" code nil (reparse-symbol indented_block_body) [11117 11357])
                            ("self" variable nil (reparse-symbol indented_block_body) [11366 11387])
                            ("module" code nil (reparse-symbol indented_block_body) [11458 11464])
                            ("self" variable nil (reparse-symbol indented_block_body) [11473 11494]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11075 11079])
                            ("record" variable nil (reparse-symbol function_parameters) [11081 11087])
                            ("module" variable nil (reparse-symbol function_parameters) [11095 11101]))                          
                        :documentation "Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11062 11495])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11513 11517]))                          )
                        (reparse-symbol indented_block_body) [11500 11795])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11814 11818]))                          )
                        (reparse-symbol indented_block_body) [11800 12349])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12367 12371])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [12373 12382]))                          )
                        (reparse-symbol indented_block_body) [12354 12592]))                  
                :type "class")
                nil [10360 12592])
            ("_warnings_defaults" variable nil nil [13044 13070])
            ("try" code nil nil [13071 13379])
            ("_processoptions" code nil nil [13405 13437])
            ("if" code nil nil [13438 14022])
            ("del" code nil nil [14022 14044]))          
    :file "warnings.py"
    :pointmax 14045
    :fsize 14044
    :lastmodtime '(21060 39147 0 0)
    :unmatched-syntax '((NAME 11396 . 11400) (IF 11435 . 11437) (ELSE 11453 . 11457) (NAME 10048 . 10052) (IF 10088 . 10090) (ELSE 10100 . 10104) (NAME 1367 . 1371) (IF 1410 . 1412) (ELSE 1426 . 1430))
    )
   (semanticdb-table "linecache.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Cache lines from files.

This is intended to read lines from modules imported -- hence if a filename
is not found, it will look down the module search path for a file by
that name.
\"\"\"" code nil nil [1 188])
            ("sys" include nil nil [190 200])
            ("os" include nil nil [201 210])
            ("__all__" variable nil nil [212 261])
            ("getline" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [275 283])
                ("lineno" variable nil (reparse-symbol function_parameters) [285 291])
                ("module_globals" variable nil (reparse-symbol function_parameters) [293 307]))              ) nil [263 455])
            ("cache" variable nil nil [470 480])
            ("clearcache" function (:documentation "Clear the cache entirely.") nil [495 582])
            ("getlines" function
               (:documentation "Get the lines for a file from the cache.
    Update the cache if it doesn't contain an entry for this file already."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [597 605])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [607 621]))                  )
                nil [584 879])
            ("checkcache" function
               (:documentation "Discard cache entries that are out of date.
    (This is not checked upon each call!)"
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [896 904]))                  )
                nil [881 1572])
            ("updatecache" function
               (:documentation "Update a cache entry and return its list of lines.
    If something's wrong, print a message, discard the cache entry,
    and return an empty list."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1590 1598])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [1600 1614]))                  )
                nil [1574 4119]))          
    :file "linecache.py"
    :pointmax 4119
    :fsize 4118
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "types.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Define names for all type symbols known in the standard interpreter.

Types that are part of optional modules (e.g. array) are not listed.
\"\"\"" code nil nil [1 146])
            ("sys" include nil nil [147 157])
            ("NoneType" variable nil nil [408 429])
            ("TypeType" variable nil nil [430 445])
            ("ObjectType" variable nil nil [446 465])
            ("IntType" variable nil nil [467 480])
            ("LongType" variable nil nil [481 496])
            ("FloatType" variable nil nil [497 514])
            ("BooleanType" variable nil nil [515 533])
            ("try" code nil nil [534 592])
            ("StringType" variable nil nil [593 609])
            ("try" code nil nil [801 926])
            ("BufferType" variable nil nil [927 946])
            ("TupleType" variable nil nil [948 965])
            ("ListType" variable nil nil [966 981])
            ("DictType" variable nil nil [982 1014])
            ("_f" function nil nil [1016 1031])
            ("FunctionType" variable nil nil [1031 1054])
            ("LambdaType" variable nil nil [1055 1086])
            ("CodeType" variable nil nil [1118 1147])
            ("_g" function nil nil [1149 1171])
            ("GeneratorType" variable nil nil [1171 1197])
            ("_C" type
               (:members 
                  ( ("_m" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1220 1224]))                          )
                        (reparse-symbol indented_block_body) [1213 1232]))                  
                :type "class")
                nil [1199 1232])
            ("ClassType" variable nil nil [1232 1252])
            ("UnboundMethodType" variable nil nil [1253 1284])
            ("_x" variable nil nil [1314 1323])
            ("InstanceType" variable nil nil [1324 1347])
            ("MethodType" variable nil nil [1348 1372])
            ("BuiltinFunctionType" variable nil nil [1374 1405])
            ("BuiltinMethodType" variable nil nil [1406 1441])
            ("ModuleType" variable nil nil [1477 1499])
            ("FileType" variable nil nil [1500 1515])
            ("XRangeType" variable nil nil [1516 1535])
            ("try" code nil nil [1537 1681])
            ("SliceType" variable nil nil [1682 1699])
            ("EllipsisType" variable nil nil [1700 1729])
            ("DictProxyType" variable nil nil [1731 1770])
            ("NotImplementedType" variable nil nil [1771 1812])
            ("GetSetDescriptorType" variable nil nil [1866 1917])
            ("MemberDescriptorType" variable nil nil [1918 1972])
            ("del" code nil nil [1974 1997]))          
    :file "types.py"
    :pointmax 2041
    :fsize 2040
    :lastmodtime '(21060 39147 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "string.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"A collection of string operations (most are no longer used).

Warning: most of the code you see here isn't normally used nowadays.
Beginning with Python 1.6, many of these functions are implemented as
methods on the standard string object. They used to be implemented by
a built-in module called strop, but strop is now obsolete itself.

Public module variables:

whitespace -- a string containing all characters considered whitespace
lowercase -- a string containing all characters considered lowercase letters
uppercase -- a string containing all characters considered uppercase letters
letters -- a string containing all characters considered letters
digits -- a string containing all characters considered decimal digits
hexdigits -- a string containing all characters considered hexadecimal digits
octdigits -- a string containing all characters considered octal digits
punctuation -- a string containing all characters considered punctuation
printable -- a string containing all characters considered printable

\"\"\"" code nil nil [1 1025])
            ("whitespace" variable nil nil [1083 1109])
            ("lowercase" variable nil nil [1110 1150])
            ("uppercase" variable nil nil [1151 1191])
            ("letters" code nil nil [1192 1223])
            ("ascii_lowercase" variable nil nil [1224 1251])
            ("ascii_uppercase" variable nil nil [1252 1279])
            ("ascii_letters" code nil nil [1280 1329])
            ("digits" variable nil nil [1330 1351])
            ("hexdigits" code nil nil [1352 1392])
            ("octdigits" variable nil nil [1393 1415])
            ("punctuation" variable nil nil [1416 1468])
            ("printable" code nil nil [1469 1524])
            ("l" variable nil nil [1603 1628])
            ("_idmap" variable nil nil [1629 1653])
            ("del" code nil nil [1654 1659])
            ("capwords" function
               (:documentation "capwords(s [,sep]) -> string

    Split the argument into words using split, capitalize each
    word using capitalize, and join the capitalized words using
    join.  If the optional second argument sep is absent or None,
    runs of whitespace characters are replaced by a single space
    and leading and trailing whitespace are removed, otherwise
    sep is used to split and join the words.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1797 1798])
                    ("sep" variable nil (reparse-symbol function_parameters) [1800 1803]))                  )
                nil [1784 2290])
            ("_idmapL" variable nil nil [2325 2339])
            ("maketrans" function
               (:documentation "maketrans(frm, to) -> string

    Return a translation table (a string of 256 bytes long)
    suitable for use in string.translate.  The strings frm and to
    must be of the same length.

    "
                :arguments 
                  ( ("fromstr" variable nil (reparse-symbol function_parameters) [2354 2361])
                    ("tostr" variable nil (reparse-symbol function_parameters) [2363 2368]))                  )
                nil [2340 2890])
            ("re" include nil nil [2962 2978])
            ("_multimap" type
               (:documentation "Helper class for combining multiple mappings.

    Used by .{safe_,}substitute() to combine the mapping and keyword
    arguments.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3195 3218])
                            ("self" variable nil (reparse-symbol indented_block_body) [3227 3254]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3160 3164])
                            ("primary" variable nil (reparse-symbol function_parameters) [3166 3173])
                            ("secondary" variable nil (reparse-symbol function_parameters) [3175 3184]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3147 3255])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3276 3280])
                            ("key" variable nil (reparse-symbol function_parameters) [3282 3285]))                          )
                        (reparse-symbol indented_block_body) [3260 3404]))                  
                :type "class")
                nil [2980 3404])
            ("_TemplateMetaclass" type
               (:superclasses ("type")
                :members 
                  ( ("pattern" variable nil (reparse-symbol indented_block_body) [3442 3762])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [3813 3870])
                            ("if" code nil (reparse-symbol indented_block_body) [3879 4113])
                            ("cls" variable nil (reparse-symbol indented_block_body) [4121 4185]))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3781 3784])
                            ("name" variable nil (reparse-symbol function_parameters) [3786 3790])
                            ("bases" variable nil (reparse-symbol function_parameters) [3792 3797])
                            ("dct" variable nil (reparse-symbol function_parameters) [3799 3802]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3768 4186]))                  
                :type "class")
                nil [3406 4186])
            ("Template" type
               (:documentation "A string class for supporting $-substitutions."
                :members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [4265 4299])
                    ("delimiter" variable nil (reparse-symbol indented_block_body) [4305 4320])
                    ("idpattern" variable nil (reparse-symbol indented_block_body) [4325 4356])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4400 4424]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4375 4379])
                            ("template" variable nil (reparse-symbol function_parameters) [4381 4389]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4362 4425])
                    ("_invalid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4510 4514])
                            ("mo" variable nil (reparse-symbol function_parameters) [4516 4518]))                          )
                        (reparse-symbol indented_block_body) [4497 4884])
                    ("substitute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4904 4908])
                            ("args" variable nil (reparse-symbol function_parameters) [4910 4915])
                            ("kws" variable nil (reparse-symbol function_parameters) [4917 4922]))                          )
                        (reparse-symbol indented_block_body) [4889 5933])
                    ("safe_substitute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5958 5962])
                            ("args" variable nil (reparse-symbol function_parameters) [5964 5969])
                            ("kws" variable nil (reparse-symbol function_parameters) [5971 5976]))                          )
                        (reparse-symbol indented_block_body) [5938 7244]))                  
                :type "class")
                nil [4188 7244])
            ("index_error" variable nil nil [7475 7499])
            ("atoi_error" variable nil nil [7500 7523])
            ("atof_error" variable nil nil [7524 7547])
            ("atol_error" variable nil nil [7548 7571])
            ("lower" function
               (:documentation "lower(s) -> string

    Return a copy of the string s converted to lowercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7626 7627]))                  )
                nil [7616 7745])
            ("upper" function
               (:documentation "upper(s) -> string

    Return a copy of the string s converted to uppercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7799 7800]))                  )
                nil [7789 7918])
            ("swapcase" function
               (:documentation "swapcase(s) -> string

    Return a copy of the string s with upper case characters
    converted to lowercase and vice versa.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7973 7974]))                  )
                nil [7960 8144])
            ("strip" function
               (:documentation "strip(s [,chars]) -> string

    Return a copy of the string s with leading and trailing
    whitespace removed.
    If chars is given and not None, remove characters in chars instead.
    If chars is unicode, S will be converted to unicode before stripping.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8200 8201])
                    ("chars" variable nil (reparse-symbol function_parameters) [8203 8208]))                  )
                nil [8190 8517])
            ("lstrip" function
               (:documentation "lstrip(s [,chars]) -> string

    Return a copy of the string s with leading whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8561 8562])
                    ("chars" variable nil (reparse-symbol function_parameters) [8564 8569]))                  )
                nil [8550 8789])
            ("rstrip" function
               (:documentation "rstrip(s [,chars]) -> string

    Return a copy of the string s with trailing whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8834 8835])
                    ("chars" variable nil (reparse-symbol function_parameters) [8837 8842]))                  )
                nil [8823 9063])
            ("split" function
               (:documentation "split(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string.  If maxsplit is given, splits at no more than
    maxsplit places (resulting in at most maxsplit+1 words).  If sep
    is not specified or is None, any whitespace string is a separator.

    (split and splitfields are synonymous)

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9133 9134])
                    ("sep" variable nil (reparse-symbol function_parameters) [9136 9139])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9146 9154]))                  )
                nil [9123 9575])
            ("splitfields" variable nil nil [9575 9594])
            ("rsplit" function
               (:documentation "rsplit(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string, starting at the end of the string and working
    to the front.  If maxsplit is given, at most maxsplit splits are
    done. If sep is not specified or is None, any whitespace string
    is a separator.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9665 9666])
                    ("sep" variable nil (reparse-symbol function_parameters) [9668 9671])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9678 9686]))                  )
                nil [9654 10081])
            ("join" function
               (:documentation "join(list [,sep]) -> string

    Return a string composed of the words in list, with
    intervening occurrences of sep.  The default separator is a
    single space.

    (joinfields and join are synonymous)

    "
                :arguments 
                  ( ("words" variable nil (reparse-symbol function_parameters) [10129 10134])
                    ("sep" variable nil (reparse-symbol function_parameters) [10136 10139]))                  )
                nil [10120 10400])
            ("joinfields" variable nil nil [10400 10417])
            ("index" function
               (:documentation "index(s, sub [,start [,end]]) -> int

    Like find but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10476 10477])
                    ("args" variable nil (reparse-symbol function_parameters) [10479 10484]))                  )
                nil [10466 10636])
            ("rindex" function
               (:documentation "rindex(s, sub [,start [,end]]) -> int

    Like rfind but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10700 10701])
                    ("args" variable nil (reparse-symbol function_parameters) [10703 10708]))                  )
                nil [10689 10863])
            ("count" function
               (:documentation "count(s, sub[, start[,end]]) -> int

    Return the number of occurrences of substring sub in string
    s[start:end].  Optional arguments start and end are
    interpreted as in slice notation.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10923 10924])
                    ("args" variable nil (reparse-symbol function_parameters) [10926 10931]))                  )
                nil [10913 11171])
            ("find" function
               (:documentation "find(s, sub [,start [,end]]) -> in

    Return the lowest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11222 11223])
                    ("args" variable nil (reparse-symbol function_parameters) [11225 11230]))                  )
                nil [11213 11528])
            ("rfind" function
               (:documentation "rfind(s, sub [,start [,end]]) -> int

    Return the highest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11585 11586])
                    ("args" variable nil (reparse-symbol function_parameters) [11588 11593]))                  )
                nil [11575 11895])
            ("_float" variable nil nil [11917 11931])
            ("_int" variable nil nil [11932 11942])
            ("_long" variable nil nil [11943 11955])
            ("atof" function
               (:documentation "atof(s) -> float

    Return the floating point number represented by the string s.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11992 11993]))                  )
                nil [11983 12117])
            ("atoi" function
               (:documentation "atoi(s [,base]) -> int

    Return the integer represented by the string s in the given
    base, which defaults to 10.  The string s must consist of one
    or more digits, possibly preceded by a sign.  If base is 0, it
    is chosen from the leading characters of s, 0 for octal, 0x or
    0X for hexadecimal.  If base is 16, a preceding 0x or 0X is
    accepted.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12156 12157])
                    ("base" variable nil (reparse-symbol function_parameters) [12160 12164]))                  )
                nil [12147 12577])
            ("atol" function
               (:documentation "atol(s [,base]) -> long

    Return the long integer represented by the string s in the
    given base, which defaults to 10.  The string s must consist
    of one or more digits, possibly preceded by a sign.  If base
    is 0, it is chosen from the leading characters of s, 0 for
    octal, 0x or 0X for hexadecimal.  If base is 16, a preceding
    0x or 0X is accepted.  A trailing L or l is not accepted,
    unless base is 0.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12621 12622])
                    ("base" variable nil (reparse-symbol function_parameters) [12624 12628]))                  )
                nil [12612 13106])
            ("ljust" function
               (:documentation "ljust(s, width[, fillchar]) -> string

    Return a left-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13142 13143])
                    ("width" variable nil (reparse-symbol function_parameters) [13145 13150])
                    ("args" variable nil (reparse-symbol function_parameters) [13152 13157]))                  )
                nil [13132 13449])
            ("rjust" function
               (:documentation "rjust(s, width[, fillchar]) -> string

    Return a right-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13485 13486])
                    ("width" variable nil (reparse-symbol function_parameters) [13488 13493])
                    ("args" variable nil (reparse-symbol function_parameters) [13495 13500]))                  )
                nil [13475 13793])
            ("center" function
               (:documentation "center(s, width[, fillchar]) -> string

    Return a center version of s, in a field of the specified
    width. padded with spaces as needed.  The string is never
    truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13823 13824])
                    ("width" variable nil (reparse-symbol function_parameters) [13826 13831])
                    ("args" variable nil (reparse-symbol function_parameters) [13833 13838]))                  )
                nil [13812 14124])
            ("zfill" function
               (:documentation "zfill(x, width) -> string

    Pad a numeric string x with zeros on the left, to fill a field
    of the specified width.  The string x is never truncated.

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [14336 14337])
                    ("width" variable nil (reparse-symbol function_parameters) [14339 14344]))                  )
                nil [14326 14603])
            ("expandtabs" function
               (:documentation "expandtabs(s [,tabsize]) -> string

    Return a copy of the string s with all tab characters replaced
    by the appropriate number of spaces, depending on the current
    column, and the tabsize (default 8).

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [14718 14719])
                    ("tabsize" variable nil (reparse-symbol function_parameters) [14721 14728]))                  )
                nil [14703 14992])
            ("translate" function
               (:documentation "translate(s,table [,deletions]) -> string

    Return a copy of the string s, where all characters occurring
    in the optional argument deletions are removed, and the
    remaining characters have been mapped through the given
    translation table, which must be a string of length 256.  The
    deletions argument is not allowed for Unicode strings.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [15054 15055])
                    ("table" variable nil (reparse-symbol function_parameters) [15057 15062])
                    ("deletions" variable nil (reparse-symbol function_parameters) [15064 15073]))                  )
                nil [15040 15803])
            ("capitalize" function
               (:documentation "capitalize(s) -> string

    Return a copy of the string s with only its first character
    capitalized.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [15873 15874]))                  )
                nil [15858 16025])
            ("replace" function
               (:documentation "replace (str, old, new[, maxreplace]) -> string

    Return a copy of string str with all occurrences of substring
    old replaced by new. If the optional argument maxreplace is
    given, only the first maxreplace occurrences are replaced.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [16071 16072])
                    ("old" variable nil (reparse-symbol function_parameters) [16074 16077])
                    ("new" variable nil (reparse-symbol function_parameters) [16079 16082])
                    ("maxreplace" variable nil (reparse-symbol function_parameters) [16084 16094]))                  )
                nil [16059 16401])
            ("try" code nil nil [16643 16848])
            ("Formatter" type
               (:superclasses ("object")
                :members 
                  ( ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17294 17298])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17300 17313])
                            ("args" variable nil (reparse-symbol function_parameters) [17315 17320])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17322 17330]))                          )
                        (reparse-symbol indented_block_body) [17283 17390])
                    ("vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17407 17411])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17413 17426])
                            ("args" variable nil (reparse-symbol function_parameters) [17428 17432])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17434 17440]))                          )
                        (reparse-symbol indented_block_body) [17395 17621])
                    ("_vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17639 17643])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17645 17658])
                            ("args" variable nil (reparse-symbol function_parameters) [17660 17664])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17666 17672])
                            ("used_args" variable nil (reparse-symbol function_parameters) [17674 17683])
                            ("recursion_depth" variable nil (reparse-symbol function_parameters) [17685 17700]))                          )
                        (reparse-symbol indented_block_body) [17626 18930])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18950 18954])
                            ("key" variable nil (reparse-symbol function_parameters) [18956 18959])
                            ("args" variable nil (reparse-symbol function_parameters) [18961 18965])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18967 18973]))                          )
                        (reparse-symbol indented_block_body) [18936 19091])
                    ("check_unused_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19119 19123])
                            ("used_args" variable nil (reparse-symbol function_parameters) [19125 19134])
                            ("args" variable nil (reparse-symbol function_parameters) [19136 19140])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19142 19148]))                          )
                        (reparse-symbol indented_block_body) [19097 19164])
                    ("format_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19187 19191])
                            ("value" variable nil (reparse-symbol function_parameters) [19193 19198])
                            ("format_spec" variable nil (reparse-symbol function_parameters) [19200 19211]))                          )
                        (reparse-symbol indented_block_body) [19170 19256])
                    ("convert_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19280 19284])
                            ("value" variable nil (reparse-symbol function_parameters) [19286 19291])
                            ("conversion" variable nil (reparse-symbol function_parameters) [19293 19303]))                          )
                        (reparse-symbol indented_block_body) [19262 19621])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19996 20000])
                            ("format_string" variable nil (reparse-symbol function_parameters) [20002 20015]))                          )
                        (reparse-symbol indented_block_body) [19986 20067])
                    ("get_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20344 20348])
                            ("field_name" variable nil (reparse-symbol function_parameters) [20350 20360])
                            ("args" variable nil (reparse-symbol function_parameters) [20362 20366])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20368 20374]))                          )
                        (reparse-symbol indented_block_body) [20330 20757]))                  
                :type "class")
                nil [17254 20757]))          
    :file "string.py"
    :pointmax 20757
    :fsize 20756
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "dis.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Disassembler of Python byte code into mnemonics.\"\"\"" code nil nil [1 55])
            ("sys" include nil nil [57 67])
            ("types" include nil nil [68 80])
            ("opcode" include nil nil [82 102])
            ("opcode" include nil nil [103 145])
            ("__all__" code nil nil [147 255])
            ("del" code nil nil [256 272])
            ("_have_code" variable nil nil [274 378])
            ("dis" function
               (:documentation "Disassemble classes, methods, functions, or code.

    With no argument, disassemble the last traceback.

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [388 389]))                  )
                nil [380 1345])
            ("distb" function
               (:documentation "Disassemble a traceback (default: last traceback)."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [1356 1358]))                  )
                nil [1346 1684])
            ("disassemble" function
               (:documentation "Disassemble a code object."
                :arguments 
                  ( ("co" variable nil (reparse-symbol function_parameters) [1701 1703])
                    ("lasti" variable nil (reparse-symbol function_parameters) [1705 1710]))                  )
                nil [1685 3223])
            ("disassemble_string" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [3247 3251])
                ("lasti" variable nil (reparse-symbol function_parameters) [3253 3258])
                ("varnames" variable nil (reparse-symbol function_parameters) [3263 3271])
                ("names" variable nil (reparse-symbol function_parameters) [3278 3283])
                ("constants" variable nil (reparse-symbol function_parameters) [3313 3322]))              ) nil [3224 4534])
            ("disco" variable nil nil [4535 4554])
            ("findlabels" function
               (:documentation "Detect all offsets in a byte code which are jump targets.

    Return the list of offsets.

    "
                :arguments 
                  ( ("code" variable nil (reparse-symbol function_parameters) [4625 4629]))                  )
                nil [4610 5235])
            ("findlinestarts" function
               (:documentation "Find the offsets in a byte code which are start of lines in the source.

    Generate pairs (offset, lineno) as described in Python/compile.c.

    "
                :arguments 
                  ( ("code" variable nil (reparse-symbol function_parameters) [5255 5259]))                  )
                nil [5236 5931])
            ("_test" function (:documentation "Simple test program to disassemble a file.") nil [5932 6460])
            ("if" code nil nil [6461 6500]))          
    :file "dis.py"
    :pointmax 6500
    :fsize 6499
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "tokenize.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Tokenization help for Python programs.

generate_tokens(readline) is a generator that breaks a stream of
text into Python tokens.  It accepts a readline-like method which is called
repeatedly to get the next line of input (or \"\" for EOF).  It generates
5-tuples with these members:

    the token type (see token.py)
    the token (a string)
    the starting (row, column) indices of the token (a 2-tuple of ints)
    the ending (row, column) indices of the token (a 2-tuple of ints)
    the original line (string)

It is designed to match the working of the Python tokenizer exactly, except
that it produces COMMENT tokens for comments and gives type OP for all
operators

Older entry points
    tokenize_loop(readline, tokeneater)
    tokenize(readline, tokeneater=printtoken)
are the same, except instead of generating tokens, tokeneater is a callback
function to which the 5 fields described above are passed as 5 arguments,
each time a new token is found.\"\"\"" code nil nil [1 967])
            ("__author__" variable nil nil [969 1010])
            ("__credits__" variable nil nil [1011 1130])
            ("string" include nil nil [1132 1149])
            ("re" include nil nil [1132 1149])
            ("token" include nil nil [1150 1169])
            ("token" include nil nil [1171 1183])
            ("__all__" variable nil nil [1184 1242])
            ("__all__" variable nil nil [1243 1316])
            ("del" code nil nil [1317 1322])
            ("del" code nil nil [1323 1332])
            ("COMMENT" variable nil nil [1334 1352])
            ("tok_name" variable nil nil [1353 1382])
            ("NL" code nil nil [1383 1400])
            ("tok_name" variable nil nil [1401 1420])
            ("N_TOKENS" variable nil nil [1421 1434])
            ("group" function (:arguments 
              ( ("choices" variable nil (reparse-symbol function_parameters) [1446 1454]))              ) nil [1436 1494])
            ("any" function (:arguments 
              ( ("choices" variable nil (reparse-symbol function_parameters) [1502 1510]))              ) nil [1494 1542])
            ("maybe" function (:arguments 
              ( ("choices" variable nil (reparse-symbol function_parameters) [1552 1560]))              ) nil [1542 1592])
            ("Whitespace" variable nil nil [1593 1617])
            ("Comment" variable nil nil [1618 1640])
            ("Ignore" code nil nil [1641 1708])
            ("Name" variable nil nil [1709 1731])
            ("Hexnumber" variable nil nil [1733 1769])
            ("Octnumber" variable nil nil [1770 1813])
            ("Binnumber" variable nil nil [1814 1844])
            ("Decnumber" variable nil nil [1845 1873])
            ("Intnumber" variable nil nil [1874 1935])
            ("Exponent" variable nil nil [1936 1962])
            ("Pointfloat" code nil nil [1963 2022])
            ("Expfloat" code nil nil [2023 2051])
            ("Floatnumber" variable nil nil [2052 2093])
            ("Imagnumber" variable nil nil [2094 2147])
            ("Number" variable nil nil [2148 2198])
            ("Single" variable nil nil [2224 2259])
            ("Double" variable nil nil [2284 2319])
            ("Single3" variable nil nil [2346 2396])
            ("Double3" variable nil nil [2423 2473])
            ("Triple" variable nil nil [2474 2522])
            ("String" variable nil nil [2552 2667])
            ("Operator" variable nil nil [2844 2990])
            ("Bracket" variable nil nil [2992 3012])
            ("Special" variable nil nil [3013 3051])
            ("Funny" variable nil nil [3052 3093])
            ("PlainToken" variable nil nil [3095 3142])
            ("Token" code nil nil [3143 3170])
            ("ContStr" variable nil nil [3213 3410])
            ("PseudoExtras" variable nil nil [3411 3460])
            ("PseudoToken" code nil nil [3461 3537])
            ("tokenprog, pseudoprog, single3prog, double3prog" code nil nil [3539 3649])
            ("endprogs" variable nil nil [3650 4625])
            ("triple_quoted" variable nil nil [4627 4645])
            ("for" code nil nil [4646 5006])
            ("single_quoted" variable nil nil [5006 5024])
            ("for" code nil nil [5025 5326])
            ("tabsize" variable nil nil [5327 5338])
            ("TokenError" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [5340 5374])
            ("StopTokenizing" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [5375 5413])
            ("printtoken" function (:arguments 
              ( ("type" variable nil (reparse-symbol function_parameters) [5429 5433])
                ("token" variable nil (reparse-symbol function_parameters) [5435 5440])
                ("srow_scol" variable nil (reparse-symbol function_parameters) [5442 5451])
                ("erow_ecol" variable nil (reparse-symbol function_parameters) [5453 5462])
                ("line" variable nil (reparse-symbol function_parameters) [5464 5468]))              ) nil [5414 5638])
            ("tokenize" function
               (:documentation "
    The tokenize() function accepts two parameters: one representing the
    input stream, and one providing an output mechanism for tokenize().

    The first parameter, readline, must be a callable object which provides
    the same interface as the readline() method of built-in file objects.
    Each call to the function should return one line of input as a string.

    The second parameter, tokeneater, must also be a callable object. It is
    called once for each token, with five arguments, corresponding to the
    tuples generated by generate_tokens().
    "
                :arguments 
                  ( ("readline" variable nil (reparse-symbol function_parameters) [5652 5660])
                    ("tokeneater" variable nil (reparse-symbol function_parameters) [5662 5672]))                  )
                nil [5639 6360])
            ("tokenize_loop" function (:arguments 
              ( ("readline" variable nil (reparse-symbol function_parameters) [6412 6420])
                ("tokeneater" variable nil (reparse-symbol function_parameters) [6422 6432]))              ) nil [6394 6516])
            ("Untokenizer" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6569 6585])
                            ("self" variable nil (reparse-symbol indented_block_body) [6594 6611])
                            ("self" variable nil (reparse-symbol indented_block_body) [6620 6637]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6554 6558]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6541 6638])
                    ("add_whitespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6662 6666])
                            ("start" variable nil (reparse-symbol function_parameters) [6668 6673]))                          )
                        (reparse-symbol indented_block_body) [6643 6850])
                    ("untokenize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6870 6874])
                            ("iterable" variable nil (reparse-symbol function_parameters) [6876 6884]))                          )
                        (reparse-symbol indented_block_body) [6855 7326])
                    ("compat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7342 7346])
                            ("token" variable nil (reparse-symbol function_parameters) [7348 7353])
                            ("iterable" variable nil (reparse-symbol function_parameters) [7355 7363]))                          )
                        (reparse-symbol indented_block_body) [7331 8443]))                  
                :type "class")
                nil [6517 8443])
            ("untokenize" function
               (:documentation "Transform tokens back into Python source code.

    Each element returned by the iterable must be a token sequence
    with at least two elements, a token number and token value.  If
    only two tokens are passed, the resulting output is poor.

    Round-trip invariant for full input:
        Untokenized source will match input source exactly

    Round-trip invariant for limited intput:
        # Output text will tokenize the back to the input
        t1 = [tok[:2] for tok in generate_tokens(f.readline)]
        newcode = untokenize(t1)
        readline = iter(newcode.splitlines(1)).next
        t2 = [tok[:2] for tok in generate_tokens(readline)]
        assert t1 == t2
    "
                :arguments 
                  ( ("iterable" variable nil (reparse-symbol function_parameters) [8459 8467]))                  )
                nil [8444 9224])
            ("generate_tokens" function
               (:documentation "
    The generate_tokens() generator requires one argment, readline, which
    must be a callable object which provides the same interface as the
    readline() method of built-in file objects. Each call to the function
    should return one line of input as a string.  Alternately, readline
    can be a callable function terminating with StopIteration:
        readline = open(myfile).next    # Example of alternate readline

    The generator produces 5-tuples with these members: the token type; the
    token string; a 2-tuple (srow, scol) of ints specifying the row and
    column where the token begins in the source; a 2-tuple (erow, ecol) of
    ints specifying the row and column where the token ends in the source;
    and the line on which the token was found. The line passed is the
    logical line; continuation lines are included.
    "
                :arguments 
                  ( ("readline" variable nil (reparse-symbol function_parameters) [9245 9253]))                  )
                nil [9225 16275])
            ("if" code nil nil [16276 16466]))          
    :file "tokenize.py"
    :pointmax 16466
    :fsize 16465
    :lastmodtime '(21060 39147 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "socket.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"\\
This module provides socket operations and some related functions.
On Unix, it supports IP (Internet Protocol) and Unix domain sockets.
On other systems, it only supports IP. Functions specific for a
socket are available as methods of the socket object.

Functions:

socket() -- create a new socket object
socketpair() -- create a pair of new socket objects [*]
fromfd() -- create a socket object from an open file descriptor [*]
gethostname() -- return the current hostname
gethostbyname() -- map a hostname to its IP number
gethostbyaddr() -- map an IP number or hostname to DNS info
getservbyname() -- map a service name and a protocol name to a port number
getprotobyname() -- map a protocol name (e.g. 'tcp') to a number
ntohs(), ntohl() -- convert 16, 32 bit int from network to host byte order
htons(), htonl() -- convert 16, 32 bit int from host to network byte order
inet_aton() -- convert IP addr string (123.45.67.89) to 32-bit packed format
inet_ntoa() -- convert 32-bit packed format IP to string (123.45.67.89)
ssl() -- secure socket layer support (only available if configured)
socket.getdefaulttimeout() -- get the default timeout value
socket.setdefaulttimeout() -- set the default timeout value
create_connection() -- connects to an address, with an optional timeout and
                       optional source address.

 [*] not available on all platforms!

Special objects:

SocketType -- type object for socket objects
error -- exception raised for I/O errors
has_ipv6 -- boolean value indicating if IPv6 is supported

Integer constants:

AF_INET, AF_UNIX -- socket domains (first argument to socket() call)
SOCK_STREAM, SOCK_DGRAM, SOCK_RAW -- socket types (second argument)

Many other constants may be defined; these may be used in calls to
the setsockopt() and getsockopt() methods.
\"\"\"" code nil nil [94 1909])
            ("_socket" include nil nil [1911 1925])
            ("_socket" include nil nil [1926 1947])
            ("functools" include nil nil [1948 1977])
            ("types" include nil nil [1978 2006])
            ("try" code nil nil [2008 2950])
            ("os" include nil nil [2951 2975])
            ("sys" include nil nil [2951 2975])
            ("warnings" include nil nil [2951 2975])
            ("try" code nil nil [2977 3071])
            ("try" code nil nil [3072 3131])
            ("EBADF" variable nil nil [3131 3165])
            ("EINTR" variable nil nil [3166 3200])
            ("__all__" variable nil nil [3202 3244])
            ("__all__" code nil nil [3245 3290])
            ("_realsocket" variable nil nil [3293 3313])
            ("if" code nil nil [3333 4229])
            ("getfqdn" function
               (:documentation "Get fully qualified domain name from name.

    An empty argument is interpreted as meaning the local host.

    First the hostname returned by gethostbyaddr() is checked, then
    possibly existing aliases. In case no FQDN is available, hostname
    from gethostname() is returned.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4244 4248]))                  )
                nil [4232 4923])
            ("_socketmethods" variable nil nil [4925 5136])
            ("if" code nil nil [5138 5207])
            ("if" code nil nil [5208 5291])
            ("_delegate_methods" variable nil nil [5402 5511])
            ("_closedsocket" type
               (:superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [5546 5560])
                    ("_dummy" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [5576 5581]))                      ) (reparse-symbol indented_block_body) [5565 5634])
                    ("send" variable nil (reparse-symbol indented_block_body) [5697 5765])
                    ("__getattr__" variable nil (reparse-symbol indented_block_body) [5770 5790]))                  
                :type "class")
                nil [5513 5791])
            ("_socketobject" type
               (:superclasses ("object")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [6031 6060])
                    ("__slots__" code nil (reparse-symbol indented_block_body) [6066 6128])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [6217 6288])
                            ("self" variable nil (reparse-symbol indented_block_body) [6296 6314])
                            ("for" code nil (reparse-symbol indented_block_body) [6323 6414]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6147 6151])
                            ("family" variable nil (reparse-symbol function_parameters) [6153 6159])
                            ("type" variable nil (reparse-symbol function_parameters) [6169 6173])
                            ("proto" variable nil (reparse-symbol function_parameters) [6187 6192])
                            ("_sock" variable nil (reparse-symbol function_parameters) [6196 6201]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6134 6414])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6429 6433])
                            ("_closedsocket" variable nil (reparse-symbol function_parameters) [6435 6448])
                            ("_delegate_methods" variable nil (reparse-symbol function_parameters) [6478 6495])
                            ("setattr" variable nil (reparse-symbol function_parameters) [6515 6522]))                          )
                        (reparse-symbol indented_block_body) [6419 6763])
                    ("close" variable nil (reparse-symbol indented_block_body) [6767 6808])
                    ("accept" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6825 6829]))                          )
                        (reparse-symbol indented_block_body) [6814 6920])
                    ("accept" variable nil (reparse-symbol indented_block_body) [6924 6967])
                    ("dup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6981 6985]))                          
                        :documentation "dup() -> socket object

        Return a new socket object connected to the same system resource.")
                        (reparse-symbol indented_block_body) [6973 7147])
                    ("makefile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7165 7169])
                            ("mode" variable nil (reparse-symbol function_parameters) [7171 7175])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [7181 7188]))                          
                        :documentation "makefile([mode[, bufsize]]) -> file object

        Return a regular file object corresponding to the socket.  The mode
        and bufsize arguments are as for the built-in open() function.")
                        (reparse-symbol indented_block_body) [7152 7453])
                    ("family" variable nil (reparse-symbol indented_block_body) [7458 7532])
                    ("type" variable nil (reparse-symbol indented_block_body) [7537 7605])
                    ("proto" variable nil (reparse-symbol indented_block_body) [7610 7684]))                  
                :type "class")
                nil [5997 7685])
            ("meth" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [7695 7699])
                ("self" variable nil (reparse-symbol function_parameters) [7700 7704])
                ("args" variable nil (reparse-symbol function_parameters) [7705 7710]))              ) nil [7686 7756])
            ("for" code nil nil [7757 7949])
            ("socket" variable nil nil [7950 7985])
            ("_fileobject" type
               (:documentation "Faux file object attached to a socket object."
                :superclasses ("object")
                :members 
                  ( ("default_bufsize" variable nil (reparse-symbol indented_block_body) [8075 8097])
                    ("name" variable nil (reparse-symbol indented_block_body) [8102 8119])
                    ("__slots__" variable nil (reparse-symbol indented_block_body) [8125 8332])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8408 8425])
                            ("self" variable nil (reparse-symbol indented_block_body) [8434 8450])
                            ("if" code nil (reparse-symbol indented_block_body) [8495 8554])
                            ("self" variable nil (reparse-symbol indented_block_body) [8562 8584])
                            ("self" variable nil (reparse-symbol indented_block_body) [8593 8615])
                            ("if" code nil (reparse-symbol indented_block_body) [8842 9018])
                            ("self" variable nil (reparse-symbol indented_block_body) [9026 9050])
                            ("self" variable nil (reparse-symbol indented_block_body) [9339 9362])
                            ("self" variable nil (reparse-symbol indented_block_body) [9371 9386])
                            ("self" variable nil (reparse-symbol indented_block_body) [9415 9433])
                            ("self" variable nil (reparse-symbol indented_block_body) [9442 9461]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8351 8355])
                            ("sock" variable nil (reparse-symbol function_parameters) [8357 8361])
                            ("mode" variable nil (reparse-symbol function_parameters) [8363 8367])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [8374 8381])
                            ("close" variable nil (reparse-symbol function_parameters) [8386 8391]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8338 9462])
                    ("_getclosed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9482 9486]))                          )
                        (reparse-symbol indented_block_body) [9467 9523])
                    ("closed" variable nil (reparse-symbol indented_block_body) [9527 9590])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9606 9610]))                          )
                        (reparse-symbol indented_block_body) [9596 9792])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9809 9813]))                          )
                        (reparse-symbol indented_block_body) [9797 9946])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9961 9965]))                          )
                        (reparse-symbol indented_block_body) [9951 10724])
                    ("fileno" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10740 10744]))                          )
                        (reparse-symbol indented_block_body) [10729 10782])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10797 10801])
                            ("data" variable nil (reparse-symbol function_parameters) [10803 10807]))                          )
                        (reparse-symbol indented_block_body) [10787 11152])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11172 11176])
                            ("list" variable nil (reparse-symbol function_parameters) [11178 11182]))                          )
                        (reparse-symbol indented_block_body) [11157 11533])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11547 11551])
                            ("size" variable nil (reparse-symbol function_parameters) [11553 11557]))                          )
                        (reparse-symbol indented_block_body) [11538 14505])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14523 14527])
                            ("size" variable nil (reparse-symbol function_parameters) [14529 14533]))                          )
                        (reparse-symbol indented_block_body) [14510 18528])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18547 18551])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [18553 18561]))                          )
                        (reparse-symbol indented_block_body) [18533 18854])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18898 18902]))                          )
                        (reparse-symbol indented_block_body) [18885 18925])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18939 18943]))                          )
                        (reparse-symbol indented_block_body) [18930 19050]))                  
                :type "class")
                nil [7987 19050])
            ("_GLOBAL_DEFAULT_TIMEOUT" variable nil nil [19051 19085])
            ("create_connection" function
               (:documentation "Connect to *address* and return the socket object.

    Convenience function.  Connect to *address* (a 2-tuple ``(host,
    port)``) and return the socket object.  Passing the optional
    *timeout* parameter will set the timeout on the socket instance
    before attempting to connect.  If no *timeout* is supplied, the
    global default timeout setting returned by :func:`getdefaulttimeout`
    is used.  If *source_address* is set it must be a tuple of (host, port)
    for the socket to bind as a source address before making the connection.
    An host of '' or port 0 tells the OS to use the default.
    "
                :arguments 
                  ( ("address" variable nil (reparse-symbol function_parameters) [19109 19116])
                    ("timeout" variable nil (reparse-symbol function_parameters) [19118 19125])
                    ("source_address" variable nil (reparse-symbol function_parameters) [19173 19187]))                  )
                nil [19087 20486]))          
    :file "socket.py"
    :pointmax 20486
    :fsize 20485
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax '((INDENT_BLOCK 20294 . 20376) (NEWLINE 20293 . 20294) (COLON 20292 . 20293) (TRY 19992 . 19995) (AS 20288 . 20290))
    )
   (semanticdb-table "urlparse.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Parse (absolute and relative) URLs.

urlparse module is based upon the following RFC specifications.

RFC 3986 (STD66): \"Uniform Resource Identifiers\" by T. Berners-Lee, R. Fielding
and L.  Masinter, January 2005.

RFC 2732 : \"Format for Literal IPv6 Addresses in URL's by R.Hinden, B.Carpenter
and L.Masinter, December 1999.

RFC 2396:  \"Uniform Resource Identifiers (URI)\": Generic Syntax by T.
Berners-Lee, R. Fielding, and L. Masinter, August 1998.

RFC 2368: \"The mailto URL scheme\", by P.Hoffman , L Masinter, J. Zwinski, July 1998.

RFC 1808: \"Relative Uniform Resource Locators\", by R. Fielding, UC Irvine, June
1995.

RFC 1738: \"Uniform Resource Locators (URL)\" by T. Berners-Lee, L. Masinter, M.
McCahill, December 1994

RFC 3986 is considered the current standard and any future changes to
urlparse module should conform with it.  The urlparse module is
currently not entirely compliant with this RFC due to defacto
scenarios for parsing, and for backward compatibility purposes, some
parsing quirks from older RFCs are retained. The testcases in
test_urlparse.py provides a good indicator of parsing behavior.

\"\"\"" code nil nil [1 1130])
            ("__all__" variable nil nil [1132 1254])
            ("uses_relative" variable nil nil [1314 1522])
            ("uses_netloc" variable nil nil [1523 1774])
            ("non_hierarchical" variable nil nil [1775 1899])
            ("uses_params" variable nil nil [1900 2055])
            ("uses_query" variable nil nil [2056 2178])
            ("uses_fragment" variable nil nil [2179 2336])
            ("scheme_chars" variable nil nil [2373 2514])
            ("MAX_CACHE_SIZE" variable nil nil [2516 2535])
            ("_parse_cache" variable nil nil [2536 2553])
            ("clear_cache" function (:documentation "Clear the parse cache.") nil [2555 2632])
            ("ResultMixin" type
               (:documentation "Shared methods for the parsed result objects."
                :superclasses ("object")
                :members 
                  ( ("username" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2749 2753]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2722 2992])
                    ("password" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3024 3028]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2997 3235])
                    ("hostname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3267 3271]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3240 3589])
                    ("port" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3617 3621]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3594 3820]))                  
                :type "class")
                nil [2634 3820])
            ("collections" include nil nil [3821 3855])
            ("SplitResult" type
               (:superclasses ("ResultMixin")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [3958 3972])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3989 3993]))                          )
                        (reparse-symbol indented_block_body) [3978 4028]))                  
                :type "class")
                nil [3857 4028])
            ("ParseResult" type
               (:superclasses ("ResultMixin")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4138 4152])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4169 4173]))                          )
                        (reparse-symbol indented_block_body) [4158 4208]))                  
                :type "class")
                nil [4030 4208])
            ("urlparse" function
               (:documentation "Parse a URL into 6 components:
    <scheme>://<netloc>/<path>;<params>?<query>#<fragment>
    Return a 6-tuple: (scheme, netloc, path, params, query, fragment).
    Note that we don't break the components up in smaller bits
    (e.g. netloc is a single string) and we don't expand % escapes."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [4223 4226])
                    ("scheme" variable nil (reparse-symbol function_parameters) [4228 4234])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [4239 4254]))                  )
                nil [4210 4848])
            ("_splitparams" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [4866 4869]))              ) nil [4849 5045])
            ("_splitnetloc" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [5063 5066])
                ("start" variable nil (reparse-symbol function_parameters) [5068 5073]))              ) nil [5046 5494])
            ("urlsplit" function
               (:documentation "Parse a URL into 5 components:
    <scheme>://<netloc>/<path>?<query>#<fragment>
    Return a 5-tuple: (scheme, netloc, path, query, fragment).
    Note that we don't break the components up in smaller bits
    (e.g. netloc is a single string) and we don't expand % escapes."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [5508 5511])
                    ("scheme" variable nil (reparse-symbol function_parameters) [5513 5519])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [5524 5539]))                  )
                nil [5495 7756])
            ("urlunparse" function
               (:documentation "Put a parsed URL back together again.  This may result in a
    slightly different, but equivalent URL, if the URL that was parsed
    originally had redundant delimiters, e.g. a ? with an empty query
    (the draft states that these are equivalent)."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [7772 7776]))                  )
                nil [7757 8211])
            ("urlunsplit" function
               (:documentation "Combine the elements of a tuple as returned by urlsplit() into a
    complete URL as a string. The data argument can be any five-item iterable.
    This may result in a slightly different, but equivalent URL, if the URL that
    was parsed originally had unnecessary delimiters (for example, a ? with an
    empty query; the RFC states that these are equivalent)."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [8227 8231]))                  )
                nil [8212 8983])
            ("urljoin" function
               (:documentation "Join a base URL and a possibly relative URL to form an absolute
    interpretation of the latter."
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [8996 9000])
                    ("url" variable nil (reparse-symbol function_parameters) [9002 9005])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [9007 9022]))                  )
                nil [8984 10786])
            ("urldefrag" function
               (:documentation "Removes any existing fragment from URL.

    Returns a tuple of the defragmented URL and the fragment.  If
    the URL contained no fragments, the second element is the
    empty string.
    "
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [10801 10804]))                  )
                nil [10787 11182])
            ("_hexdig" variable nil nil [11462 11496])
            ("_hextochr" variable nil nil [11497 11589])
            ("unquote" function
               (:documentation "unquote('abc%20def') -> 'abc def'."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11603 11604]))                  )
                nil [11591 11985])
            ("parse_qs" function
               (:documentation "Parse a query given as a string argument.

        Arguments:

        qs: percent-encoded query string to be parsed

        keep_blank_values: flag indicating whether blank values in
            percent-encoded queries should be treated as blank strings.
            A true value indicates that blanks should be retained as
            blank strings.  The default false value indicates that
            blank values are to be ignored and treated as if they were
            not included.

        strict_parsing: flag indicating what to do with parsing errors.
            If false (the default), errors are silently ignored.
            If true, errors raise a ValueError exception.
    "
                :arguments 
                  ( ("qs" variable nil (reparse-symbol function_parameters) [11999 12001])
                    ("keep_blank_values" variable nil (reparse-symbol function_parameters) [12003 12020])
                    ("strict_parsing" variable nil (reparse-symbol function_parameters) [12024 12038]))                  )
                nil [11986 12956])
            ("parse_qsl" function
               (:documentation "Parse a query given as a string argument.

    Arguments:

    qs: percent-encoded query string to be parsed

    keep_blank_values: flag indicating whether blank values in
        percent-encoded queries should be treated as blank strings.  A
        true value indicates that blanks should be retained as blank
        strings.  The default false value indicates that blank values
        are to be ignored and treated as if they were  not included.

    strict_parsing: flag indicating what to do with parsing errors. If
        false (the default), errors are silently ignored. If true,
        errors raise a ValueError exception.

    Returns a list, as G-d intended.
    "
                :arguments 
                  ( ("qs" variable nil (reparse-symbol function_parameters) [12971 12973])
                    ("keep_blank_values" variable nil (reparse-symbol function_parameters) [12975 12992])
                    ("strict_parsing" variable nil (reparse-symbol function_parameters) [12996 13010]))                  )
                nil [12957 14415]))          
    :file "urlparse.py"
    :pointmax 14415
    :fsize 14414
    :lastmodtime '(21060 39147 0 0)
    :unmatched-syntax '((COMMA 4117 . 4118) (NAME 4048 . 4058) (PAREN_BLOCK 4058 . 4117) (COMMA 3937 . 3938) (NAME 3875 . 3885) (PAREN_BLOCK 3885 . 3937))
    )
   (semanticdb-table "base64.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"RFC 3548: Base16, Base32, Base64 Data Encodings\"\"\"" code nil nil [24 77])
            ("re" include nil nil [209 218])
            ("struct" include nil nil [219 232])
            ("binascii" include nil nil [233 248])
            ("__all__" variable nil nil [251 825])
            ("_translation" variable nil nil [827 872])
            ("EMPTYSTRING" variable nil nil [873 889])
            ("_translate" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [907 908])
                ("altchars" variable nil (reparse-symbol function_parameters) [910 918]))              ) nil [892 1066])
            ("b64encode" function
               (:documentation "Encode a string using Base64.

    s is the string to encode.  Optional altchars must be a string of at least
    length 2 (additional characters are ignored) which specifies an
    alternative alphabet for the '+' and '/' characters.  This allows an
    application to e.g. generate url or filesystem safe Base64 strings.

    The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1126 1127])
                    ("altchars" variable nil (reparse-symbol function_parameters) [1129 1137]))                  )
                nil [1112 1720])
            ("b64decode" function
               (:documentation "Decode a Base64 encoded string.

    s is the string to decode.  Optional altchars must be a string of at least
    length 2 (additional characters are ignored) which specifies the
    alternative alphabet used instead of the '+' and '/' characters.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1736 1737])
                    ("altchars" variable nil (reparse-symbol function_parameters) [1739 1747]))                  )
                nil [1722 2432])
            ("standard_b64encode" function
               (:documentation "Encode a string using the standard Base64 alphabet.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2457 2458]))                  )
                nil [2434 2617])
            ("standard_b64decode" function
               (:documentation "Decode a string encoded with the standard Base64 alphabet.

    s is the string to decode.  The decoded string is returned.  A TypeError
    is raised if the string is incorrectly padded or if there are non-alphabet
    characters present in the string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2641 2642]))                  )
                nil [2618 2938])
            ("urlsafe_b64encode" function
               (:documentation "Encode a string using a url-safe Base64 alphabet.

    s is the string to encode.  The encoded string is returned.  The alphabet
    uses '-' instead of '+' and '_' instead of '/'.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2961 2962]))                  )
                nil [2939 3191])
            ("urlsafe_b64decode" function
               (:documentation "Decode a string encoded with the standard Base64 alphabet.

    s is the string to decode.  The decoded string is returned.  A TypeError
    is raised if the string is incorrectly padded or if there are non-alphabet
    characters present in the string.

    The alphabet uses '-' instead of '+' and '_' instead of '/'.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [3214 3215]))                  )
                nil [3192 3583])
            ("_b32alphabet" variable nil nil [3637 3974])
            ("_b32tab" variable nil nil [3976 4006])
            ("_b32tab" code nil nil [4007 4021])
            ("_b32tab" variable nil nil [4022 4055])
            ("_b32rev" variable nil nil [4056 4119])
            ("b32encode" function
               (:documentation "Encode a string using Base32.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [4136 4137]))                  )
                nil [4122 5899])
            ("b32decode" function
               (:documentation "Decode a Base32 encoded string.

    s is the string to decode.  Optional casefold is a flag specifying whether
    a lowercase alphabet is acceptable as input.  For security purposes, the
    default is False.

    RFC 3548 allows for optional mapping of the digit 0 (zero) to the letter O
    (oh), and for optional mapping of the digit 1 (one) to either the letter I
    (eye) or letter L (el).  The optional argument map01 when not None,
    specifies which letter the digit 1 should be mapped to (when map01 is not
    None, the digit 0 is always mapped to the letter O).  For security
    purposes the default is None, so that 0 and 1 are not allowed in the
    input.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [5915 5916])
                    ("casefold" variable nil (reparse-symbol function_parameters) [5918 5926])
                    ("map01" variable nil (reparse-symbol function_parameters) [5934 5939]))                  )
                nil [5901 8385])
            ("b16encode" function
               (:documentation "Encode a string using Base16.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8559 8560]))                  )
                nil [8545 8712])
            ("b16decode" function
               (:documentation "Decode a Base16 encoded string.

    s is the string to decode.  Optional casefold is a flag specifying whether
    a lowercase alphabet is acceptable as input.  For security purposes, the
    default is False.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8728 8729])
                    ("casefold" variable nil (reparse-symbol function_parameters) [8731 8739]))                  )
                nil [8714 9290])
            ("MAXLINESIZE" variable nil nil [9453 9469])
            ("MAXBINSIZE" code nil nil [9491 9522])
            ("encode" function
               (:documentation "Encode a file."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [9535 9540])
                    ("output" variable nil (reparse-symbol function_parameters) [9542 9548]))                  )
                nil [9524 9875])
            ("decode" function
               (:documentation "Decode a file."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [9888 9893])
                    ("output" variable nil (reparse-symbol function_parameters) [9895 9901]))                  )
                nil [9877 10078])
            ("encodestring" function
               (:documentation "Encode a string into multiple lines of base-64 data."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10097 10098]))                  )
                nil [10080 10338])
            ("decodestring" function
               (:documentation "Decode a string."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10357 10358]))                  )
                nil [10340 10422])
            ("test" function (:documentation "Small test program") nil [10451 11192])
            ("test1" function nil nil [11194 11317])
            ("if" code nil nil [11319 11357]))          
    :file "base64.py"
    :pointmax 11357
    :fsize 11356
    :lastmodtime '(21060 39170 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "sre_compile.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [225 262])
            ("_sre" include nil nil [264 280])
            ("sys" include nil nil [264 280])
            ("sre_parse" include nil nil [281 297])
            ("sre_constants" include nil nil [298 325])
            ("assert" code nil nil [327 376])
            ("if" code nil nil [378 453])
            ("_identityfunction" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [476 477]))              ) nil [454 493])
            ("_LITERAL_CODES" variable nil nil [494 538])
            ("_REPEATING_CODES" variable nil nil [539 595])
            ("_SUCCESS_CODES" variable nil nil [596 636])
            ("_ASSERT_CODES" variable nil nil [637 678])
            ("_compile" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [693 697])
                ("pattern" variable nil (reparse-symbol function_parameters) [699 706])
                ("flags" variable nil (reparse-symbol function_parameters) [708 713]))              ) nil [680 6012])
            ("_compile_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [6034 6041])
                ("flags" variable nil (reparse-symbol function_parameters) [6043 6048])
                ("code" variable nil (reparse-symbol function_parameters) [6050 6054])
                ("fixup" variable nil (reparse-symbol function_parameters) [6056 6061]))              ) nil [6013 6919])
            ("_optimize_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [6942 6949])
                ("fixup" variable nil (reparse-symbol function_parameters) [6951 6956]))              ) nil [6920 8337])
            ("_mk_bitmap" function (:arguments 
              ( ("bits" variable nil (reparse-symbol function_parameters) [8353 8357]))              ) nil [8338 8669])
            ("_optimize_unicode" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [10012 10019])
                ("fixup" variable nil (reparse-symbol function_parameters) [10021 10026]))              ) nil [9990 11581])
            ("_simple" function (:arguments 
              ( ("av" variable nil (reparse-symbol function_parameters) [11594 11596]))              ) nil [11582 11802])
            ("_compile_info" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [11821 11825])
                ("pattern" variable nil (reparse-symbol function_parameters) [11827 11834])
                ("flags" variable nil (reparse-symbol function_parameters) [11836 11841]))              ) nil [11803 15201])
            ("try" code nil nil [15202 15323])
            ("isstring" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [15337 15340]))              ) nil [15324 15437])
            ("_code" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [15448 15449])
                ("flags" variable nil (reparse-symbol function_parameters) [15451 15456]))              ) nil [15438 15683])
            ("compile" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [15696 15697])
                ("flags" variable nil (reparse-symbol function_parameters) [15699 15704]))              ) nil [15684 16428]))          
    :file "sre_compile.py"
    :pointmax 16428
    :fsize 16427
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "sre_parse.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [240 277])
            ("sys" include nil nil [345 355])
            ("sre_constants" include nil nil [357 384])
            ("SPECIAL_CHARS" variable nil nil [386 417])
            ("REPEAT_CHARS" variable nil nil [418 439])
            ("DIGITS" variable nil nil [441 467])
            ("OCTDIGITS" variable nil nil [469 496])
            ("HEXDIGITS" variable nil nil [497 538])
            ("WHITESPACE" variable nil nil [540 571])
            ("ESCAPES" variable nil nil [573 849])
            ("CATEGORIES" variable nil nil [851 1327])
            ("FLAGS" variable nil nil [1329 1571])
            ("Pattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1683 1697])
                            ("self" variable nil (reparse-symbol indented_block_body) [1706 1720])
                            ("self" variable nil (reparse-symbol indented_block_body) [1729 1744])
                            ("self" variable nil (reparse-symbol indented_block_body) [1753 1772]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1668 1672]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1655 1773])
                    ("opengroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1791 1795])
                            ("name" variable nil (reparse-symbol function_parameters) [1797 1801]))                          )
                        (reparse-symbol indented_block_body) [1777 2214])
                    ("closegroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2233 2237])
                            ("gid" variable nil (reparse-symbol function_parameters) [2239 2242]))                          )
                        (reparse-symbol indented_block_body) [2218 2275])
                    ("checkgroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2294 2298])
                            ("gid" variable nil (reparse-symbol function_parameters) [2300 2303]))                          )
                        (reparse-symbol indented_block_body) [2279 2364]))                  
                :type "class")
                nil [1573 2364])
            ("SubPattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2476 2498])
                            ("if" code nil (reparse-symbol indented_block_body) [2507 2546])
                            ("self" variable nil (reparse-symbol indented_block_body) [2554 2570])
                            ("self" variable nil (reparse-symbol indented_block_body) [2579 2596]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2441 2445])
                            ("pattern" variable nil (reparse-symbol function_parameters) [2447 2454])
                            ("data" variable nil (reparse-symbol function_parameters) [2456 2460]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2428 2597])
                    ("dump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2610 2614])
                            ("level" variable nil (reparse-symbol function_parameters) [2616 2621]))                          )
                        (reparse-symbol indented_block_body) [2601 3557])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3574 3578]))                          )
                        (reparse-symbol indented_block_body) [3561 3612])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3628 3632]))                          )
                        (reparse-symbol indented_block_body) [3616 3665])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3685 3689])
                            ("index" variable nil (reparse-symbol function_parameters) [3691 3696]))                          )
                        (reparse-symbol indented_block_body) [3669 3728])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3748 3752])
                            ("index" variable nil (reparse-symbol function_parameters) [3754 3759]))                          )
                        (reparse-symbol indented_block_body) [3732 3893])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3913 3917])
                            ("index" variable nil (reparse-symbol function_parameters) [3919 3924])
                            ("code" variable nil (reparse-symbol function_parameters) [3926 3930]))                          )
                        (reparse-symbol indented_block_body) [3897 3965])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3980 3984])
                            ("index" variable nil (reparse-symbol function_parameters) [3986 3991])
                            ("code" variable nil (reparse-symbol function_parameters) [3993 3997]))                          )
                        (reparse-symbol indented_block_body) [3969 4038])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4053 4057])
                            ("code" variable nil (reparse-symbol function_parameters) [4059 4063]))                          )
                        (reparse-symbol indented_block_body) [4042 4097])
                    ("getwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4114 4118]))                          )
                        (reparse-symbol indented_block_body) [4101 5340]))                  
                :type "class")
                nil [2365 5340])
            ("Tokenizer" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5398 5418])
                            ("self" variable nil (reparse-symbol indented_block_body) [5427 5441])
                            ("self" code nil (reparse-symbol indented_block_body) [5450 5463]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5375 5379])
                            ("string" variable nil (reparse-symbol function_parameters) [5381 5387]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5362 5464])
                    ("__next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5479 5483]))                          )
                        (reparse-symbol indented_block_body) [5468 5895])
                    ("match" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5909 5913])
                            ("char" variable nil (reparse-symbol function_parameters) [5915 5919])
                            ("skip" variable nil (reparse-symbol function_parameters) [5921 5925]))                          )
                        (reparse-symbol indented_block_body) [5899 6049])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6061 6065]))                          )
                        (reparse-symbol indented_block_body) [6053 6135])
                    ("tell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6148 6152]))                          )
                        (reparse-symbol indented_block_body) [6139 6192])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6205 6209])
                            ("index" variable nil (reparse-symbol function_parameters) [6211 6216]))                          )
                        (reparse-symbol indented_block_body) [6196 6257]))                  
                :type "class")
                nil [5341 6257])
            ("isident" function (:arguments 
              ( ("char" variable nil (reparse-symbol function_parameters) [6270 6274]))              ) nil [6258 6344])
            ("isdigit" function (:arguments 
              ( ("char" variable nil (reparse-symbol function_parameters) [6357 6361]))              ) nil [6345 6394])
            ("isname" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [6406 6410]))              ) nil [6395 6628])
            ("_class_escape" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [6647 6653])
                ("escape" variable nil (reparse-symbol function_parameters) [6655 6661]))              ) nil [6629 7762])
            ("_escape" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [7775 7781])
                ("escape" variable nil (reparse-symbol function_parameters) [7783 7789])
                ("state" variable nil (reparse-symbol function_parameters) [7791 7796]))              ) nil [7763 9455])
            ("_parse_sub" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [9471 9477])
                ("state" variable nil (reparse-symbol function_parameters) [9479 9484])
                ("nested" variable nil (reparse-symbol function_parameters) [9486 9492]))              ) nil [9456 11081])
            ("_parse_sub_cond" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [11102 11108])
                ("state" variable nil (reparse-symbol function_parameters) [11110 11115])
                ("condgroup" variable nil (reparse-symbol function_parameters) [11117 11126]))              ) nil [11082 11600])
            ("_PATTERNENDERS" variable nil nil [11601 11627])
            ("_ASSERTCHARS" variable nil nil [11628 11653])
            ("_LOOKBEHINDASSERTCHARS" variable nil nil [11654 11688])
            ("_REPEATCODES" variable nil nil [11689 11733])
            ("_parse" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [11746 11752])
                ("state" variable nil (reparse-symbol function_parameters) [11754 11759]))              ) nil [11735 22678])
            ("parse" function (:arguments 
              ( ("str" variable nil (reparse-symbol function_parameters) [22689 22692])
                ("flags" variable nil (reparse-symbol function_parameters) [22694 22699])
                ("pattern" variable nil (reparse-symbol function_parameters) [22703 22710]))              ) nil [22679 23447])
            ("parse_template" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [23467 23473])
                ("pattern" variable nil (reparse-symbol function_parameters) [23475 23482]))              ) nil [23448 26393])
            ("expand_template" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [26414 26422])
                ("match" variable nil (reparse-symbol function_parameters) [26424 26429]))              ) nil [26394 26799]))          
    :file "sre_parse.py"
    :pointmax 26799
    :fsize 26798
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "copy.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Generic (shallow and deep) copying operations.

Interface summary:

        import copy

        x = copy.copy(y)        # make a shallow copy of y
        x = copy.deepcopy(y)    # make a deep copy of y

For module specific errors, copy.Error is raised.

The difference between shallow and deep copying is only relevant for
compound objects (objects that contain other objects, like lists or
class instances).

- A shallow copy constructs a new compound object and then (to the
  extent possible) inserts *the same objects* into it that the
  original contains.

- A deep copy constructs a new compound object and then, recursively,
  inserts *copies* into it of the objects found in the original.

Two problems often exist with deep copy operations that don't exist
with shallow copy operations:

 a) recursive objects (compound objects that, directly or indirectly,
    contain a reference to themselves) may cause a recursive loop

 b) because deep copy copies *everything* it may copy too much, e.g.
    administrative data structures that should be shared even between
    copies

Python's deep copy operation avoids these problems by:

 a) keeping a table of objects already copied during the current
    copying pass

 b) letting user-defined classes override the copying operation or the
    set of components copied

This version does not copy types like module, class, function, method,
nor stack trace, stack frame, nor file, socket, window, nor array, nor
any similar types.

Classes can use the same interfaces to control copying that they use
to control pickling: they can define methods called __getinitargs__(),
__getstate__() and __setstate__().  See the documentation for module
\"pickle\" for information on these methods.
\"\"\"" code nil nil [1 1748])
            ("types" include nil nil [1750 1762])
            ("weakref" include nil nil [1763 1777])
            ("copy_reg" include nil nil [1778 1813])
            ("Error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [1843 1847]))                  
                :type "class")
                nil [1815 1848])
            ("error" variable nil nil [1848 1861])
            ("try" code nil nil [1890 1982])
            ("__all__" variable nil nil [1983 2022])
            ("copy" function
               (:documentation "Shallow copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [2033 2034]))                  )
                nil [2024 2786])
            ("_copy_dispatch" variable nil nil [2788 2811])
            ("_copy_immutable" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [2833 2834]))              ) nil [2813 2850])
            ("for" code nil nil [2850 3084])
            ("for" code nil nil [3084 3228])
            ("_copy_with_constructor" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3256 3257]))              ) nil [3229 3282])
            ("for" code nil nil [3282 3344])
            ("_copy_with_copy_method" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3372 3373]))              ) nil [3345 3396])
            ("if" code nil nil [3396 3468])
            ("_copy_inst" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3484 3485]))              ) nil [3469 3947])
            ("d" variable nil nil [3947 3981])
            ("del" code nil nil [3983 3988])
            ("deepcopy" function
               (:documentation "Deep copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [4003 4004])
                    ("memo" variable nil (reparse-symbol function_parameters) [4006 4010])
                    ("_nil" variable nil (reparse-symbol function_parameters) [4017 4021]))                  )
                nil [3990 5472])
            ("_deepcopy_dispatch" variable nil nil [5473 5500])
            ("_deepcopy_atomic" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5523 5524])
                ("memo" variable nil (reparse-symbol function_parameters) [5526 5530]))              ) nil [5502 5546])
            ("d" variable nil nil [5546 5578])
            ("d" variable nil nil [5579 5615])
            ("d" variable nil nil [5616 5641])
            ("d" variable nil nil [5642 5668])
            ("d" variable nil nil [5669 5696])
            ("d" variable nil nil [5697 5723])
            ("try" code nil nil [5724 5790])
            ("d" variable nil nil [5790 5815])
            ("try" code nil nil [5816 5882])
            ("try" code nil nil [5882 5960])
            ("d" variable nil nil [5960 5986])
            ("d" variable nil nil [5987 6015])
            ("d" variable nil nil [6016 6053])
            ("d" variable nil nil [6054 6101])
            ("d" variable nil nil [6102 6142])
            ("d" variable nil nil [6143 6176])
            ("_deepcopy_list" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6197 6198])
                ("memo" variable nil (reparse-symbol function_parameters) [6200 6204]))              ) nil [6178 6303])
            ("d" variable nil nil [6303 6327])
            ("_deepcopy_tuple" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6349 6350])
                ("memo" variable nil (reparse-symbol function_parameters) [6352 6356]))              ) nil [6329 6655])
            ("d" variable nil nil [6655 6681])
            ("_deepcopy_dict" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6702 6703])
                ("memo" variable nil (reparse-symbol function_parameters) [6705 6709]))              ) nil [6683 6848])
            ("d" variable nil nil [6848 6872])
            ("if" code nil nil [6873 6937])
            ("_deepcopy_method" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6959 6960])
                ("memo" variable nil (reparse-symbol function_parameters) [6962 6966]))              ) nil [6938 7062])
            ("_deepcopy_dispatch" variable nil nil [7062 7117])
            ("_keep_alive" function
               (:documentation "Keeps a reference to the object x in the memo.

    Because we remember objects by their id, we have
    to assure that possibly temporary objects are kept
    alive by referencing them.
    We store a reference at the id of the memo, which should
    normally not be used unless someone tries to deepcopy
    the memo itself...
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7135 7136])
                    ("memo" variable nil (reparse-symbol function_parameters) [7138 7142]))                  )
                nil [7119 7620])
            ("_deepcopy_inst" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [7640 7641])
                ("memo" variable nil (reparse-symbol function_parameters) [7643 7647]))              ) nil [7621 8211])
            ("d" variable nil nil [8211 8249])
            ("_reconstruct" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [8268 8269])
                ("info" variable nil (reparse-symbol function_parameters) [8271 8275])
                ("deep" variable nil (reparse-symbol function_parameters) [8277 8281])
                ("memo" variable nil (reparse-symbol function_parameters) [8283 8287]))              ) nil [8251 9696])
            ("del" code nil nil [9697 9702])
            ("del" code nil nil [9704 9713])
            ("_EmptyClass" type
               (:members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [9794 9798]))                  
                :type "class")
                nil [9771 9799])
            ("_test" function nil nil [9800 11480])
            ("if" code nil nil [11481 11520]))          
    :file "copy.py"
    :pointmax 11520
    :fsize 11519
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "textwrap.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Text wrapping and filling.
\"\"\"" code nil nil [1 34])
            ("__revision__" variable nil nil [177 198])
            ("string" include nil nil [200 217])
            ("re" include nil nil [200 217])
            ("__all__" variable nil nil [506 557])
            ("_whitespace" variable nil nil [1062 1093])
            ("TextWrapper" type
               (:documentation "
    Object for wrapping/filling text.  The public interface consists of
    the wrap() and fill() methods; the other methods are just there for
    subclasses to override in order to tweak the default behaviour.
    If you want to completely replace the main wrapping algorithm,
    you'll probably have to override _wrap_chunks().

    Several instance attributes control various aspects of wrapping:
      width (default: 70)
        the maximum width of wrapped lines (unless break_long_words
        is false)
      initial_indent (default: \"\")
        string that will be prepended to the first line of wrapped
        output.  Counts towards the line's width.
      subsequent_indent (default: \"\")
        string that will be prepended to all lines save the first
        of wrapped output; also counts towards each line's width.
      expand_tabs (default: true)
        Expand tabs in input text to spaces before further processing.
        Each tab will become 1 .. 8 spaces, depending on its position in
        its line.  If false, each tab is treated as a single character.
      replace_whitespace (default: true)
        Replace all whitespace characters in the input text by spaces
        after tab expansion.  Note that if expand_tabs is false and
        replace_whitespace is true, every tab will be converted to a
        single space!
      fix_sentence_endings (default: false)
        Ensure that sentence-ending punctuation is always followed
        by two spaces.  Off by default because the algorithm is
        (unavoidably) imperfect.
      break_long_words (default: true)
        Break words longer than 'width'.  If false, those words will not
        be broken, and some lines might be longer than 'width'.
      break_on_hyphens (default: true)
        Allow breaking hyphenated words. If true, wrapping will occur
        preferably on whitespaces and right after hyphens part of
        compound words.
      drop_whitespace (default: true)
        Drop leading and trailing whitespace from lines.
    "
                :members 
                  ( ("whitespace_trans" variable nil (reparse-symbol indented_block_body) [3169 3241])
                    ("unicode_whitespace_trans" variable nil (reparse-symbol indented_block_body) [3247 3276])
                    ("uspace" variable nil (reparse-symbol indented_block_body) [3281 3299])
                    ("for" code nil (reparse-symbol indented_block_body) [3304 3381])
                    ("wordsep_re" variable nil (reparse-symbol indented_block_body) [3690 3898])
                    ("wordsep_simple_re" variable nil (reparse-symbol indented_block_body) [4140 4180])
                    ("sentence_end_re" variable nil (reparse-symbol indented_block_body) [4305 4652])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5030 5048])
                            ("self" variable nil (reparse-symbol indented_block_body) [5057 5093])
                            ("self" variable nil (reparse-symbol indented_block_body) [5102 5144])
                            ("self" variable nil (reparse-symbol indented_block_body) [5153 5183])
                            ("self" variable nil (reparse-symbol indented_block_body) [5192 5236])
                            ("self" variable nil (reparse-symbol indented_block_body) [5245 5293])
                            ("self" variable nil (reparse-symbol indented_block_body) [5302 5342])
                            ("self" variable nil (reparse-symbol indented_block_body) [5351 5389])
                            ("self" variable nil (reparse-symbol indented_block_body) [5398 5438])
                            ("self" variable nil (reparse-symbol indented_block_body) [5660 5723])
                            ("self" variable nil (reparse-symbol indented_block_body) [5732 5822]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4672 4676])
                            ("width" variable nil (reparse-symbol function_parameters) [4695 4700])
                            ("initial_indent" variable nil (reparse-symbol function_parameters) [4722 4736])
                            ("subsequent_indent" variable nil (reparse-symbol function_parameters) [4758 4775])
                            ("expand_tabs" variable nil (reparse-symbol function_parameters) [4797 4808])
                            ("replace_whitespace" variable nil (reparse-symbol function_parameters) [4832 4850])
                            ("fix_sentence_endings" variable nil (reparse-symbol function_parameters) [4874 4894])
                            ("break_long_words" variable nil (reparse-symbol function_parameters) [4919 4935])
                            ("drop_whitespace" variable nil (reparse-symbol function_parameters) [4959 4974])
                            ("break_on_hyphens" variable nil (reparse-symbol function_parameters) [4998 5014]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4659 5823])
                    ("_munge_whitespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5976 5980])
                            ("text" variable nil (reparse-symbol function_parameters) [5982 5986]))                          
                        :documentation "_munge_whitespace(text : string) -> string

        Munge whitespace in text: expand tabs and convert all other
        whitespace characters to spaces.  Eg. \" foo\\tbar\\n\\nbaz\"
        becomes \" foo    bar  baz\".
        ")
                        (reparse-symbol indented_block_body) [5954 6559])
                    ("_split" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6576 6580])
                            ("text" variable nil (reparse-symbol function_parameters) [6582 6586]))                          
                        :documentation "_split(text : string) -> [string]

        Split the text to wrap into indivisible chunks.  Chunks are
        not quite the same as words; see _wrap_chunks() for full
        details.  As an example, the text
          Look, goof-ball -- use the -b option!
        breaks into the following chunks:
          'Look,', ' ', 'goof-', 'ball', ' ', '--', ' ',
          'use', ' ', 'the', ' ', '-b', ' ', 'option!'
        if break_on_hyphens is True, or in:
          'Look,', ' ', 'goof-ball', ' ', '--', ' ',
          'use', ' ', 'the', ' ', '-b', ' ', option!'
        otherwise.
        ")
                        (reparse-symbol indented_block_body) [6565 7648])
                    ("_fix_sentence_endings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7679 7683])
                            ("chunks" variable nil (reparse-symbol function_parameters) [7685 7691]))                          
                        :documentation "_fix_sentence_endings(chunks : [string])

        Correct for sentence endings buried in 'chunks'.  Eg. when the
        original text contains \"... foo.\\nBar ...\", munge_whitespace()
        and split() will convert that to [..., \"foo.\", \" \", \"Bar\", ...]
        which has one too few spaces; this method simply changes the one
        space to two.
        ")
                        (reparse-symbol indented_block_body) [7653 8322])
                    ("_handle_long_word" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8349 8353])
                            ("reversed_chunks" variable nil (reparse-symbol function_parameters) [8355 8370])
                            ("cur_line" variable nil (reparse-symbol function_parameters) [8372 8380])
                            ("cur_len" variable nil (reparse-symbol function_parameters) [8382 8389])
                            ("width" variable nil (reparse-symbol function_parameters) [8391 8396]))                          
                        :documentation "_handle_long_word(chunks : [string],
                             cur_line : [string],
                             cur_len : int, width : int)

        Handle a chunk of text (most likely a word, not whitespace) that
        is too long to fit in any line.
        ")
                        (reparse-symbol indented_block_body) [8327 9517])
                    ("_wrap_chunks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9885 9889])
                            ("chunks" variable nil (reparse-symbol function_parameters) [9891 9897]))                          
                        :documentation "_wrap_chunks(chunks : [string]) -> [string]

        Wrap a sequence of text chunks and return a list of lines of
        length 'self.width' or less.  (If 'break_long_words' is false,
        some lines may be longer than this.)  Chunks correspond roughly
        to words and the whitespace between them: each chunk is
        indivisible (modulo 'break_long_words'), but a line break can
        come between any two chunks.  Chunks should not have internal
        whitespace; ie. a chunk is either all whitespace or a \"word\".
        Whitespace chunks will be removed from the beginning and end of
        lines, but apart from that whitespace is preserved.
        ")
                        (reparse-symbol indented_block_body) [9868 12620])
                    ("wrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12709 12713])
                            ("text" variable nil (reparse-symbol function_parameters) [12715 12719]))                          
                        :documentation "wrap(text : string) -> [string]

        Reformat the single paragraph in 'text' so it fits in lines of
        no more than 'self.width' columns, and return a list of wrapped
        lines.  Tabs in 'text' are expanded with string.expandtabs(),
        and all other whitespace characters (including newline) are
        converted to space.
        ")
                        (reparse-symbol indented_block_body) [12700 13292])
                    ("fill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13306 13310])
                            ("text" variable nil (reparse-symbol function_parameters) [13312 13316]))                          
                        :documentation "fill(text : string) -> string

        Reformat the single paragraph in 'text' to fit in lines of no
        more than 'self.width' columns, and return a new string
        containing the entire wrapped paragraph.
        ")
                        (reparse-symbol indented_block_body) [13297 13598]))                  
                :type "class")
                nil [1095 13598])
            ("wrap" function
               (:documentation "Wrap a single paragraph of text, returning a list of wrapped lines.

    Reformat the single paragraph in 'text' so it fits in lines of no
    more than 'width' columns, and return a list of wrapped lines.  By
    default, tabs in 'text' are expanded with string.expandtabs(), and
    all other whitespace characters (including newline) are converted to
    space.  See TextWrapper class for available keyword args to customize
    wrapping behaviour.
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [13683 13687])
                    ("width" variable nil (reparse-symbol function_parameters) [13689 13694])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [13699 13707]))                  )
                nil [13674 14244])
            ("fill" function
               (:documentation "Fill a single paragraph of text, returning a new string.

    Reformat the single paragraph in 'text' to fit in lines of no more
    than 'width' columns, and return a new string containing the entire
    wrapped paragraph.  As with wrap(), tabs are expanded and other
    whitespace characters converted to space.  See TextWrapper class for
    available keyword args to customize wrapping behaviour.
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [14254 14258])
                    ("width" variable nil (reparse-symbol function_parameters) [14260 14265])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [14270 14278]))                  )
                nil [14245 14765])
            ("_whitespace_only_re" variable nil nil [14841 14899])
            ("_leading_whitespace_re" variable nil nil [14900 14974])
            ("dedent" function
               (:documentation "Remove any common leading whitespace from every line in `text`.

    This can be used to make triple-quoted strings line up with the left
    edge of the display, while still presenting them in the source code
    in indented form.

    Note that tabs and spaces are both treated as whitespace, but they
    are not equal: the lines \"  hello\" and \"\\thello\" are
    considered to have no common leading whitespace.  (This behaviour is
    new in Python 2.5; older versions of this module incorrectly
    expanded tabs before searching for common leading whitespace.)
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [14987 14991]))                  )
                nil [14976 16676])
            ("if" code nil nil [16677 16849]))          
    :file "textwrap.py"
    :pointmax 16849
    :fsize 16848
    :lastmodtime '(21060 39147 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "gettext.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Internationalization and localization support.

This module provides internationalization (I18N) and localization (L10N)
support for your Python programs by providing an interface to the GNU gettext
message catalog library.

I18N refers to the operation by which a program is made aware of multiple
languages.  L10N refers to the adaptation of your program, once
internationalized, to the local language and cultural habits.

\"\"\"" code nil nil [1 433])
            ("locale" include nil nil [2049 2089])
            ("copy" include nil nil [2049 2089])
            ("os" include nil nil [2049 2089])
            ("re" include nil nil [2049 2089])
            ("struct" include nil nil [2049 2089])
            ("sys" include nil nil [2049 2089])
            ("errno" include nil nil [2090 2114])
            ("__all__" variable nil nil [2117 2326])
            ("_default_localedir" variable nil nil [2328 2392])
            ("test" function
               (:documentation "
    Implements the C expression:

      condition ? true : false

    Required to correctly interpret plural forms.
    "
                :arguments 
                  ( ("condition" variable nil (reparse-symbol function_parameters) [2404 2413])
                    ("true" variable nil (reparse-symbol function_parameters) [2415 2419])
                    ("false" variable nil (reparse-symbol function_parameters) [2421 2426]))                  )
                nil [2395 2630])
            ("c2py" function
               (:documentation "Gets a C expression as used in PO files for plural forms and returns a
    Python lambda function that implements an equivalent expression.
    "
                :arguments 
                  ( ("plural" variable nil (reparse-symbol function_parameters) [2641 2647]))                  )
                nil [2632 4567])
            ("_expand_lang" function (:arguments 
              ( ("locale" variable nil (reparse-symbol function_parameters) [4587 4593]))              ) nil [4570 5735])
            ("NullTranslations" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5803 5818])
                            ("self" variable nil (reparse-symbol indented_block_body) [5827 5847])
                            ("self" variable nil (reparse-symbol indented_block_body) [5856 5883])
                            ("self" variable nil (reparse-symbol indented_block_body) [5892 5913])
                            ("if" code nil (reparse-symbol indented_block_body) [5922 5969]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5779 5783])
                            ("fp" variable nil (reparse-symbol function_parameters) [5785 5787]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5766 5969])
                    ("_parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5985 5989])
                            ("fp" variable nil (reparse-symbol function_parameters) [5991 5993]))                          )
                        (reparse-symbol indented_block_body) [5974 6009])
                    ("add_fallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6031 6035])
                            ("fallback" variable nil (reparse-symbol function_parameters) [6037 6045]))                          )
                        (reparse-symbol indented_block_body) [6014 6177])
                    ("gettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6194 6198])
                            ("message" variable nil (reparse-symbol function_parameters) [6200 6207]))                          )
                        (reparse-symbol indented_block_body) [6182 6311])
                    ("lgettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6329 6333])
                            ("message" variable nil (reparse-symbol function_parameters) [6335 6342]))                          )
                        (reparse-symbol indented_block_body) [6316 6447])
                    ("ngettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6465 6469])
                            ("msgid1" variable nil (reparse-symbol function_parameters) [6471 6477])
                            ("msgid2" variable nil (reparse-symbol function_parameters) [6479 6485])
                            ("n" variable nil (reparse-symbol function_parameters) [6487 6488]))                          )
                        (reparse-symbol indented_block_body) [6452 6665])
                    ("lngettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6684 6688])
                            ("msgid1" variable nil (reparse-symbol function_parameters) [6690 6696])
                            ("msgid2" variable nil (reparse-symbol function_parameters) [6698 6704])
                            ("n" variable nil (reparse-symbol function_parameters) [6706 6707]))                          )
                        (reparse-symbol indented_block_body) [6670 6885])
                    ("ugettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6903 6907])
                            ("message" variable nil (reparse-symbol function_parameters) [6909 6916]))                          )
                        (reparse-symbol indented_block_body) [6890 7030])
                    ("ungettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7049 7053])
                            ("msgid1" variable nil (reparse-symbol function_parameters) [7055 7061])
                            ("msgid2" variable nil (reparse-symbol function_parameters) [7063 7069])
                            ("n" variable nil (reparse-symbol function_parameters) [7071 7072]))                          )
                        (reparse-symbol indented_block_body) [7035 7268])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7282 7286]))                          )
                        (reparse-symbol indented_block_body) [7273 7315])
                    ("charset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7332 7336]))                          )
                        (reparse-symbol indented_block_body) [7320 7368])
                    ("output_charset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7392 7396]))                          )
                        (reparse-symbol indented_block_body) [7373 7435])
                    ("set_output_charset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7463 7467])
                            ("charset" variable nil (reparse-symbol function_parameters) [7469 7476]))                          )
                        (reparse-symbol indented_block_body) [7440 7518])
                    ("install" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7535 7539])
                            ("unicode" variable nil (reparse-symbol function_parameters) [7541 7548])
                            ("names" variable nil (reparse-symbol function_parameters) [7556 7561]))                          )
                        (reparse-symbol indented_block_body) [7523 8227]))                  
                :type "class")
                nil [5738 8227])
            ("GNUTranslations" type
               (:superclasses ("NullTranslations")
                :members 
                  ( ("LE_MAGIC" variable nil (reparse-symbol indented_block_body) [8306 8328])
                    ("BE_MAGIC" variable nil (reparse-symbol indented_block_body) [8333 8355])
                    ("_parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8372 8376])
                            ("fp" variable nil (reparse-symbol function_parameters) [8378 8380]))                          
                        :documentation "Override this method to support alternative .mo formats.")
                        (reparse-symbol indented_block_body) [8361 12077])
                    ("gettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12094 12098])
                            ("message" variable nil (reparse-symbol function_parameters) [12100 12107]))                          )
                        (reparse-symbol indented_block_body) [12082 12580])
                    ("lgettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12598 12602])
                            ("message" variable nil (reparse-symbol function_parameters) [12604 12611]))                          )
                        (reparse-symbol indented_block_body) [12585 12978])
                    ("ngettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12996 13000])
                            ("msgid1" variable nil (reparse-symbol function_parameters) [13002 13008])
                            ("msgid2" variable nil (reparse-symbol function_parameters) [13010 13016])
                            ("n" variable nil (reparse-symbol function_parameters) [13018 13019]))                          )
                        (reparse-symbol indented_block_body) [12983 13517])
                    ("lngettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13536 13540])
                            ("msgid1" variable nil (reparse-symbol function_parameters) [13542 13548])
                            ("msgid2" variable nil (reparse-symbol function_parameters) [13550 13556])
                            ("n" variable nil (reparse-symbol function_parameters) [13558 13559]))                          )
                        (reparse-symbol indented_block_body) [13522 14014])
                    ("ugettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14032 14036])
                            ("message" variable nil (reparse-symbol function_parameters) [14038 14045]))                          )
                        (reparse-symbol indented_block_body) [14019 14297])
                    ("ungettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14316 14320])
                            ("msgid1" variable nil (reparse-symbol function_parameters) [14322 14328])
                            ("msgid2" variable nil (reparse-symbol function_parameters) [14330 14336])
                            ("n" variable nil (reparse-symbol function_parameters) [14338 14339]))                          )
                        (reparse-symbol indented_block_body) [14302 14676]))                  
                :type "class")
                nil [8229 14676])
            ("find" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [14734 14740])
                ("localedir" variable nil (reparse-symbol function_parameters) [14742 14751])
                ("languages" variable nil (reparse-symbol function_parameters) [14758 14767])
                ("all" variable nil (reparse-symbol function_parameters) [14774 14777]))              ) nil [14725 16257])
            ("_translations" variable nil nil [16326 16344])
            ("translation" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [16362 16368])
                ("localedir" variable nil (reparse-symbol function_parameters) [16370 16379])
                ("languages" variable nil (reparse-symbol function_parameters) [16386 16395])
                ("class_" variable nil (reparse-symbol function_parameters) [16418 16424])
                ("fallback" variable nil (reparse-symbol function_parameters) [16431 16439])
                ("codeset" variable nil (reparse-symbol function_parameters) [16447 16454]))              ) nil [16346 17441])
            ("install" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [17455 17461])
                ("localedir" variable nil (reparse-symbol function_parameters) [17463 17472])
                ("unicode" variable nil (reparse-symbol function_parameters) [17479 17486])
                ("codeset" variable nil (reparse-symbol function_parameters) [17494 17501])
                ("names" variable nil (reparse-symbol function_parameters) [17508 17513]))              ) nil [17443 17622])
            ("_localedirs" variable nil nil [17672 17688])
            ("_localecodesets" variable nil nil [17726 17746])
            ("_current_domain" variable nil nil [17821 17849])
            ("textdomain" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [17867 17873]))              ) nil [17852 17995])
            ("bindtextdomain" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [18016 18022])
                ("localedir" variable nil (reparse-symbol function_parameters) [18024 18033]))              ) nil [17997 18189])
            ("bind_textdomain_codeset" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [18219 18225])
                ("codeset" variable nil (reparse-symbol function_parameters) [18227 18234]))              ) nil [18191 18378])
            ("dgettext" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [18393 18399])
                ("message" variable nil (reparse-symbol function_parameters) [18401 18408]))              ) nil [18380 18617])
            ("ldgettext" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [18632 18638])
                ("message" variable nil (reparse-symbol function_parameters) [18640 18647]))              ) nil [18618 18857])
            ("dngettext" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [18872 18878])
                ("msgid1" variable nil (reparse-symbol function_parameters) [18880 18886])
                ("msgid2" variable nil (reparse-symbol function_parameters) [18888 18894])
                ("n" variable nil (reparse-symbol function_parameters) [18896 18897]))              ) nil [18858 19179])
            ("ldngettext" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [19195 19201])
                ("msgid1" variable nil (reparse-symbol function_parameters) [19203 19209])
                ("msgid2" variable nil (reparse-symbol function_parameters) [19211 19217])
                ("n" variable nil (reparse-symbol function_parameters) [19219 19220]))              ) nil [19180 19503])
            ("gettext" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [19516 19523]))              ) nil [19504 19572])
            ("lgettext" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [19586 19593]))              ) nil [19573 19643])
            ("ngettext" function (:arguments 
              ( ("msgid1" variable nil (reparse-symbol function_parameters) [19657 19663])
                ("msgid2" variable nil (reparse-symbol function_parameters) [19665 19671])
                ("n" variable nil (reparse-symbol function_parameters) [19673 19674]))              ) nil [19644 19734])
            ("lngettext" function (:arguments 
              ( ("msgid1" variable nil (reparse-symbol function_parameters) [19749 19755])
                ("msgid2" variable nil (reparse-symbol function_parameters) [19757 19763])
                ("n" variable nil (reparse-symbol function_parameters) [19765 19766]))              ) nil [19735 19827])
            ("Catalog" variable nil nil [20265 20286]))          
    :file "gettext.py"
    :pointmax 20287
    :fsize 20286
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "_abcoll.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) for collections, according to PEP 3119.

DON'T USE THIS MODULE DIRECTLY!  The classes here should be imported
via collections; they are defined here only to alleviate certain
bootstrapping issues.  Unit tests are in test_collections.
\"\"\"" code nil nil [102 371])
            ("abc" include nil nil [373 412])
            ("sys" include nil nil [413 423])
            ("__all__" variable nil nil [425 708])
            ("_hasattr" function (:arguments 
              ( ("C" variable nil (reparse-symbol function_parameters) [749 750])
                ("attr" variable nil (reparse-symbol function_parameters) [752 756]))              ) nil [736 911])
            ("Hashable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [933 956])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [995 999]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [962 1019])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1062 1065])
                            ("C" variable nil (reparse-symbol function_parameters) [1067 1068]))                          )
                        (reparse-symbol indented_block_body) [1024 1502]))                  
                :type "class")
                nil [913 1502])
            ("Iterable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [1524 1547])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1586 1590]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1553 1637])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1680 1683])
                            ("C" variable nil (reparse-symbol function_parameters) [1685 1686]))                          )
                        (reparse-symbol indented_block_body) [1642 1815]))                  
                :type "class")
                nil [1504 1815])
            ("Iterable" code nil nil [1816 1838])
            ("Iterator" type
               (:superclasses ("Iterable")
                :members 
                  ( ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1901 1905]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1872 1936])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1954 1958]))                          )
                        (reparse-symbol indented_block_body) [1941 1981])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2024 2027])
                            ("C" variable nil (reparse-symbol function_parameters) [2029 2030]))                          )
                        (reparse-symbol indented_block_body) [1986 2183]))                  
                :type "class")
                nil [1841 2183])
            ("Sized" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2202 2225])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2263 2267]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2231 2287])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2330 2333])
                            ("C" variable nil (reparse-symbol function_parameters) [2335 2336]))                          )
                        (reparse-symbol indented_block_body) [2292 2461]))                  
                :type "class")
                nil [2185 2461])
            ("Container" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2484 2507])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2550 2554])
                            ("x" variable nil (reparse-symbol function_parameters) [2556 2557]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2513 2581])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2624 2627])
                            ("C" variable nil (reparse-symbol function_parameters) [2629 2630]))                          )
                        (reparse-symbol indented_block_body) [2586 2764]))                  
                :type "class")
                nil [2463 2764])
            ("Callable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2786 2809])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2848 2852])
                            ("args" variable nil (reparse-symbol function_parameters) [2854 2859])
                            ("kwds" variable nil (reparse-symbol function_parameters) [2861 2867]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2815 2891])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2934 2937])
                            ("C" variable nil (reparse-symbol function_parameters) [2939 2940]))                          )
                        (reparse-symbol indented_block_body) [2896 3069]))                  
                :type "class")
                nil [2766 3069])
            ("Set" type
               (:documentation "A set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__ and __len__.

    To override the comparisons (presumably for speed, as the
    semantics are fixed), all you have to do is redefine __le__ and
    then the other operations will automatically follow suit.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3512 3516])
                            ("other" variable nil (reparse-symbol function_parameters) [3518 3523]))                          )
                        (reparse-symbol indented_block_body) [3501 3768])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3784 3788])
                            ("other" variable nil (reparse-symbol function_parameters) [3790 3795]))                          )
                        (reparse-symbol indented_block_body) [3773 3932])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3948 3952])
                            ("other" variable nil (reparse-symbol function_parameters) [3954 3959]))                          )
                        (reparse-symbol indented_block_body) [3937 4063])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4079 4083])
                            ("other" variable nil (reparse-symbol function_parameters) [4085 4090]))                          )
                        (reparse-symbol indented_block_body) [4068 4195])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4211 4215])
                            ("other" variable nil (reparse-symbol function_parameters) [4217 4222]))                          )
                        (reparse-symbol indented_block_body) [4200 4360])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4376 4380])
                            ("other" variable nil (reparse-symbol function_parameters) [4382 4387]))                          )
                        (reparse-symbol indented_block_body) [4365 4425])
                    ("_from_iterable" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4466 4469])
                            ("it" variable nil (reparse-symbol function_parameters) [4471 4473]))                          )
                        (reparse-symbol indented_block_body) [4430 4702])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4719 4723])
                            ("other" variable nil (reparse-symbol function_parameters) [4725 4730]))                          )
                        (reparse-symbol indented_block_body) [4707 4889])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4909 4913])
                            ("other" variable nil (reparse-symbol function_parameters) [4915 4920]))                          )
                        (reparse-symbol indented_block_body) [4894 5030])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5046 5050])
                            ("other" variable nil (reparse-symbol function_parameters) [5052 5057]))                          )
                        (reparse-symbol indented_block_body) [5035 5234])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5251 5255])
                            ("other" variable nil (reparse-symbol function_parameters) [5257 5262]))                          )
                        (reparse-symbol indented_block_body) [5239 5554])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5571 5575])
                            ("other" variable nil (reparse-symbol function_parameters) [5577 5582]))                          )
                        (reparse-symbol indented_block_body) [5559 5804])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [5880 5895])
                    ("_hash" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5911 5915]))                          
                        :documentation "Compute the hash value of a set.

        Note that we don't define __hash__: not all sets are hashable.
        But if you define a hashable set type, its __hash__ should
        call this function.

        This must be compatible __eq__.

        All sets ought to compare equal if they contain the same
        elements, regardless of how they are implemented, and
        regardless of the order of the elements; so there's not much
        freedom for __eq__ or __hash__.  We match the algorithm used
        by the built-in frozenset type.
        ")
                        (reparse-symbol indented_block_body) [5901 6904]))                  
                :type "class")
                nil [3086 6904])
            ("Set" code nil nil [6905 6928])
            ("MutableSet" type
               (:superclasses ("Set")
                :members 
                  ( ("add" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6987 6991])
                            ("value" variable nil (reparse-symbol function_parameters) [6993 6998]))                          
                        :documentation "Add an element.")
                        (reparse-symbol indented_block_body) [6959 7065])
                    ("discard" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7102 7106])
                            ("value" variable nil (reparse-symbol function_parameters) [7108 7113]))                          
                        :documentation "Remove an element.  Do not raise an exception if absent.")
                        (reparse-symbol indented_block_body) [7070 7221])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7237 7241])
                            ("value" variable nil (reparse-symbol function_parameters) [7243 7248]))                          
                        :documentation "Remove an element. If not a member, raise a KeyError.")
                        (reparse-symbol indented_block_body) [7226 7411])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7424 7428]))                          
                        :documentation "Return the popped value.  Raise KeyError if empty.")
                        (reparse-symbol indented_block_body) [7416 7668])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7683 7687]))                          
                        :documentation "This is slow (creates N new iterators!) but effective.")
                        (reparse-symbol indented_block_body) [7673 7865])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7882 7886])
                            ("it" variable nil (reparse-symbol function_parameters) [7888 7890]))                          )
                        (reparse-symbol indented_block_body) [7870 7966])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7984 7988])
                            ("it" variable nil (reparse-symbol function_parameters) [7990 7992]))                          )
                        (reparse-symbol indented_block_body) [7971 8081])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8099 8103])
                            ("it" variable nil (reparse-symbol function_parameters) [8105 8107]))                          )
                        (reparse-symbol indented_block_body) [8086 8438])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8456 8460])
                            ("it" variable nil (reparse-symbol function_parameters) [8462 8464]))                          )
                        (reparse-symbol indented_block_body) [8443 8614]))                  
                :type "class")
                nil [6931 8614])
            ("MutableSet" code nil nil [8615 8639])
            ("Mapping" type
               (:superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8745 8749])
                            ("key" variable nil (reparse-symbol function_parameters) [8751 8754]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8709 8780])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8793 8797])
                            ("key" variable nil (reparse-symbol function_parameters) [8799 8802])
                            ("default" variable nil (reparse-symbol function_parameters) [8804 8811]))                          )
                        (reparse-symbol indented_block_body) [8785 8913])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8935 8939])
                            ("key" variable nil (reparse-symbol function_parameters) [8941 8944]))                          )
                        (reparse-symbol indented_block_body) [8918 9070])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9088 9092]))                          )
                        (reparse-symbol indented_block_body) [9075 9121])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9141 9145]))                          )
                        (reparse-symbol indented_block_body) [9126 9201])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9220 9224]))                          )
                        (reparse-symbol indented_block_body) [9206 9287])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9301 9305]))                          )
                        (reparse-symbol indented_block_body) [9292 9334])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9349 9353]))                          )
                        (reparse-symbol indented_block_body) [9339 9406])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9422 9426]))                          )
                        (reparse-symbol indented_block_body) [9411 9472])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [9552 9567])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9584 9588])
                            ("other" variable nil (reparse-symbol function_parameters) [9590 9595]))                          )
                        (reparse-symbol indented_block_body) [9573 9732])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9748 9752])
                            ("other" variable nil (reparse-symbol function_parameters) [9754 9759]))                          )
                        (reparse-symbol indented_block_body) [9737 9797]))                  
                :type "class")
                nil [8661 9797])
            ("MappingView" type
               (:superclasses ("Sized")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9866 9889]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9842 9846])
                            ("mapping" variable nil (reparse-symbol function_parameters) [9848 9855]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9829 9890])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9907 9911]))                          )
                        (reparse-symbol indented_block_body) [9895 9948])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9966 9970]))                          )
                        (reparse-symbol indented_block_body) [9953 10042]))                  
                :type "class")
                nil [9798 10042])
            ("KeysView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10119 10123])
                            ("it" variable nil (reparse-symbol function_parameters) [10125 10127]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10083 10153])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10175 10179])
                            ("key" variable nil (reparse-symbol function_parameters) [10181 10184]))                          )
                        (reparse-symbol indented_block_body) [10158 10223])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10241 10245]))                          )
                        (reparse-symbol indented_block_body) [10228 10304]))                  
                :type "class")
                nil [10044 10304])
            ("ItemsView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10382 10386])
                            ("it" variable nil (reparse-symbol function_parameters) [10388 10390]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10346 10416])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10438 10442])
                            ("item" variable nil (reparse-symbol function_parameters) [10444 10448]))                          )
                        (reparse-symbol indented_block_body) [10421 10619])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10637 10641]))                          )
                        (reparse-symbol indented_block_body) [10624 10722]))                  
                :type "class")
                nil [10306 10722])
            ("ValuesView" type
               (:superclasses ("MappingView")
                :members 
                  ( ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10777 10781])
                            ("value" variable nil (reparse-symbol function_parameters) [10783 10788]))                          )
                        (reparse-symbol indented_block_body) [10760 10918])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10936 10940]))                          )
                        (reparse-symbol indented_block_body) [10923 11014]))                  
                :type "class")
                nil [10724 11014])
            ("MutableMapping" type
               (:superclasses ("Mapping")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11088 11092])
                            ("key" variable nil (reparse-symbol function_parameters) [11094 11097])
                            ("value" variable nil (reparse-symbol function_parameters) [11099 11104]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11052 11130])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11171 11175])
                            ("key" variable nil (reparse-symbol function_parameters) [11177 11180]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11135 11206])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [11211 11230])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11244 11248])
                            ("key" variable nil (reparse-symbol function_parameters) [11250 11253])
                            ("default" variable nil (reparse-symbol function_parameters) [11255 11262]))                          )
                        (reparse-symbol indented_block_body) [11236 11497])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11514 11518]))                          )
                        (reparse-symbol indented_block_body) [11502 11700])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11715 11719]))                          )
                        (reparse-symbol indented_block_body) [11705 11832])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [11848 11853])
                        ("kwds" variable nil (reparse-symbol function_parameters) [11855 11861]))                      ) (reparse-symbol indented_block_body) [11837 12576])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12596 12600])
                            ("key" variable nil (reparse-symbol function_parameters) [12602 12605])
                            ("default" variable nil (reparse-symbol function_parameters) [12607 12614]))                          )
                        (reparse-symbol indented_block_body) [12581 12744]))                  
                :type "class")
                nil [11016 12744])
            ("MutableMapping" code nil nil [12745 12774])
            ("Sequence" type
               (:documentation "All the operations on a read-only sequence.

    Concrete subclasses must override __new__ or __init__,
    __getitem__, and __len__.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13031 13035])
                            ("index" variable nil (reparse-symbol function_parameters) [13037 13042]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12995 13070])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13088 13092]))                          )
                        (reparse-symbol indented_block_body) [13075 13267])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13289 13293])
                            ("value" variable nil (reparse-symbol function_parameters) [13295 13300]))                          )
                        (reparse-symbol indented_block_body) [13272 13402])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13424 13428]))                          )
                        (reparse-symbol indented_block_body) [13407 13502])
                    ("index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13517 13521])
                            ("value" variable nil (reparse-symbol function_parameters) [13523 13528]))                          )
                        (reparse-symbol indented_block_body) [13507 13645])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13660 13664])
                            ("value" variable nil (reparse-symbol function_parameters) [13666 13671]))                          )
                        (reparse-symbol indented_block_body) [13650 13724]))                  
                :type "class")
                nil [12797 13724])
            ("Sequence" code nil nil [13725 13749])
            ("Sequence" code nil nil [13750 13779])
            ("Sequence" code nil nil [13780 13805])
            ("Sequence" code nil nil [13806 13831])
            ("MutableSequence" type
               (:superclasses ("Sequence")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13908 13912])
                            ("index" variable nil (reparse-symbol function_parameters) [13914 13919])
                            ("value" variable nil (reparse-symbol function_parameters) [13921 13926]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13872 13954])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13995 13999])
                            ("index" variable nil (reparse-symbol function_parameters) [14001 14006]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13959 14034])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14070 14074])
                            ("index" variable nil (reparse-symbol function_parameters) [14076 14081])
                            ("value" variable nil (reparse-symbol function_parameters) [14083 14088]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [14039 14116])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14132 14136])
                            ("value" variable nil (reparse-symbol function_parameters) [14138 14143]))                          )
                        (reparse-symbol indented_block_body) [14121 14184])
                    ("reverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14201 14205]))                          )
                        (reparse-symbol indented_block_body) [14189 14316])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14332 14336])
                            ("values" variable nil (reparse-symbol function_parameters) [14338 14344]))                          )
                        (reparse-symbol indented_block_body) [14321 14399])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14412 14416])
                            ("index" variable nil (reparse-symbol function_parameters) [14418 14423]))                          )
                        (reparse-symbol indented_block_body) [14404 14494])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14510 14514])
                            ("value" variable nil (reparse-symbol function_parameters) [14516 14521]))                          )
                        (reparse-symbol indented_block_body) [14499 14560])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14578 14582])
                            ("values" variable nil (reparse-symbol function_parameters) [14584 14590]))                          )
                        (reparse-symbol indented_block_body) [14565 14641]))                  
                :type "class")
                nil [13834 14641])
            ("MutableSequence" code nil nil [14642 14672]))          
    :file "_abcoll.py"
    :pointmax 14673
    :fsize 14672
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax '((NAME 12157 . 12162) (IF 12173 . 12175) (ELSE 12191 . 12195))
    )
   (semanticdb-table "keyword.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Keywords (from \"graminit.c\")

This file is automatically generated; please don't muck it up!

To update the symbols in this file, 'cd' to the top directory of
the python source tree after building the interpreter and run:

    python Lib/keyword.py
\"\"\"" code nil nil [24 279])
            ("__all__" variable nil nil [281 314])
            ("kwlist" variable nil nil [316 879])
            ("iskeyword" variable nil nil [881 923])
            ("main" function nil nil [925 1955])
            ("if" code nil nil [1956 1994]))          
    :file "keyword.py"
    :pointmax 1994
    :fsize 1993
    :lastmodtime '(21060 39170 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "heapq.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Heap queue algorithm (a.k.a. priority queue).

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

Usage:

heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged

Our API differs from textbook heap algorithms as follows:

- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.

- Our heappop() method returns the smallest item, not the largest.

These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!
\"\"\"" code nil nil [28 1297])
            ("__about__" variable nil nil [1381 6118])
            ("__all__" variable nil nil [6120 6239])
            ("itertools" include nil nil [6241 6308])
            ("operator" include nil nil [6309 6340])
            ("bisect" include nil nil [6341 6354])
            ("cmp_lt" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6367 6368])
                ("y" variable nil (reparse-symbol function_parameters) [6370 6371]))              ) nil [6356 6533])
            ("heappush" function
               (:documentation "Push item onto heap, maintaining the heap invariant."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [6547 6551])
                    ("item" variable nil (reparse-symbol function_parameters) [6553 6557]))                  )
                nil [6534 6681])
            ("heappop" function
               (:documentation "Pop the smallest item off the heap, maintaining the heap invariant."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [6694 6698]))                  )
                nil [6682 7010])
            ("heapreplace" function
               (:documentation "Pop and return the current smallest value, and add the new item.

    This is more efficient than heappop() followed by heappush(), and can be
    more appropriate when using a fixed-size heap.  Note that the value
    returned may be larger than item!  That constrains reasonable uses of
    this routine unless written as part of a conditional replacement:

        if item > heap[0]:
            item = heapreplace(heap, item)
    "
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [7027 7031])
                    ("item" variable nil (reparse-symbol function_parameters) [7033 7037]))                  )
                nil [7011 7624])
            ("heappushpop" function
               (:documentation "Fast version of a heappush followed by a heappop."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [7641 7645])
                    ("item" variable nil (reparse-symbol function_parameters) [7647 7651]))                  )
                nil [7625 7832])
            ("heapify" function
               (:documentation "Transform list into a heap, in-place, in O(len(x)) time."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7845 7846]))                  )
                nil [7833 8361])
            ("nlargest" function
               (:documentation "Find the n largest elements in a dataset.

    Equivalent to:  sorted(iterable, reverse=True)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [8375 8376])
                    ("iterable" variable nil (reparse-symbol function_parameters) [8378 8386]))                  )
                nil [8362 8786])
            ("nsmallest" function
               (:documentation "Find the n smallest elements in a dataset.

    Equivalent to:  sorted(iterable)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [8801 8802])
                    ("iterable" variable nil (reparse-symbol function_parameters) [8804 8812]))                  )
                nil [8787 9992])
            ("_siftdown" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [10176 10180])
                ("startpos" variable nil (reparse-symbol function_parameters) [10182 10190])
                ("pos" variable nil (reparse-symbol function_parameters) [10192 10195]))              ) nil [10162 10567])
            ("_siftup" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [12642 12646])
                ("pos" variable nil (reparse-symbol function_parameters) [12648 12651]))              ) nil [12630 13370])
            ("try" code nil nil [13408 13467])
            ("merge" function (:arguments 
              ( ("iterables" variable nil (reparse-symbol function_parameters) [13478 13488]))              ) nil [13468 14663])
            ("_nsmallest" variable nil nil [14742 14764])
            ("nsmallest" function
               (:documentation "Find the n smallest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [14779 14780])
                    ("iterable" variable nil (reparse-symbol function_parameters) [14782 14790])
                    ("key" variable nil (reparse-symbol function_parameters) [14792 14795]))                  )
                nil [14765 15916])
            ("_nlargest" variable nil nil [15917 15937])
            ("nlargest" function
               (:documentation "Find the n largest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key, reverse=True)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [15951 15952])
                    ("iterable" variable nil (reparse-symbol function_parameters) [15954 15962])
                    ("key" variable nil (reparse-symbol function_parameters) [15964 15967]))                  )
                nil [15938 17114])
            ("if" code nil nil [17115 17396]))          
    :file "heapq.py"
    :pointmax 17396
    :fsize 17395
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax '((RETURN 6476 . 6482) (IF 6491 . 6493) (ELSE 6515 . 6519))
    )
   (semanticdb-table "opcode.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
opcode module - potentially shared between dis and other modules which
operate on bytecodes (e.g. peephole optimizers).
\"\"\"" code nil nil [2 129])
            ("__all__" variable nil nil [131 307])
            ("cmp_op" variable nil nil [309 418])
            ("hasconst" variable nil nil [420 433])
            ("hasname" variable nil nil [434 446])
            ("hasjrel" variable nil nil [447 459])
            ("hasjabs" variable nil nil [460 472])
            ("haslocal" variable nil nil [473 486])
            ("hascompare" variable nil nil [487 502])
            ("hasfree" variable nil nil [503 515])
            ("opmap" variable nil nil [517 527])
            ("opname" code nil nil [528 547])
            ("for" code nil nil [548 598])
            ("del" code nil nil [598 604])
            ("def_op" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [617 621])
                ("op" variable nil (reparse-symbol function_parameters) [623 625]))              ) nil [606 671])
            ("name_op" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [684 688])
                ("op" variable nil (reparse-symbol function_parameters) [690 692]))              ) nil [672 739])
            ("jrel_op" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [752 756])
                ("op" variable nil (reparse-symbol function_parameters) [758 760]))              ) nil [740 807])
            ("jabs_op" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [820 824])
                ("op" variable nil (reparse-symbol function_parameters) [826 828]))              ) nil [808 875])
            ("def_op" code nil nil [963 985])
            ("def_op" code nil nil [986 1006])
            ("def_op" code nil nil [1007 1027])
            ("def_op" code nil nil [1028 1050])
            ("def_op" code nil nil [1051 1071])
            ("def_op" code nil nil [1072 1093])
            ("def_op" code nil nil [1095 1111])
            ("def_op" code nil nil [1112 1140])
            ("def_op" code nil nil [1141 1169])
            ("def_op" code nil nil [1170 1193])
            ("def_op" code nil nil [1194 1221])
            ("def_op" code nil nil [1223 1249])
            ("def_op" code nil nil [1251 1277])
            ("def_op" code nil nil [1278 1307])
            ("def_op" code nil nil [1308 1335])
            ("def_op" code nil nil [1336 1363])
            ("def_op" code nil nil [1364 1388])
            ("def_op" code nil nil [1389 1418])
            ("def_op" code nil nil [1419 1446])
            ("def_op" code nil nil [1447 1480])
            ("def_op" code nil nil [1481 1513])
            ("def_op" code nil nil [1514 1548])
            ("def_op" code nil nil [1549 1582])
            ("def_op" code nil nil [1583 1604])
            ("def_op" code nil nil [1605 1626])
            ("def_op" code nil nil [1627 1648])
            ("def_op" code nil nil [1649 1670])
            ("def_op" code nil nil [1672 1699])
            ("def_op" code nil nil [1700 1727])
            ("def_op" code nil nil [1728 1755])
            ("def_op" code nil nil [1756 1783])
            ("def_op" code nil nil [1785 1813])
            ("def_op" code nil nil [1814 1842])
            ("def_op" code nil nil [1843 1871])
            ("def_op" code nil nil [1872 1900])
            ("def_op" code nil nil [1902 1925])
            ("def_op" code nil nil [1926 1951])
            ("def_op" code nil nil [1952 1982])
            ("def_op" code nil nil [1983 2013])
            ("def_op" code nil nil [2014 2042])
            ("def_op" code nil nil [2043 2071])
            ("def_op" code nil nil [2072 2098])
            ("def_op" code nil nil [2099 2126])
            ("def_op" code nil nil [2127 2154])
            ("def_op" code nil nil [2155 2182])
            ("def_op" code nil nil [2183 2207])
            ("def_op" code nil nil [2208 2232])
            ("def_op" code nil nil [2233 2256])
            ("def_op" code nil nil [2257 2284])
            ("def_op" code nil nil [2285 2307])
            ("def_op" code nil nil [2309 2333])
            ("def_op" code nil nil [2334 2358])
            ("def_op" code nil nil [2359 2386])
            ("def_op" code nil nil [2387 2414])
            ("def_op" code nil nil [2415 2445])
            ("def_op" code nil nil [2446 2474])
            ("def_op" code nil nil [2475 2503])
            ("def_op" code nil nil [2504 2529])
            ("def_op" code nil nil [2530 2555])
            ("def_op" code nil nil [2556 2580])
            ("def_op" code nil nil [2581 2605])
            ("def_op" code nil nil [2606 2632])
            ("def_op" code nil nil [2633 2658])
            ("def_op" code nil nil [2659 2685])
            ("def_op" code nil nil [2686 2711])
            ("def_op" code nil nil [2712 2735])
            ("def_op" code nil nil [2736 2761])
            ("def_op" code nil nil [2762 2785])
            ("def_op" code nil nil [2786 2811])
            ("def_op" code nil nil [2812 2837])
            ("HAVE_ARGUMENT" variable nil nil [2839 2857])
            ("name_op" code nil nil [2910 2935])
            ("name_op" code nil nil [2963 2989])
            ("def_op" code nil nil [3000 3029])
            ("jrel_op" code nil nil [3056 3079])
            ("def_op" code nil nil [3080 3105])
            ("name_op" code nil nil [3106 3131])
            ("name_op" code nil nil [3159 3185])
            ("name_op" code nil nil [3196 3223])
            ("name_op" code nil nil [3233 3261])
            ("def_op" code nil nil [3270 3292])
            ("def_op" code nil nil [3333 3358])
            ("hasconst" code nil nil [3387 3407])
            ("name_op" code nil nil [3408 3433])
            ("def_op" code nil nil [3461 3487])
            ("def_op" code nil nil [3517 3542])
            ("def_op" code nil nil [3572 3596])
            ("def_op" code nil nil [3626 3650])
            ("name_op" code nil nil [3694 3719])
            ("def_op" code nil nil [3747 3772])
            ("hascompare" code nil nil [3801 3823])
            ("name_op" code nil nil [3824 3851])
            ("name_op" code nil nil [3877 3904])
            ("jrel_op" code nil nil [3930 3958])
            ("jabs_op" code nil nil [3988 4024])
            ("jabs_op" code nil nil [4069 4104])
            ("jabs_op" code nil nil [4111 4140])
            ("jabs_op" code nil nil [4153 4186])
            ("jabs_op" code nil nil [4195 4227])
            ("name_op" code nil nil [4238 4265])
            ("jabs_op" code nil nil [4292 4321])
            ("jrel_op" code nil nil [4341 4367])
            ("jrel_op" code nil nil [4402 4430])
            ("jrel_op" code nil nil [4439 4468])
            ("def_op" code nil nil [4477 4501])
            ("haslocal" code nil nil [4533 4553])
            ("def_op" code nil nil [4554 4579])
            ("haslocal" code nil nil [4610 4630])
            ("def_op" code nil nil [4631 4657])
            ("haslocal" code nil nil [4687 4707])
            ("def_op" code nil nil [4709 4737])
            ("def_op" code nil nil [4782 4810])
            ("def_op" code nil nil [4839 4867])
            ("def_op" code nil nil [4908 4934])
            ("def_op" code nil nil [4958 4985])
            ("def_op" code nil nil [4986 5013])
            ("hasfree" code nil nil [5014 5033])
            ("def_op" code nil nil [5034 5059])
            ("hasfree" code nil nil [5060 5079])
            ("def_op" code nil nil [5080 5106])
            ("hasfree" code nil nil [5107 5126])
            ("def_op" code nil nil [5128 5160])
            ("def_op" code nil nil [5190 5221])
            ("def_op" code nil nil [5252 5287])
            ("jrel_op" code nil nil [5315 5341])
            ("def_op" code nil nil [5343 5370])
            ("EXTENDED_ARG" variable nil nil [5371 5389])
            ("def_op" code nil nil [5390 5412])
            ("def_op" code nil nil [5413 5435])
            ("del" code nil nil [5437 5474]))          
    :file "opcode.py"
    :pointmax 5475
    :fsize 5474
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "token.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Token constants (from \"token.h\").\"\"\"" code nil nil [24 63])
            ("ENDMARKER" variable nil nil [316 329])
            ("NAME" variable nil nil [330 338])
            ("NUMBER" variable nil nil [339 349])
            ("STRING" variable nil nil [350 360])
            ("NEWLINE" variable nil nil [361 372])
            ("INDENT" variable nil nil [373 383])
            ("DEDENT" variable nil nil [384 394])
            ("LPAR" variable nil nil [395 403])
            ("RPAR" variable nil nil [404 412])
            ("LSQB" variable nil nil [413 421])
            ("RSQB" variable nil nil [422 431])
            ("COLON" variable nil nil [432 442])
            ("COMMA" variable nil nil [443 453])
            ("SEMI" variable nil nil [454 463])
            ("PLUS" variable nil nil [464 473])
            ("MINUS" variable nil nil [474 484])
            ("STAR" variable nil nil [485 494])
            ("SLASH" variable nil nil [495 505])
            ("VBAR" variable nil nil [506 515])
            ("AMPER" variable nil nil [516 526])
            ("LESS" variable nil nil [527 536])
            ("GREATER" variable nil nil [537 549])
            ("EQUAL" variable nil nil [550 560])
            ("DOT" variable nil nil [561 569])
            ("PERCENT" variable nil nil [570 582])
            ("BACKQUOTE" variable nil nil [583 597])
            ("LBRACE" variable nil nil [598 609])
            ("RBRACE" variable nil nil [610 621])
            ("EQEQUAL" variable nil nil [622 634])
            ("NOTEQUAL" variable nil nil [635 648])
            ("LESSEQUAL" variable nil nil [649 663])
            ("GREATEREQUAL" variable nil nil [664 681])
            ("TILDE" variable nil nil [682 692])
            ("CIRCUMFLEX" variable nil nil [693 708])
            ("LEFTSHIFT" variable nil nil [709 723])
            ("RIGHTSHIFT" variable nil nil [724 739])
            ("DOUBLESTAR" variable nil nil [740 755])
            ("PLUSEQUAL" variable nil nil [756 770])
            ("MINEQUAL" variable nil nil [771 784])
            ("STAREQUAL" variable nil nil [785 799])
            ("SLASHEQUAL" variable nil nil [800 815])
            ("PERCENTEQUAL" variable nil nil [816 833])
            ("AMPEREQUAL" variable nil nil [834 849])
            ("VBAREQUAL" variable nil nil [850 864])
            ("CIRCUMFLEXEQUAL" variable nil nil [865 885])
            ("LEFTSHIFTEQUAL" variable nil nil [886 905])
            ("RIGHTSHIFTEQUAL" variable nil nil [906 926])
            ("DOUBLESTAREQUAL" variable nil nil [927 947])
            ("DOUBLESLASH" variable nil nil [948 964])
            ("DOUBLESLASHEQUAL" variable nil nil [965 986])
            ("AT" variable nil nil [987 994])
            ("OP" variable nil nil [995 1002])
            ("ERRORTOKEN" variable nil nil [1003 1018])
            ("N_TOKENS" variable nil nil [1019 1032])
            ("NT_OFFSET" variable nil nil [1033 1048])
            ("tok_name" variable nil nil [1069 1082])
            ("for" code nil nil [1083 1188])
            ("del" code nil nil [1188 1205])
            ("ISTERMINAL" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1223 1224]))              ) nil [1208 1252])
            ("ISNONTERMINAL" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1271 1272]))              ) nil [1253 1301])
            ("ISEOF" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1312 1313]))              ) nil [1302 1342])
            ("main" function nil nil [1344 2904])
            ("if" code nil nil [2906 2944]))          
    :file "token.py"
    :pointmax 2944
    :fsize 2943
    :lastmodtime '(21060 39169 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "struct.py"
    :major-mode 'python-mode
    :tags 
        '( ("_struct" include nil nil [1 22])
            ("_struct" include nil nil [23 54])
            ("_struct" include nil nil [55 82]))          
    :file "struct.py"
    :pointmax 83
    :fsize 82
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "sre_constants.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [296 333])
            ("MAGIC" variable nil nil [381 397])
            ("MAXREPEAT" variable nil nil [432 449])
            ("error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [557 561]))                  
                :type "class")
                nil [529 562])
            ("FAILURE" variable nil nil [576 595])
            ("SUCCESS" variable nil nil [596 615])
            ("ANY" variable nil nil [617 628])
            ("ANY_ALL" variable nil nil [629 648])
            ("ASSERT" variable nil nil [649 666])
            ("ASSERT_NOT" variable nil nil [667 692])
            ("AT" variable nil nil [693 702])
            ("BIGCHARSET" variable nil nil [703 728])
            ("BRANCH" variable nil nil [729 746])
            ("CALL" variable nil nil [747 760])
            ("CATEGORY" variable nil nil [761 782])
            ("CHARSET" variable nil nil [783 802])
            ("GROUPREF" variable nil nil [803 824])
            ("GROUPREF_IGNORE" variable nil nil [825 860])
            ("GROUPREF_EXISTS" variable nil nil [861 896])
            ("IN" variable nil nil [897 906])
            ("IN_IGNORE" variable nil nil [907 930])
            ("INFO" variable nil nil [931 944])
            ("JUMP" variable nil nil [945 958])
            ("LITERAL" variable nil nil [959 978])
            ("LITERAL_IGNORE" variable nil nil [979 1012])
            ("MARK" variable nil nil [1013 1026])
            ("MAX_REPEAT" variable nil nil [1027 1052])
            ("MAX_UNTIL" variable nil nil [1053 1076])
            ("MIN_REPEAT" variable nil nil [1077 1102])
            ("MIN_UNTIL" variable nil nil [1103 1126])
            ("NEGATE" variable nil nil [1127 1144])
            ("NOT_LITERAL" variable nil nil [1145 1172])
            ("NOT_LITERAL_IGNORE" variable nil nil [1173 1214])
            ("RANGE" variable nil nil [1215 1230])
            ("REPEAT" variable nil nil [1231 1248])
            ("REPEAT_ONE" variable nil nil [1249 1274])
            ("SUBPATTERN" variable nil nil [1275 1300])
            ("MIN_REPEAT_ONE" variable nil nil [1301 1334])
            ("AT_BEGINNING" variable nil nil [1348 1377])
            ("AT_BEGINNING_LINE" variable nil nil [1378 1417])
            ("AT_BEGINNING_STRING" variable nil nil [1418 1461])
            ("AT_BOUNDARY" variable nil nil [1462 1489])
            ("AT_NON_BOUNDARY" variable nil nil [1490 1525])
            ("AT_END" variable nil nil [1526 1543])
            ("AT_END_LINE" variable nil nil [1544 1571])
            ("AT_END_STRING" variable nil nil [1572 1603])
            ("AT_LOC_BOUNDARY" variable nil nil [1604 1639])
            ("AT_LOC_NON_BOUNDARY" variable nil nil [1640 1683])
            ("AT_UNI_BOUNDARY" variable nil nil [1684 1719])
            ("AT_UNI_NON_BOUNDARY" variable nil nil [1720 1763])
            ("CATEGORY_DIGIT" variable nil nil [1778 1811])
            ("CATEGORY_NOT_DIGIT" variable nil nil [1812 1853])
            ("CATEGORY_SPACE" variable nil nil [1854 1887])
            ("CATEGORY_NOT_SPACE" variable nil nil [1888 1929])
            ("CATEGORY_WORD" variable nil nil [1930 1961])
            ("CATEGORY_NOT_WORD" variable nil nil [1962 2001])
            ("CATEGORY_LINEBREAK" variable nil nil [2002 2043])
            ("CATEGORY_NOT_LINEBREAK" variable nil nil [2044 2093])
            ("CATEGORY_LOC_WORD" variable nil nil [2094 2133])
            ("CATEGORY_LOC_NOT_WORD" variable nil nil [2134 2181])
            ("CATEGORY_UNI_DIGIT" variable nil nil [2182 2223])
            ("CATEGORY_UNI_NOT_DIGIT" variable nil nil [2224 2273])
            ("CATEGORY_UNI_SPACE" variable nil nil [2274 2315])
            ("CATEGORY_UNI_NOT_SPACE" variable nil nil [2316 2365])
            ("CATEGORY_UNI_WORD" variable nil nil [2366 2405])
            ("CATEGORY_UNI_NOT_WORD" variable nil nil [2406 2453])
            ("CATEGORY_UNI_LINEBREAK" variable nil nil [2454 2503])
            ("CATEGORY_UNI_NOT_LINEBREAK" variable nil nil [2504 2561])
            ("OPCODES" variable nil nil [2563 3060])
            ("ATCODES" variable nil nil [3062 3286])
            ("CHCODES" variable nil nil [3288 3702])
            ("makedict" function (:arguments 
              ( ("list" variable nil (reparse-symbol function_parameters) [3717 3721]))              ) nil [3704 3818])
            ("OPCODES" variable nil nil [3819 3846])
            ("ATCODES" variable nil nil [3847 3874])
            ("CHCODES" variable nil nil [3875 3902])
            ("OP_IGNORE" variable nil nil [3952 4082])
            ("AT_MULTILINE" variable nil nil [4084 4163])
            ("AT_LOCALE" variable nil nil [4165 4255])
            ("AT_UNICODE" variable nil nil [4257 4348])
            ("CH_LOCALE" variable nil nil [4350 4704])
            ("CH_UNICODE" variable nil nil [4706 5085])
            ("SRE_FLAG_TEMPLATE" variable nil nil [5095 5116])
            ("SRE_FLAG_IGNORECASE" variable nil nil [5156 5179])
            ("SRE_FLAG_LOCALE" variable nil nil [5199 5218])
            ("SRE_FLAG_MULTILINE" variable nil nil [5242 5264])
            ("SRE_FLAG_DOTALL" variable nil nil [5300 5320])
            ("SRE_FLAG_UNICODE" variable nil nil [5355 5376])
            ("SRE_FLAG_VERBOSE" variable nil nil [5398 5419])
            ("SRE_FLAG_DEBUG" variable nil nil [5453 5473])
            ("SRE_INFO_PREFIX" variable nil nil [5514 5533])
            ("SRE_INFO_LITERAL" variable nil nil [5547 5567])
            ("SRE_INFO_CHARSET" variable nil nil [5614 5634])
            ("if" code nil nil [5683 7138]))          
    :file "sre_constants.py"
    :pointmax 7138
    :fsize 7137
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "weakref.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Weak reference support for Python.

This module is an implementation of PEP 205:

http://www.python.org/dev/peps/pep-0205/
\"\"\"" code nil nil [1 130])
            ("UserDict" include nil nil [332 347])
            ("" code nil nil [370 493])
            ("_weakrefset" include nil nil [495 526])
            ("exceptions" include nil nil [528 565])
            ("ProxyTypes" variable nil nil [568 611])
            ("__all__" variable nil nil [613 833])
            ("WeakValueDictionary" type
               (:documentation "Mapping class that references values weakly.

    Entries in the dictionary will be discarded when no strong
    reference to the value exists anymore
    "
                :superclasses ("UserDict.UserDict")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("remove" function (:arguments 
                              ( ("wr" variable nil (reparse-symbol function_parameters) [1391 1393])
                                ("selfref" variable nil (reparse-symbol function_parameters) [1395 1402]))                              ) (reparse-symbol indented_block_body) [1380 1515])
                            ("self" variable nil (reparse-symbol indented_block_body) [1523 1544])
                            ("UserDict" code nil (reparse-symbol indented_block_body) [1553 1598]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1352 1356])
                            ("args" variable nil (reparse-symbol function_parameters) [1358 1363])
                            ("kw" variable nil (reparse-symbol function_parameters) [1365 1369]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1339 1599])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1620 1624])
                            ("key" variable nil (reparse-symbol function_parameters) [1626 1629]))                          )
                        (reparse-symbol indented_block_body) [1604 1750])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1772 1776])
                            ("key" variable nil (reparse-symbol function_parameters) [1778 1781]))                          )
                        (reparse-symbol indented_block_body) [1755 1909])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1926 1930])
                            ("key" variable nil (reparse-symbol function_parameters) [1932 1935]))                          )
                        (reparse-symbol indented_block_body) [1914 2063])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2081 2085]))                          )
                        (reparse-symbol indented_block_body) [2068 2144])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2165 2169])
                            ("key" variable nil (reparse-symbol function_parameters) [2171 2174])
                            ("value" variable nil (reparse-symbol function_parameters) [2176 2181]))                          )
                        (reparse-symbol indented_block_body) [2149 2244])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2258 2262]))                          )
                        (reparse-symbol indented_block_body) [2249 2442])
                    ("__copy__" variable nil (reparse-symbol indented_block_body) [2447 2462])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2485 2489])
                            ("memo" variable nil (reparse-symbol function_parameters) [2491 2495]))                          )
                        (reparse-symbol indented_block_body) [2468 2720])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2733 2737])
                            ("key" variable nil (reparse-symbol function_parameters) [2739 2742])
                            ("default" variable nil (reparse-symbol function_parameters) [2744 2751]))                          )
                        (reparse-symbol indented_block_body) [2725 3033])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3048 3052]))                          )
                        (reparse-symbol indented_block_body) [3038 3215])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3234 3238]))                          )
                        (reparse-symbol indented_block_body) [3220 3378])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3396 3400]))                          )
                        (reparse-symbol indented_block_body) [3383 3439])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3457 3461]))                          )
                        (reparse-symbol indented_block_body) [3444 3500])
                    ("itervaluerefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3523 3527]))                          
                        :documentation "Return an iterator that yields the weak references to the values.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the values around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [3505 3983])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4003 4007]))                          )
                        (reparse-symbol indented_block_body) [3988 4133])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4150 4154]))                          )
                        (reparse-symbol indented_block_body) [4138 4297])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4310 4314])
                            ("key" variable nil (reparse-symbol function_parameters) [4316 4319])
                            ("args" variable nil (reparse-symbol function_parameters) [4321 4326]))                          )
                        (reparse-symbol indented_block_body) [4302 4563])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4583 4587])
                            ("key" variable nil (reparse-symbol function_parameters) [4589 4592])
                            ("default" variable nil (reparse-symbol function_parameters) [4594 4601]))                          )
                        (reparse-symbol indented_block_body) [4568 4810])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4826 4830])
                            ("dict" variable nil (reparse-symbol function_parameters) [4832 4836])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4843 4851]))                          )
                        (reparse-symbol indented_block_body) [4815 5138])
                    ("valuerefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5157 5161]))                          
                        :documentation "Return a list of weak references to the values.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the values around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [5143 5595])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5611 5615]))                          )
                        (reparse-symbol indented_block_body) [5600 5767]))                  
                :type "class")
                nil [836 5767])
            ("KeyedRef" type
               (:documentation "Specialized reference that includes a key corresponding to the value.

    This is used in the WeakValueDictionary to avoid having to create
    a function object for each key stored in the mapping.  A shared
    callback object can use the 'key' attribute of a KeyedRef instead
    of getting a reference to the key from an enclosing scope.

    "
                :superclasses ("ref")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [6153 6171])
                    ("__new__" function (:arguments 
                      ( ("type" variable nil (reparse-symbol function_parameters) [6189 6193])
                        ("ob" variable nil (reparse-symbol function_parameters) [6195 6197])
                        ("callback" variable nil (reparse-symbol function_parameters) [6199 6207])
                        ("key" variable nil (reparse-symbol function_parameters) [6209 6212]))                      ) (reparse-symbol indented_block_body) [6177 6305])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [6357 6402]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6323 6327])
                            ("ob" variable nil (reparse-symbol function_parameters) [6329 6331])
                            ("callback" variable nil (reparse-symbol function_parameters) [6333 6341])
                            ("key" variable nil (reparse-symbol function_parameters) [6343 6346]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6310 6403]))                  
                :type "class")
                nil [5769 6403])
            ("WeakKeyDictionary" type
               (:documentation " Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    "
                :superclasses ("UserDict.UserDict")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6897 6911])
                            ("remove" function (:arguments 
                              ( ("k" variable nil (reparse-symbol function_parameters) [6931 6932])
                                ("selfref" variable nil (reparse-symbol function_parameters) [6934 6941]))                              ) (reparse-symbol indented_block_body) [6920 7049])
                            ("self" variable nil (reparse-symbol indented_block_body) [7057 7078])
                            ("if" code nil (reparse-symbol indented_block_body) [7087 7126]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6871 6875])
                            ("dict" variable nil (reparse-symbol function_parameters) [6877 6881]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6858 7126])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7147 7151])
                            ("key" variable nil (reparse-symbol function_parameters) [7153 7156]))                          )
                        (reparse-symbol indented_block_body) [7131 7191])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7212 7216])
                            ("key" variable nil (reparse-symbol function_parameters) [7218 7221]))                          )
                        (reparse-symbol indented_block_body) [7196 7259])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7277 7281]))                          )
                        (reparse-symbol indented_block_body) [7264 7338])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7359 7363])
                            ("key" variable nil (reparse-symbol function_parameters) [7365 7368])
                            ("value" variable nil (reparse-symbol function_parameters) [7370 7375]))                          )
                        (reparse-symbol indented_block_body) [7343 7428])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7442 7446]))                          )
                        (reparse-symbol indented_block_body) [7433 7630])
                    ("__copy__" variable nil (reparse-symbol indented_block_body) [7635 7650])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7673 7677])
                            ("memo" variable nil (reparse-symbol function_parameters) [7679 7683]))                          )
                        (reparse-symbol indented_block_body) [7656 7914])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7927 7931])
                            ("key" variable nil (reparse-symbol function_parameters) [7933 7936])
                            ("default" variable nil (reparse-symbol function_parameters) [7938 7945]))                          )
                        (reparse-symbol indented_block_body) [7919 8000])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8017 8021])
                            ("key" variable nil (reparse-symbol function_parameters) [8023 8026]))                          )
                        (reparse-symbol indented_block_body) [8005 8146])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8168 8172])
                            ("key" variable nil (reparse-symbol function_parameters) [8174 8177]))                          )
                        (reparse-symbol indented_block_body) [8151 8297])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8312 8316]))                          )
                        (reparse-symbol indented_block_body) [8302 8485])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8504 8508]))                          )
                        (reparse-symbol indented_block_body) [8490 8647])
                    ("iterkeyrefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8668 8672]))                          
                        :documentation "Return an iterator that yields the weak references to the keys.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the keys around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [8652 9122])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9140 9144]))                          )
                        (reparse-symbol indented_block_body) [9127 9268])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9286 9290]))                          )
                        (reparse-symbol indented_block_body) [9273 9324])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9344 9348]))                          )
                        (reparse-symbol indented_block_body) [9329 9389])
                    ("keyrefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9406 9410]))                          
                        :documentation "Return a list of weak references to the keys.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the keys around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [9394 9838])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9852 9856]))                          )
                        (reparse-symbol indented_block_body) [9843 10006])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10023 10027]))                          )
                        (reparse-symbol indented_block_body) [10011 10176])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10189 10193])
                            ("key" variable nil (reparse-symbol function_parameters) [10195 10198])
                            ("args" variable nil (reparse-symbol function_parameters) [10200 10205]))                          )
                        (reparse-symbol indented_block_body) [10181 10254])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10274 10278])
                            ("key" variable nil (reparse-symbol function_parameters) [10280 10283])
                            ("default" variable nil (reparse-symbol function_parameters) [10285 10292]))                          )
                        (reparse-symbol indented_block_body) [10259 10368])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10384 10388])
                            ("dict" variable nil (reparse-symbol function_parameters) [10390 10394])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [10401 10409]))                          )
                        (reparse-symbol indented_block_body) [10373 10694]))                  
                :type "class")
                nil [6405 10694]))          
    :file "weakref.py"
    :pointmax 10694
    :fsize 10693
    :lastmodtime '(21060 39147 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "abc.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) according to PEP 3119.\"\"\"" code nil nil [102 159])
            ("types" include nil nil [161 173])
            ("_weakrefset" include nil nil [175 206])
            ("_C" type
               (:members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [238 253])
            ("_InstanceType" variable nil nil [253 279])
            ("abstractmethod" function
               (:documentation "A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
    "
                :arguments 
                  ( ("funcobj" variable nil (reparse-symbol function_parameters) [301 308]))                  )
                nil [282 876])
            ("abstractproperty" type
               (:documentation "A decorator indicating abstract properties.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract properties are overridden.
    The abstract properties can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractproperty
            def my_abstract_property(self):
                ...

    This defines a read-only property; you can also define a read-write
    abstract property using the 'long' form of property declaration:

        class C:
            __metaclass__ = ABCMeta
            def getx(self): ...
            def setx(self, value): ...
            x = abstractproperty(getx, setx)
    "
                :superclasses ("property")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1742 1769]))                  
                :type "class")
                nil [878 1770])
            ("ABCMeta" type
               (:documentation "Metaclass for defining Abstract Base Classes (ABCs).

    Use this metaclass to create an ABC.  An ABC can be subclassed
    directly, and then acts as a mix-in class.  You can also register
    unrelated concrete classes (even built-in classes) and unrelated
    ABCs as 'virtual subclasses' -- these and their descendants will
    be considered subclasses of the registering ABC by the built-in
    issubclass() function, but the registering ABC won't show up in
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registering ABC be callable (not
    even via super()).

    "
                :superclasses ("type")
                :members 
                  ( ("_abc_invalidation_counter" variable nil (reparse-symbol indented_block_body) [2614 2643])
                    ("__new__" function (:arguments 
                      ( ("mcls" variable nil (reparse-symbol function_parameters) [2661 2665])
                        ("name" variable nil (reparse-symbol function_parameters) [2667 2671])
                        ("bases" variable nil (reparse-symbol function_parameters) [2673 2678])
                        ("namespace" variable nil (reparse-symbol function_parameters) [2680 2689]))                      ) (reparse-symbol indented_block_body) [2649 3526])
                    ("register" function
                       (:documentation "Register a virtual subclass of an ABC."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3544 3547])
                            ("subclass" variable nil (reparse-symbol function_parameters) [3549 3557]))                          )
                        (reparse-symbol indented_block_body) [3531 4266])
                    ("_dump_registry" function
                       (:documentation "Debug helper to print the ABC registry."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4290 4293])
                            ("file" variable nil (reparse-symbol function_parameters) [4295 4299]))                          )
                        (reparse-symbol indented_block_body) [4271 4698])
                    ("__instancecheck__" function
                       (:documentation "Override for isinstance(instance, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4725 4728])
                            ("instance" variable nil (reparse-symbol function_parameters) [4730 4738]))                          )
                        (reparse-symbol indented_block_body) [4703 5559])
                    ("__subclasscheck__" function
                       (:documentation "Override for issubclass(subclass, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5586 5589])
                            ("subclass" variable nil (reparse-symbol function_parameters) [5591 5599]))                          )
                        (reparse-symbol indented_block_body) [5564 7146]))                  
                :type "class")
                nil [1772 7146]))          
    :file "abc.py"
    :pointmax 7146
    :fsize 7145
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "bisect.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Bisection algorithms.\"\"\"" code nil nil [1 28])
            ("insort_right" function
               (:documentation "Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the right of the rightmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [47 48])
                    ("x" variable nil (reparse-symbol function_parameters) [50 51])
                    ("lo" variable nil (reparse-symbol function_parameters) [53 55])
                    ("hi" variable nil (reparse-symbol function_parameters) [59 61]))                  )
                nil [30 547])
            ("insort" variable nil nil [548 569])
            ("bisect_right" function
               (:documentation "Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e <= x, and all e in
    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will
    insert just after the rightmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [615 616])
                    ("x" variable nil (reparse-symbol function_parameters) [618 619])
                    ("lo" variable nil (reparse-symbol function_parameters) [621 623])
                    ("hi" variable nil (reparse-symbol function_parameters) [627 629]))                  )
                nil [598 1254])
            ("bisect" variable nil nil [1255 1276])
            ("insort_left" function
               (:documentation "Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the left of the leftmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1321 1322])
                    ("x" variable nil (reparse-symbol function_parameters) [1324 1325])
                    ("lo" variable nil (reparse-symbol function_parameters) [1327 1329])
                    ("hi" variable nil (reparse-symbol function_parameters) [1333 1335]))                  )
                nil [1305 1819])
            ("bisect_left" function
               (:documentation "Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e < x, and all e in
    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will
    insert just before the leftmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1837 1838])
                    ("x" variable nil (reparse-symbol function_parameters) [1840 1841])
                    ("lo" variable nil (reparse-symbol function_parameters) [1843 1845])
                    ("hi" variable nil (reparse-symbol function_parameters) [1849 1851]))                  )
                nil [1821 2476])
            ("try" code nil nil [2536 2596]))          
    :file "bisect.py"
    :pointmax 2596
    :fsize 2595
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "UserDict.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"A more or less complete user-defined wrapper around dictionary objects.\"\"\"" code nil nil [1 78])
            ("UserDict" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [149 163])
                            ("if" code nil (reparse-symbol indented_block_body) [172 223])
                            ("if" code nil (reparse-symbol indented_block_body) [231 279]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113 117])
                            ("dict" variable nil (reparse-symbol function_parameters) [119 123])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [130 138]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [100 279])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [296 300]))                          )
                        (reparse-symbol indented_block_body) [283 326])
                    ("__cmp__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [342 346])
                            ("dict" variable nil (reparse-symbol function_parameters) [348 352]))                          )
                        (reparse-symbol indented_block_body) [330 493])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [497 512])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [550 554]))                          )
                        (reparse-symbol indented_block_body) [538 579])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [599 603])
                            ("key" variable nil (reparse-symbol function_parameters) [605 608]))                          )
                        (reparse-symbol indented_block_body) [583 810])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [830 834])
                            ("key" variable nil (reparse-symbol function_parameters) [836 839])
                            ("item" variable nil (reparse-symbol function_parameters) [841 845]))                          )
                        (reparse-symbol indented_block_body) [814 870])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [890 894])
                            ("key" variable nil (reparse-symbol function_parameters) [896 899]))                          )
                        (reparse-symbol indented_block_body) [874 921])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [935 939]))                          )
                        (reparse-symbol indented_block_body) [925 960])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [973 977]))                          )
                        (reparse-symbol indented_block_body) [964 1268])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1281 1285]))                          )
                        (reparse-symbol indented_block_body) [1272 1312])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1326 1330]))                          )
                        (reparse-symbol indented_block_body) [1316 1358])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1376 1380]))                          )
                        (reparse-symbol indented_block_body) [1362 1412])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1429 1433]))                          )
                        (reparse-symbol indented_block_body) [1416 1464])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1483 1487]))                          )
                        (reparse-symbol indented_block_body) [1468 1520])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1535 1539]))                          )
                        (reparse-symbol indented_block_body) [1524 1568])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1584 1588])
                            ("key" variable nil (reparse-symbol function_parameters) [1590 1593]))                          )
                        (reparse-symbol indented_block_body) [1572 1620])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1635 1639])
                            ("dict" variable nil (reparse-symbol function_parameters) [1641 1645])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1652 1660]))                          )
                        (reparse-symbol indented_block_body) [1624 2033])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2045 2049])
                            ("key" variable nil (reparse-symbol function_parameters) [2051 2054])
                            ("failobj" variable nil (reparse-symbol function_parameters) [2056 2063]))                          )
                        (reparse-symbol indented_block_body) [2037 2151])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2170 2174])
                            ("key" variable nil (reparse-symbol function_parameters) [2176 2179])
                            ("failobj" variable nil (reparse-symbol function_parameters) [2181 2188]))                          )
                        (reparse-symbol indented_block_body) [2155 2281])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2293 2297])
                            ("key" variable nil (reparse-symbol function_parameters) [2299 2302])
                            ("args" variable nil (reparse-symbol function_parameters) [2304 2309]))                          )
                        (reparse-symbol indented_block_body) [2285 2353])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2369 2373]))                          )
                        (reparse-symbol indented_block_body) [2357 2411])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2432 2436])
                            ("key" variable nil (reparse-symbol function_parameters) [2438 2441]))                          )
                        (reparse-symbol indented_block_body) [2415 2476])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2510 2513])
                            ("iterable" variable nil (reparse-symbol function_parameters) [2515 2523])
                            ("value" variable nil (reparse-symbol function_parameters) [2525 2530]))                          )
                        (reparse-symbol indented_block_body) [2480 2629]))                  
                :type "class")
                nil [80 2629])
            ("IterableUserDict" type
               (:superclasses ("UserDict")
                :members 
                  ( ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2681 2685]))                          )
                        (reparse-symbol indented_block_body) [2668 2719]))                  
                :type "class")
                nil [2630 2719])
            ("_abcoll" include nil nil [2720 2734])
            ("_abcoll" code nil nil [2735 2784])
            ("DictMixin" type
               (:members 
                  ( ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3286 3290]))                          )
                        (reparse-symbol indented_block_body) [3273 3343])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3359 3363])
                            ("key" variable nil (reparse-symbol function_parameters) [3365 3368]))                          )
                        (reparse-symbol indented_block_body) [3347 3476])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3497 3501])
                            ("key" variable nil (reparse-symbol function_parameters) [3503 3506]))                          )
                        (reparse-symbol indented_block_body) [3480 3542])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3623 3627]))                          )
                        (reparse-symbol indented_block_body) [3609 3684])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3701 3705]))                          )
                        (reparse-symbol indented_block_body) [3688 3739])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3813 3817]))                          )
                        (reparse-symbol indented_block_body) [3798 3878])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3893 3897]))                          )
                        (reparse-symbol indented_block_body) [3882 3948])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3962 3966]))                          )
                        (reparse-symbol indented_block_body) [3952 4007])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4021 4025]))                          )
                        (reparse-symbol indented_block_body) [4011 4086])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4105 4109])
                            ("key" variable nil (reparse-symbol function_parameters) [4111 4114])
                            ("default" variable nil (reparse-symbol function_parameters) [4116 4123]))                          )
                        (reparse-symbol indented_block_body) [4090 4253])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4265 4269])
                            ("key" variable nil (reparse-symbol function_parameters) [4271 4274])
                            ("args" variable nil (reparse-symbol function_parameters) [4276 4281]))                          )
                        (reparse-symbol indented_block_body) [4257 4614])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4630 4634]))                          )
                        (reparse-symbol indented_block_body) [4618 4814])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4829 4833])
                            ("other" variable nil (reparse-symbol function_parameters) [4835 4840])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4847 4855]))                          )
                        (reparse-symbol indented_block_body) [4818 5345])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5357 5361])
                            ("key" variable nil (reparse-symbol function_parameters) [5363 5366])
                            ("default" variable nil (reparse-symbol function_parameters) [5368 5375]))                          )
                        (reparse-symbol indented_block_body) [5349 5477])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5494 5498]))                          )
                        (reparse-symbol indented_block_body) [5481 5545])
                    ("__cmp__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5561 5565])
                            ("other" variable nil (reparse-symbol function_parameters) [5567 5572]))                          )
                        (reparse-symbol indented_block_body) [5549 5757])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5773 5777]))                          )
                        (reparse-symbol indented_block_body) [5761 5812]))                  
                :type "class")
                nil [2787 5812]))          
    :file "UserDict.py"
    :pointmax 5812
    :fsize 5811
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "_weakrefset.py"
    :major-mode 'python-mode
    :tags 
        '( ("_weakref" include nil nil [145 169])
            ("__all__" variable nil nil [171 192])
            ("_IterationGuard" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [543 582]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [483 487])
                            ("weakcontainer" variable nil (reparse-symbol function_parameters) [489 502]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [470 583])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [602 606]))                          )
                        (reparse-symbol indented_block_body) [588 723])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [741 745])
                            ("e" variable nil (reparse-symbol function_parameters) [747 748])
                            ("t" variable nil (reparse-symbol function_parameters) [750 751])
                            ("b" variable nil (reparse-symbol function_parameters) [753 754]))                          )
                        (reparse-symbol indented_block_body) [728 931]))                  
                :type "class")
                nil [195 931])
            ("WeakSet" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [999 1016])
                            ("_remove" function (:arguments 
                              ( ("item" variable nil (reparse-symbol function_parameters) [1037 1041])
                                ("selfref" variable nil (reparse-symbol function_parameters) [1043 1050]))                              ) (reparse-symbol indented_block_body) [1025 1283])
                            ("self" variable nil (reparse-symbol indented_block_body) [1291 1313])
                            ("self" variable nil (reparse-symbol indented_block_body) [1361 1388])
                            ("self" variable nil (reparse-symbol indented_block_body) [1397 1420])
                            ("if" code nil (reparse-symbol indented_block_body) [1429 1480]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [973 977])
                            ("data" variable nil (reparse-symbol function_parameters) [979 983]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [960 1480])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1506 1510]))                          )
                        (reparse-symbol indented_block_body) [1485 1630])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1648 1652]))                          )
                        (reparse-symbol indented_block_body) [1635 1830])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1847 1851]))                          )
                        (reparse-symbol indented_block_body) [1835 1909])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1931 1935])
                            ("item" variable nil (reparse-symbol function_parameters) [1937 1941]))                          )
                        (reparse-symbol indented_block_body) [1914 2066])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2086 2090]))                          )
                        (reparse-symbol indented_block_body) [2071 2189])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [2194 2209])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2223 2227])
                            ("item" variable nil (reparse-symbol function_parameters) [2229 2233]))                          )
                        (reparse-symbol indented_block_body) [2215 2354])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2369 2373]))                          )
                        (reparse-symbol indented_block_body) [2359 2473])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2487 2491]))                          )
                        (reparse-symbol indented_block_body) [2478 2530])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2543 2547]))                          )
                        (reparse-symbol indented_block_body) [2535 2876])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2892 2896])
                            ("item" variable nil (reparse-symbol function_parameters) [2898 2902]))                          )
                        (reparse-symbol indented_block_body) [2881 3012])
                    ("discard" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3029 3033])
                            ("item" variable nil (reparse-symbol function_parameters) [3035 3039]))                          )
                        (reparse-symbol indented_block_body) [3017 3150])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3166 3170])
                            ("other" variable nil (reparse-symbol function_parameters) [3172 3177]))                          )
                        (reparse-symbol indented_block_body) [3155 3420])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3437 3441])
                            ("other" variable nil (reparse-symbol function_parameters) [3443 3448]))                          )
                        (reparse-symbol indented_block_body) [3425 3498])
                    ("_apply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3568 3572])
                            ("other" variable nil (reparse-symbol function_parameters) [3574 3579])
                            ("method" variable nil (reparse-symbol function_parameters) [3581 3587]))                          )
                        (reparse-symbol indented_block_body) [3557 3805])
                    ("difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3825 3829])
                            ("other" variable nil (reparse-symbol function_parameters) [3831 3836]))                          )
                        (reparse-symbol indented_block_body) [3810 3895])
                    ("__sub__" variable nil (reparse-symbol indented_block_body) [3899 3919])
                    ("difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3947 3951])
                            ("other" variable nil (reparse-symbol function_parameters) [3953 3958]))                          )
                        (reparse-symbol indented_block_body) [3925 4171])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4188 4192])
                            ("other" variable nil (reparse-symbol function_parameters) [4194 4199]))                          )
                        (reparse-symbol indented_block_body) [4175 4432])
                    ("intersection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4454 4458])
                            ("other" variable nil (reparse-symbol function_parameters) [4460 4465]))                          )
                        (reparse-symbol indented_block_body) [4437 4526])
                    ("__and__" variable nil (reparse-symbol indented_block_body) [4530 4552])
                    ("intersection_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4582 4586])
                            ("other" variable nil (reparse-symbol function_parameters) [4588 4593]))                          )
                        (reparse-symbol indented_block_body) [4558 4734])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4751 4755])
                            ("other" variable nil (reparse-symbol function_parameters) [4757 4762]))                          )
                        (reparse-symbol indented_block_body) [4738 4923])
                    ("issubset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4941 4945])
                            ("other" variable nil (reparse-symbol function_parameters) [4947 4952]))                          )
                        (reparse-symbol indented_block_body) [4928 5018])
                    ("__lt__" variable nil (reparse-symbol indented_block_body) [5022 5039])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5056 5060])
                            ("other" variable nil (reparse-symbol function_parameters) [5062 5067]))                          )
                        (reparse-symbol indented_block_body) [5045 5131])
                    ("issuperset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5151 5155])
                            ("other" variable nil (reparse-symbol function_parameters) [5157 5162]))                          )
                        (reparse-symbol indented_block_body) [5136 5230])
                    ("__gt__" variable nil (reparse-symbol indented_block_body) [5234 5253])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5270 5274])
                            ("other" variable nil (reparse-symbol function_parameters) [5276 5281]))                          )
                        (reparse-symbol indented_block_body) [5259 5345])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5361 5365])
                            ("other" variable nil (reparse-symbol function_parameters) [5367 5372]))                          )
                        (reparse-symbol indented_block_body) [5350 5520])
                    ("symmetric_difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5550 5554])
                            ("other" variable nil (reparse-symbol function_parameters) [5556 5561]))                          )
                        (reparse-symbol indented_block_body) [5525 5630])
                    ("__xor__" variable nil (reparse-symbol indented_block_body) [5634 5664])
                    ("symmetric_difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5702 5706])
                            ("other" variable nil (reparse-symbol function_parameters) [5708 5713]))                          )
                        (reparse-symbol indented_block_body) [5670 5936])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5953 5957])
                            ("other" variable nil (reparse-symbol function_parameters) [5959 5964]))                          )
                        (reparse-symbol indented_block_body) [5940 6207])
                    ("union" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6222 6226])
                            ("other" variable nil (reparse-symbol function_parameters) [6228 6233]))                          )
                        (reparse-symbol indented_block_body) [6212 6287])
                    ("__or__" variable nil (reparse-symbol indented_block_body) [6291 6305])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6326 6330])
                            ("other" variable nil (reparse-symbol function_parameters) [6332 6337]))                          )
                        (reparse-symbol indented_block_body) [6311 6390]))                  
                :type "class")
                nil [933 6390]))          
    :file "_weakrefset.py"
    :pointmax 6390
    :fsize 6389
    :lastmodtime '(21060 39146 0 0)
    :unmatched-syntax 'nil
    )
   )
  :file "!usr!lib!python2.7!semantic.cache"
  :semantic-tag-version "2.1"
  :semanticdb-version "2.1"
  )
