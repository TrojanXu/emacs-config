;; Object common/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "common/"
  :tables (list 
   (semanticdb-table "cedet.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("when" code nil nil [2198 2281])
            ("cl" include nil nil [2304 2317])
            ("cedet-version" variable
               (:constant-flag t
                :default-value "1.1")
                nil [2323 2383])
            ("cedet-emacs-min-version" variable
               (:constant-flag t
                :default-value "22.1")
                nil [2385 2479])
            ("cedet-xemacs-min-version" variable
               (:constant-flag t
                :default-value "21.4")
                nil [2480 2572])
            ("cedet-sxemacs-min-version" variable
               (:constant-flag t
                :default-value "22.1.12")
                nil [2573 2670])
            ("cedet-packages" variable
               (:constant-flag t
                :default-value (\` ((cedet (\, cedet-version) "common" "common") (eieio "1.4" nil "eieio") (semantic "2.1" nil "semantic/doc") (srecode "1.1" nil "srecode") (ede "1.1" nil "ede") (speedbar "1.0.4" nil "speedbar") (cogre "1.1" nil "cogre") (cedet-contrib "1.1" "contrib" nil))))
                nil [2672 3297])
            ("when" code nil nil [3299 3791])
            ("let" code nil nil [3847 5870])
            ("inversion" include nil nil [5893 5913])
            ("cedet" function (:user-visible-flag t) nil [5916 7886])
            ("cedet-version" function (:user-visible-flag t) nil [7888 8562])
            ("cedet-version-print" function nil nil [8564 9787])
            ("cedet" package nil nil [9789 9805]))          
    :file "cedet.el"
    :pointmax 9830
    :fsize 9829
    :lastmodtime '(20362 59689 0 0)
    :unmatched-syntax '((close-paren 5913 . 5914) (symbol 5873 . 5890) (open-paren 5872 . 5873) (close-paren 2320 . 2321) (symbol 2284 . 2301) (open-paren 2283 . 2284))
    )
   (semanticdb-table "inversion.el"
    :file "inversion.el"
    :fsize 21761
    :lastmodtime '(20362 59689 0 0)
    )
   (semanticdb-table "cedet-files.el"
    :major-mode 'emacs-lisp-mode
    :tags nil
    :file "cedet-files.el"
    :pointmax 7850
    :fsize 7849
    :lastmodtime '(20362 59690 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "mode-local.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cl" include nil nil [1980 1993])
            ("mode-local-define-derived-mode-needed-p" function nil nil [2017 2442])
            ("when" code nil nil [2444 3441])
            ("mode-local-map-file-buffers" function (:arguments ("function" "predicate" "buffers")) nil [3465 4138])
            ("get-mode-local-parent" function (:arguments ("mode")) nil [4140 4339])
            ("mode-local-equivalent-mode-p" function (:arguments ("mode")) nil [4475 4719])
            ("mode-local-map-mode-buffers" function (:arguments ("function" "modes")) nil [4721 5191])
            ("mode-local-init-hook" variable nil nil [5216 5351])
            ("mode-local-changed-mode-buffers" variable nil nil [5353 5458])
            ("mode-local--init-mode" variable nil nil [5460 5494])
            ("mode-local-initialized-p" function nil nil [5496 5756])
            ("mode-local-post-major-mode-change" function nil nil [5758 6364])
            ("mode-local-on-major-mode-change" function nil nil [6366 6596])
            ("set-mode-local-parent" function (:arguments ("mode" "parent")) nil [6619 7114])
            ("define-child-mode" function (:arguments ("mode" "parent" "docstring")) nil [7116 7401])
            ("mode-local-use-bindings-p" function (:arguments ("this-mode" "desired-mode")) nil [7403 7695])
            ("mode-local-symbol-table" variable nil nil [7724 7931])
            ("make-variable-buffer-local" code nil nil [7932 7985])
            ("mode-local-active-mode" variable nil nil [7987 8067])
            ("new-mode-local-bindings" function nil nil [8069 8178])
            ("mode-local-bind" function (:arguments ("bindings" "plist" "mode")) nil [8180 11293])
            ("mode-local-symbol" function (:arguments ("symbol" "mode")) nil [11295 12179])
            ("mode-local-symbol-value" function (:arguments ("symbol" "mode" "property")) nil [12181 12755])
            ("activate-mode-local-bindings" function (:arguments ("mode")) nil [12786 14530])
            ("deactivate-mode-local-bindings" function (:arguments ("mode")) nil [14532 15208])
            ("with-mode-local-symbol" function (:arguments ("mode" "body")) nil [15210 16606])
            ("put" code nil nil [16607 16660])
            ("with-mode-local" function (:arguments ("mode" "body")) nil [16662 17045])
            ("put" code nil nil [17046 17092])
            ("mode-local-value" function (:arguments ("mode" "sym")) nil [17095 17291])
            ("setq-mode-local" function (:arguments ("mode" "args")) nil [17293 18458])
            ("defvar-mode-local" function (:arguments ("mode" "sym" "val" "docstring")) nil [18460 18747])
            ("put" code nil nil [18748 18801])
            ("defconst-mode-local" function (:arguments ("mode" "sym" "val" "docstring")) nil [18803 19190])
            ("put" code nil nil [19191 19246])
            ("make-obsolete-overload" function (:arguments ("old" "new" "when")) nil [19277 19626])
            ("overload-obsoleted-by" function (:arguments ("overload")) nil [19628 19806])
            ("overload-that-obsolete" function (:arguments ("overload")) nil [19808 20008])
            ("fetch-overload" function (:arguments ("overload")) nil [20010 20499])
            ("mode-local--override" function (:arguments ("name" "args" "body")) nil [20501 21179])
            ("mode-local--expand-overrides" function (:arguments ("name" "args" "body")) nil [21181 22080])
            ("mode-local--overload-body" function (:arguments ("name" "args" "body")) nil [22082 22475])
            ("define-overloadable-function" function (:arguments ("name" "args" "docstring" "body")) nil [22477 23758])
            ("put" code nil nil [23759 23808])
            ("defalias" code nil nil [23810 23867])
            ("function-overload-p" function (:arguments ("symbol")) nil [23869 24042])
            ("define-mode-local-override" function (:arguments ("name" "mode" "args" "docstring" "body")) nil [24044 25000])
            ("mode-local-read-function" function (:arguments ("prompt" "initial" "hist" "default")) nil [25044 25330])
            ("overload-docstring-extension" function (:arguments ("overload")) nil [25353 26002])
            ("mode-local-augment-function-help" function (:arguments ("symbol")) nil [26004 26608])
            ("describe-function" function (:arguments ("around" "mode-local-help" "activate")) nil [26664 26953])
            ("mode-local-print-binding" function (:arguments ("symbol")) nil [26988 27383])
            ("mode-local-print-bindings" function (:arguments ("table")) nil [27385 28612])
            ("mode-local-describe-bindings-2" function (:arguments ("buffer-or-mode")) nil [28614 29534])
            ("mode-local-describe-bindings-1" function (:arguments ("buffer-or-mode" "interactive-p")) nil [29536 30453])
            ("describe-mode-local-bindings" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [30455 30693])
            ("describe-mode-local-bindings-in-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [30695 31088])
            ("mode-local-font-lock-keywords" variable
               (:constant-flag t
                :default-value (eval-when-compile (let* ((kv (regexp-opt (quote ("defconst-mode-local" "defvar-mode-local")) t)) (kf (regexp-opt (quote ("define-mode-local-override" "define-child-mode" "define-overload" "define-overloadable-function" "with-mode-local")) t)) (kv-depth (regexp-opt-depth kv)) (kf-depth (regexp-opt-depth kf))) (\` (((\, (concat "(\\(" kv "\\|" kf "\\)" "\\>[ 	]*\\(\\sw+\\)?[ 	]*\\(\\sw+\\)?")) (1 font-lock-keyword-face) ((\, (+ 1 kv-depth kf-depth 1)) (cond ((match-beginning 2) font-lock-type-face) ((match-beginning (\, (+ 1 kv-depth 1))) font-lock-function-name-face)) nil t) ((\, (+ 1 kv-depth kf-depth 1 1)) (cond ((match-beginning 2) font-lock-variable-name-face)) nil t)))))))
                nil [31117 32525])
            ("condition-case" code nil nil [32584 32692])
            ("when" code nil nil [32694 33139])
            ("when" code nil nil [33169 33309])
            ("mode-local-setup-edebug-specs" function nil nil [33334 33941])
            ("add-hook" code nil nil [33943 34003])
            ("add-hook" code nil nil [34005 34066])
            ("add-hook" code nil nil [34067 34134])
            ("mode-local" package nil nil [34136 34157]))          
    :file "mode-local.el"
    :pointmax 34187
    :fsize 34186
    :lastmodtime '(20362 59690 0 0)
    :unmatched-syntax '((close-paren 1993 . 1994) (symbol 1962 . 1979) (open-paren 1961 . 1962))
    )
   (semanticdb-table "cedet-global.el"
    :major-mode 'emacs-lisp-mode
    :tags nil
    :file "cedet-global.el"
    :pointmax 6318
    :fsize 6317
    :lastmodtime '(20362 59690 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "Makefile"
    :major-mode 'makefile-gmake-mode
    :tags nil
    :file "Makefile"
    :pointmax 3356
    :fsize 3355
    :lastmodtime '(20362 59690 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "cedet-autogen.el"
    :major-mode 'emacs-lisp-mode
    :tags nil
    :file "cedet-autogen.el"
    :pointmax 8365
    :fsize 8364
    :lastmodtime '(20362 59689 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "cedet-loaddefs.el"
    :major-mode 'emacs-lisp-mode
    :tags nil
    :file "cedet-loaddefs.el"
    :pointmax 20820
    :fsize 20819
    :lastmodtime '(20362 59689 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "cedet.texi"
    :major-mode 'texinfo-mode
    :tags 
        '( ("@value{TITLE}" section (:members 
              ( ("Overview" section (:members 
                  ( ("@eieio{}" section nil nil [5979 6971])
                    ("Semantic" section nil nil [6971 8252])
                    ("@srecode{}" section nil nil [8252 8672])
                    ("Speedbar" section nil nil [8672 9554])
                    ("@ede{}" section nil nil [9554 10826])
                    ("COGRE" section nil nil [10826 11286])
                    ("Other @cedet{} Library functions" section nil nil [11286 13747]))                  ) nil [3079 13708])
                ("Installation and Basic Configuration" section nil nil [13708 16388])
                ("CEDET Context Menu" section nil nil [16388 17135])
                ("@i{JDEE} Target" section nil nil [17135 18180])
                ("ECB Target" section nil nil [18180 18878])
                ("Project Management" section nil nil [18878 20228])
                ("Code Completion" section nil nil [20228 21800])
                ("Code Generation" section nil nil [21800 22513])
                ("C++ Features" section (:members 
                  ( ("C Pre-processor" section (:members 
                      ( ("semantic-lex-c-preprocessor-symbol-map" def nil nil [22993 24267])
                        ("semantic-lex-c-preprocessor-symbol-file" def nil nil [24426 24888])
                        ("semantic-c-obey-conditional-section-parsing-flag" def nil nil [25075 25381])
                        ("semantic-lex-c-nested-namespace-ignore-second" def nil nil [25384 25943]))                      ) nil [22665 25945])
                    ("System Include path" section nil nil [25945 26359])
                    ("EDE Setup" section nil nil [26359 27813]))                  ) nil [22513 27790])
                ("Android Features" section (:members 
                  ( ("Create an Android project" section (:members 
                      ( ("cedet-android-sdk-root" def nil nil [28449 28556])
                        ("cedet-android-create-project" def nil nil [28601 29079]))                      ) nil [28139 29408])
                    ("EDE Setup" section nil nil [29408 31396])
                    ("ADB Features" section nil nil [31396 31803])
                    ("Android Sample Projects" section (:members 
                      ( ("cedet-android-visit-sample" def nil nil [31903 32058]))                      ) nil [31803 32060])
                    ("Android support for SRecode" section nil nil [32060 32250]))                  ) nil [27790 32227])
                ("Arduino Sketchbook Features" section (:members 
                  ( ("Create an Arduino Sketch (Project)" section (:members 
                      ( ("ede-arduino-preferences-file" def nil nil [33228 33377]))                      ) nil [32640 33379])
                    ("EDE Setup" section nil nil [33379 34127])
                    ("Serial Monitor" section (:members 
                      ( ("cedet-arduino-serial-monitor" def nil nil [34296 34459]))                      ) nil [34127 34643])
                    ("Arduino support for SRecode" section nil nil [34643 34880])
                    ("Arduino and smart completion" section nil nil [34880 35213]))                  ) nil [32227 35196])
                ("GNU Global" section (:members 
                  ( ("@ede{} and GNU Global" section nil nil [35920 36444])
                    ("@semantic{} Database" section nil nil [36444 36858])
                    ("@semantic Symref" section nil nil [36858 37243]))                  ) nil [35196 37228])
                ("ID Utils" section (:members 
                  ( ("@ede{} and ID Utils" section nil nil [37862 38382])
                    ("@semantic Symref" section nil nil [38382 38761]))                  ) nil [37228 38748])
                ("CScope" section (:members 
                  ( ("Detecting CScope" section nil nil [39352 39845])
                    ("@ede{} and CScope" section nil nil [39845 40374])
                    ("@semantic{} Database" section nil nil [40374 40760])
                    ("@semantic Symref" section nil nil [40760 41139]))                  ) nil [38748 41121])
                ("Maintenance" section nil nil [41121 41453])
                ("GNU Free Documentation License" section nil nil [41453 41567])
                ("Index" section nil nil [41567 41664]))              ) nil [1905 41664]))          
    :file "cedet.texi"
    :pointmax 41664
    :fsize 41663
    :lastmodtime '(20362 59689 0 0)
    :unmatched-syntax 'nil
    )
   )
  :file "!home!xth!Extended!emacs!config!cedet!common!semantic.cache"
  :semantic-tag-version "2.1"
  :semanticdb-version "2.1"
  )
